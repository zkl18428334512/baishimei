(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name);\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  maskWebview = maskWebview.parent() || maskWebview; // 再次检测父\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nvar api = /*#__PURE__*/Object.freeze({\n  requireNativePlugin: requireNativePlugin,\n  getSubNVueById: getSubNVueById });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref2)\n\n\n{var mocks = _ref2.mocks,initRefs = _ref2.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref3 =\n\n\n\n  event.detail || event.value,vuePid = _ref3.vuePid,vueOptions = _ref3.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref4.isPage,initRelation = _ref4.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var componentOptions = {\n    options: {\n      multipleSlots: true,\n      addGlobalClass: true },\n\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref5)\n\n\n{var isPage = _ref5.isPage,initRelation = _ref5.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 10:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/**\n * vuex v3.0.1\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: { configurable: true } };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if (true) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (path, targetModule, newModule) {\n  if (true) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if (true) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if (true) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"Store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  if (typeof state === 'function') {\n    state = state() || {};\n  }\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  if (Vue.config.devtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors = { state: { configurable: true } };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  if (true) {\n    assert(false, \"Use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n     true &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });\n\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  return genericSubscribe(fn, this._subscribers)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn) {\n  return genericSubscribe(fn, this._actionSubscribers)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if (true) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction genericSubscribe (fn, subs) {\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (true) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if (true) {\n      assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if (true) {\n    assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ( true && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ( true && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '3.0.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),

/***/ 11:
/*!*************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/auth.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.getToken = getToken;exports.setToken = setToken;exports.removeToken = removeToken;var TokenKey = 'access_token';\n\nfunction getToken() {\n  return uni.getStorageSync(TokenKey);\n}\n\nfunction setToken(token) {\n  return uni.setStorageSync(TokenKey, token);\n}\n\nfunction removeToken() {\n  return uni.removeStorageSync(TokenKey);\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2F1dGguanMiXSwibmFtZXMiOlsiVG9rZW5LZXkiLCJnZXRUb2tlbiIsInVuaSIsImdldFN0b3JhZ2VTeW5jIiwic2V0VG9rZW4iLCJ0b2tlbiIsInNldFN0b3JhZ2VTeW5jIiwicmVtb3ZlVG9rZW4iLCJyZW1vdmVTdG9yYWdlU3luYyJdLCJtYXBwaW5ncyI6Im1NQUFBLElBQU1BLFFBQVEsR0FBRyxjQUFqQjs7QUFFTyxTQUFTQyxRQUFULEdBQW9CO0FBQ3pCLFNBQU9DLEdBQUcsQ0FBQ0MsY0FBSixDQUFtQkgsUUFBbkIsQ0FBUDtBQUNEOztBQUVNLFNBQVNJLFFBQVQsQ0FBa0JDLEtBQWxCLEVBQXlCO0FBQzlCLFNBQU9ILEdBQUcsQ0FBQ0ksY0FBSixDQUFtQk4sUUFBbkIsRUFBNkJLLEtBQTdCLENBQVA7QUFDRDs7QUFFTSxTQUFTRSxXQUFULEdBQXVCO0FBQzVCLFNBQU9MLEdBQUcsQ0FBQ00saUJBQUosQ0FBc0JSLFFBQXRCLENBQVA7QUFDRCxDIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVG9rZW5LZXkgPSAnYWNjZXNzX3Rva2VuJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRva2VuKCkge1xyXG4gIHJldHVybiB1bmkuZ2V0U3RvcmFnZVN5bmMoVG9rZW5LZXkpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRUb2tlbih0b2tlbikge1xyXG4gIHJldHVybiB1bmkuc2V0U3RvcmFnZVN5bmMoVG9rZW5LZXksIHRva2VuKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVG9rZW4oKSB7XHJcbiAgcmV0dXJuIHVuaS5yZW1vdmVTdG9yYWdlU3luYyhUb2tlbktleSlcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),

/***/ 117:
/*!**********************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/utils/tools.1.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.parseTime = parseTime;exports.parseJavaTime = parseJavaTime;exports.formatTime = formatTime;exports.getQueryObject = getQueryObject;exports.byteLength = byteLength;exports.cleanArray = cleanArray;exports.param = param;exports.param2Obj = param2Obj;exports.html2Text = html2Text;exports.objectMerge = objectMerge;exports.toggleClass = toggleClass;exports.getTime = getTime;exports.debounce = debounce;exports.deepClone = deepClone;exports.uniqueArr = uniqueArr;exports.createUniqueString = createUniqueString;exports.hasClass = hasClass;exports.addClass = addClass;exports.removeClass = removeClass; /**\r\nreated by PanJiaChen on 16/11/18.\r\nn\n/**\r\narse the time to string\r\nparam {(Object|string|number)} time\r\nparam {string} cFormat\r\nreturns {string}\r\nnfunction parseTime(time, cFormat) {\n  if (arguments.length === 0) {\n    return null;\n  }\n  var format = cFormat || '{y}-{m}-{d} {H}:{i}:{s}';\n  var date;\n  var step = -1;\n  if (typeof time === 'object') {\n    date = time;\n  } else {\n    if (typeof time === 'string' && /^[0-9]+$/.test(time)) {\n      time = parseInt(time);\n    }\n    if (typeof time === 'number' && time.toString().length === 10) {\n      time = time * 1000;\n    }\n    if (typeof time === 'string' && uni.getSystemInfoSync().platform === 'ios') {\n      var a = time.split(/[^0-9]/);\n      var d;\n      if (a.length > 3) {\n        d = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);\n      } else\n      {\n        d = new Date(a[0], a[1] - 1, a[2]);\n      }\n      time = d.getTime();\n      if (a.length === 8 && a[7] === '0000') {\n        time = time + 3600 * 1000 * 8;\n      }\n    }\n    date = new Date(time);\n  }\n\n  var formatObj =\n  {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate() - 1,\n    h: date.getHours(),\n    H: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    e: date.getDay(),\n    a: date.getHours() };\n\n  var time_str = format.replace(/{(y|m|d|h|H|i|s|e|a)+}/g, function (result, key) {\n    var value = formatObj[key];\n    // Note: getDay() returns 0 on Sunday\n    if (key === 'e') {return ['日', '一', '二', '三', '四', '五', '六'][value];}\n    if (key === 'a') {\n      if (value > 12) {return '下午';} else {return '上午';}\n    }\n    if (key === 'h') {\n      if (value > 12) {value = value - 12;}\n    }\n    if (result.length > 0 && value < 10) {\n      value = '0' + value;\n    }\n    return value || 0;\n  });\n  return time_str;\n}\n\n/**\r\n   * 将\"yyyy-mm-ddTHH:MM:ss.000+0000\"格式的字符串，转化为一个Date对象\r\n   * Parse the string to time\r\n   * @param str \r\n   * @returns Date\r\n   */\nfunction parseJavaTime(str) {\n  if (uni.getSystemInfoSync().platform === 'ios') {\n    var a = str.split(/[^0-9]/);\n    var d;\n    if (a.length > 3) {\n      d = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);\n    } else\n    {\n      d = new Date(a[0], a[1] - 1, a[2]);\n    }\n    var time = d.getTime();\n    if (a.length === 8 && a[7] === '0000') {\n      time = time + 3600 * 1000 * 8;\n    }\n    return new Date(time);\n  } else\n  {\n    return new Date(str);\n  }\n}\n\n/**\r\n   * @param {number} time\r\n   * @param {string} option\r\n   * @returns {string}\r\n   */\nfunction formatTime(time, option) {\n  if (('' + time).length === 10) {\n    time = parseInt(time) * 1000;\n  } else {\n    time = +time;\n  }\n  var d = new Date(time);\n  var now = Date.now();\n\n  var diff = (now - d) / 1000;\n\n  if (diff < 30) {\n    return '刚刚';\n  } else if (diff < 3600) {\n    // less 1 hour\n    return Math.ceil(diff / 60) + '分钟前';\n  } else if (diff < 3600 * 24) {\n    return Math.ceil(diff / 3600) + '小时前';\n  } else if (diff < 3600 * 24 * 2) {\n    return '1天前';\n  }\n  if (option) {\n    return parseTime(time, option);\n  } else {\n    return (\n      d.getMonth() +\n      1 +\n      '月' +\n      d.getDate() +\n      '日' +\n      d.getHours() +\n      '时' +\n      d.getMinutes() +\n      '分');\n\n  }\n}\n\n/**\r\n   * @param {string} url\r\n   * @returns {Object}\r\n   */\nfunction getQueryObject(url) {\n  url = url == null ? window.location.href : url;\n  var search = url.substring(url.lastIndexOf('?') + 1);\n  var obj = {};\n  var reg = /([^?&=]+)=([^?&=]*)/g;\n  search.replace(reg, function (rs, $1, $2) {\n    var name = decodeURIComponent($1);\n    var val = decodeURIComponent($2);\n    val = String(val);\n    obj[name] = val;\n    return rs;\n  });\n  return obj;\n}\n\n/**\r\n   * @param {string} input value\r\n   * @returns {number} output value\r\n   */\nfunction byteLength(str) {\n  // returns the byte length of an utf8 string\n  var s = str.length;\n  for (var i = str.length - 1; i >= 0; i--) {\n    var code = str.charCodeAt(i);\n    if (code > 0x7f && code <= 0x7ff) s++;else\n    if (code > 0x7ff && code <= 0xffff) s += 2;\n    if (code >= 0xDC00 && code <= 0xDFFF) i--;\n  }\n  return s;\n}\n\n/**\r\n   * @param {Array} actual\r\n   * @returns {Array}\r\n   */\nfunction cleanArray(actual) {\n  var newArray = [];\n  for (var i = 0; i < actual.length; i++) {\n    if (actual[i]) {\n      newArray.push(actual[i]);\n    }\n  }\n  return newArray;\n}\n\n/**\r\n   * @param {Object} json\r\n   * @returns {Array}\r\n   */\nfunction param(json) {\n  if (!json) return '';\n  return cleanArray(\n  Object.keys(json).map(function (key) {\n    if (json[key] === undefined) return '';\n    return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);\n  })).\n  join('&');\n}\n\n/**\r\n   * @param {string} url\r\n   * @returns {Object}\r\n   */\nfunction param2Obj(url) {\n  var search = url.split('?')[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse(\n  '{\"' +\n  decodeURIComponent(search).\n  replace(/\"/g, '\\\\\"').\n  replace(/&/g, '\",\"').\n  replace(/=/g, '\":\"').\n  replace(/\\+/g, ' ') +\n  '\"}');\n\n}\n\n/**\r\n   * @param {string} val\r\n   * @returns {string}\r\n   */\nfunction html2Text(val) {\n  var div = document.createElement('div');\n  div.innerHTML = val;\n  return div.textContent || div.innerText;\n}\n\n/**\r\n   * Merges two objects, giving the last one precedence\r\n   * @param {Object} target\r\n   * @param {(Object|Array)} source\r\n   * @returns {Object}\r\n   */\nfunction objectMerge(target, source) {\n  if (typeof target !== 'object') {\n    target = {};\n  }\n  if (Array.isArray(source)) {\n    return source.slice();\n  }\n  Object.keys(source).forEach(function (property) {\n    var sourceProperty = source[property];\n    if (typeof sourceProperty === 'object') {\n      target[property] = objectMerge(target[property], sourceProperty);\n    } else {\n      target[property] = sourceProperty;\n    }\n  });\n  return target;\n}\n\n/**\r\n   * @param {HTMLElement} element\r\n   * @param {string} className\r\n   */\nfunction toggleClass(element, className) {\n  if (!element || !className) {\n    return;\n  }\n  var classString = element.className;\n  var nameIndex = classString.indexOf(className);\n  if (nameIndex === -1) {\n    classString += '' + className;\n  } else {\n    classString =\n    classString.substr(0, nameIndex) +\n    classString.substr(nameIndex + className.length);\n  }\n  element.className = classString;\n}\n\n/**\r\n   * @param {string} type\r\n   * @returns {Date}\r\n   */\nfunction getTime(type) {\n  if (type === 'start') {\n    return new Date().getTime() - 3600 * 1000 * 24 * 90;\n  } else {\n    return new Date(new Date().toDateString());\n  }\n}\n\n/**\r\n   * @param {Function} func\r\n   * @param {number} wait\r\n   * @param {boolean} immediate\r\n   * @return {*}\r\n   */\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function later() {\n    // 据上一次触发时间间隔\n    var last = +new Date() - timestamp;\n\n    // 上次被包装函数被调用时间间隔 last 小于设定时间间隔 wait\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n    context = this;\n    timestamp = +new Date();\n    var callNow = immediate && !timeout;\n    // 如果延时不存在，重新设定延时\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n\n/**\r\n   * This is just a simple version of deep copy\r\n   * Has a lot of edge cases bug\r\n   * If you want to use a perfect deep copy, use lodash's _.cloneDeep\r\n   * @param {Object} source\r\n   * @returns {Object}\r\n   */\nfunction deepClone(source) {\n  if (!source && typeof source !== 'object') {\n    throw new Error('error arguments', 'deepClone');\n  }\n  var targetObj = source.constructor === Array ? [] : {};\n  Object.keys(source).forEach(function (keys) {\n    if (source[keys] && typeof source[keys] === 'object') {\n      targetObj[keys] = deepClone(source[keys]);\n    } else {\n      targetObj[keys] = source[keys];\n    }\n  });\n  return targetObj;\n}\n\n/**\r\n   * @param {Array} arr\r\n   * @returns {Array}\r\n   */\nfunction uniqueArr(arr) {\n  return Array.from(new Set(arr));\n}\n\n/**\r\n   * @returns {string}\r\n   */\nfunction createUniqueString() {\n  var timestamp = +new Date() + '';\n  var randomNum = parseInt((1 + Math.random()) * 65536) + '';\n  return (+(randomNum + timestamp)).toString(32);\n}\n\n/**\r\n   * Check if an element has a class\r\n   * @param {HTMLElement} elm\r\n   * @param {string} cls\r\n   * @returns {boolean}\r\n   */\nfunction hasClass(ele, cls) {\n  return !!ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\n\n/**\r\n   * Add class to element\r\n   * @param {HTMLElement} elm\r\n   * @param {string} cls\r\n   */\nfunction addClass(ele, cls) {\n  if (!hasClass(ele, cls)) ele.className += ' ' + cls;\n}\n\n/**\r\n   * Remove class from element\r\n   * @param {HTMLElement} elm\r\n   * @param {string} cls\r\n   */\nfunction removeClass(ele, cls) {\n  if (hasClass(ele, cls)) {\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n    ele.className = ele.className.replace(reg, ' ');\n  }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///117\n");

/***/ }),

/***/ 118:
/*!***********************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/api/Reportform.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.LoadYesterdaySalesData = LoadYesterdaySalesData;exports.FlipInstantaneousLoadingSalesData = FlipInstantaneousLoadingSalesData;exports.CustomerDataChangeDataAnalysis = CustomerDataChangeDataAnalysis;exports.Changethetimetorenderdata = Changethetimetorenderdata;exports.Loadingcustomerinformation = Loadingcustomerinformation;exports.Loadingcommodityinformation = Loadingcommodityinformation;exports.CommodityChangeData = CommodityChangeData;exports.Grossprofitanalysisdata = Grossprofitanalysisdata;var _interface = _interopRequireDefault(__webpack_require__(/*! ./interface */ 22));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction LoadYesterdaySalesData(query) {\n  return _interface.default.request({\n    url: \"/report-svc/api/v1/report/stat-data-report/list-gross-profit-data\",\n    method: 'GET',\n    data: query });\n\n\n}\n\nfunction FlipInstantaneousLoadingSalesData(query) {\n  return _interface.default.request({\n    url: \"/report-svc/api/v1/report/stat-data-report/list-sale-data\",\n    method: 'GET',\n    data: query });\n\n}\n\nfunction CustomerDataChangeDataAnalysis(query) {\n  return _interface.default.request({\n    url: \"/report-svc/api/v1/report/stat-data-report/list-sale-data\",\n    method: 'GET',\n    data: query });\n\n}\n\nfunction Changethetimetorenderdata(query) {\n  return _interface.default.request({\n    url: \"/report-svc/api/v1/report/stat-data-report/list-sale-data\",\n    method: 'GET',\n    data: query });\n\n}\n\nfunction Loadingcustomerinformation(query) {\n  return _interface.default.request({\n    url: \"/report-svc/api/v1/report/stat-data-report/list-rel-org\",\n    method: 'GET',\n    data: query });\n\n}\n\nfunction Loadingcommodityinformation(query) {\n  return _interface.default.request({\n    url: \"/report-svc/api/v1/report/stat-data-report/product-type-tree\",\n    method: 'GET',\n    data: query });\n\n}\n\nfunction CommodityChangeData(query) {\n  return _interface.default.request({\n    url: \"/report-svc/api/v1/report/stat-data-report/list-sale-data\",\n    method: 'GET',\n    data: query });\n\n}\n\nfunction Grossprofitanalysisdata(query) {\n  return _interface.default.request({\n    url: \"/report-svc/api/v1/report/stat-data-report/list-gross-profit-data\",\n    method: 'GET',\n    data: query });\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2FwaS9SZXBvcnRmb3JtLmpzIl0sIm5hbWVzIjpbIkxvYWRZZXN0ZXJkYXlTYWxlc0RhdGEiLCJxdWVyeSIsImh0dHAiLCJyZXF1ZXN0IiwidXJsIiwibWV0aG9kIiwiZGF0YSIsIkZsaXBJbnN0YW50YW5lb3VzTG9hZGluZ1NhbGVzRGF0YSIsIkN1c3RvbWVyRGF0YUNoYW5nZURhdGFBbmFseXNpcyIsIkNoYW5nZXRoZXRpbWV0b3JlbmRlcmRhdGEiLCJMb2FkaW5nY3VzdG9tZXJpbmZvcm1hdGlvbiIsIkxvYWRpbmdjb21tb2RpdHlpbmZvcm1hdGlvbiIsIkNvbW1vZGl0eUNoYW5nZURhdGEiLCJHcm9zc3Byb2ZpdGFuYWx5c2lzZGF0YSJdLCJtYXBwaW5ncyI6IndqQkFBQyxvRjs7QUFFTSxTQUFVQSxzQkFBVixDQUFpQ0MsS0FBakMsRUFBdUM7QUFDN0MsU0FBUUMsbUJBQUtDLE9BQUwsQ0FBYTtBQUNwQkMsT0FBRyxFQUFFLG1FQURlO0FBRXBCQyxVQUFNLEVBQUUsS0FGWTtBQUdwQkMsUUFBSSxFQUFDTCxLQUhlLEVBQWIsQ0FBUjs7O0FBTUE7O0FBRU0sU0FBVU0saUNBQVYsQ0FBNENOLEtBQTVDLEVBQWtEO0FBQ3hELFNBQVFDLG1CQUFLQyxPQUFMLENBQWE7QUFDcEJDLE9BQUcsRUFBRSwyREFEZTtBQUVwQkMsVUFBTSxFQUFFLEtBRlk7QUFHcEJDLFFBQUksRUFBQ0wsS0FIZSxFQUFiLENBQVI7O0FBS0E7O0FBRU0sU0FBU08sOEJBQVQsQ0FBeUNQLEtBQXpDLEVBQStDO0FBQ3JELFNBQVFDLG1CQUFLQyxPQUFMLENBQWE7QUFDcEJDLE9BQUcsRUFBRSwyREFEZTtBQUVwQkMsVUFBTSxFQUFFLEtBRlk7QUFHcEJDLFFBQUksRUFBQ0wsS0FIZSxFQUFiLENBQVI7O0FBS0E7O0FBRU0sU0FBU1EseUJBQVQsQ0FBb0NSLEtBQXBDLEVBQTBDO0FBQ2hELFNBQVFDLG1CQUFLQyxPQUFMLENBQWE7QUFDcEJDLE9BQUcsRUFBRSwyREFEZTtBQUVwQkMsVUFBTSxFQUFFLEtBRlk7QUFHcEJDLFFBQUksRUFBQ0wsS0FIZSxFQUFiLENBQVI7O0FBS0E7O0FBRU0sU0FBU1MsMEJBQVQsQ0FBcUNULEtBQXJDLEVBQTJDO0FBQ2pELFNBQVFDLG1CQUFLQyxPQUFMLENBQWE7QUFDcEJDLE9BQUcsRUFBRSx5REFEZTtBQUVwQkMsVUFBTSxFQUFFLEtBRlk7QUFHcEJDLFFBQUksRUFBQ0wsS0FIZSxFQUFiLENBQVI7O0FBS0E7O0FBRU0sU0FBU1UsMkJBQVQsQ0FBc0NWLEtBQXRDLEVBQTRDO0FBQ2xELFNBQVFDLG1CQUFLQyxPQUFMLENBQWE7QUFDcEJDLE9BQUcsRUFBRSw4REFEZTtBQUVwQkMsVUFBTSxFQUFFLEtBRlk7QUFHcEJDLFFBQUksRUFBQ0wsS0FIZSxFQUFiLENBQVI7O0FBS0E7O0FBRU0sU0FBU1csbUJBQVQsQ0FBOEJYLEtBQTlCLEVBQW9DO0FBQzFDLFNBQVFDLG1CQUFLQyxPQUFMLENBQWE7QUFDcEJDLE9BQUcsRUFBRSwyREFEZTtBQUVwQkMsVUFBTSxFQUFFLEtBRlk7QUFHcEJDLFFBQUksRUFBQ0wsS0FIZSxFQUFiLENBQVI7O0FBS0E7O0FBRU0sU0FBU1ksdUJBQVQsQ0FBa0NaLEtBQWxDLEVBQXdDO0FBQzlDLFNBQVFDLG1CQUFLQyxPQUFMLENBQWE7QUFDcEJDLE9BQUcsRUFBRSxtRUFEZTtBQUVwQkMsVUFBTSxFQUFFLEtBRlk7QUFHcEJDLFFBQUksRUFBQ0wsS0FIZSxFQUFiLENBQVI7O0FBS0EiLCJmaWxlIjoiMTE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIGltcG9ydCBodHRwIGZyb20gJy4vaW50ZXJmYWNlJ1xyXG4gXHJcbmV4cG9ydCBmdW5jdGlvbiAgTG9hZFllc3RlcmRheVNhbGVzRGF0YShxdWVyeSl7XHJcblx0cmV0dXJuICBodHRwLnJlcXVlc3Qoe1xyXG5cdFx0dXJsOiBcIi9yZXBvcnQtc3ZjL2FwaS92MS9yZXBvcnQvc3RhdC1kYXRhLXJlcG9ydC9saXN0LWdyb3NzLXByb2ZpdC1kYXRhXCIsXHJcblx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0ZGF0YTpxdWVyeVxyXG5cdH0pXHJcblx0XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiAgRmxpcEluc3RhbnRhbmVvdXNMb2FkaW5nU2FsZXNEYXRhKHF1ZXJ5KXtcclxuXHRyZXR1cm4gIGh0dHAucmVxdWVzdCh7XHJcblx0XHR1cmw6IFwiL3JlcG9ydC1zdmMvYXBpL3YxL3JlcG9ydC9zdGF0LWRhdGEtcmVwb3J0L2xpc3Qtc2FsZS1kYXRhXCIsXHJcblx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0ZGF0YTpxdWVyeVxyXG5cdH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDdXN0b21lckRhdGFDaGFuZ2VEYXRhQW5hbHlzaXMgKHF1ZXJ5KXtcclxuXHRyZXR1cm4gIGh0dHAucmVxdWVzdCh7XHJcblx0XHR1cmw6IFwiL3JlcG9ydC1zdmMvYXBpL3YxL3JlcG9ydC9zdGF0LWRhdGEtcmVwb3J0L2xpc3Qtc2FsZS1kYXRhXCIsXHJcblx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0ZGF0YTpxdWVyeVxyXG5cdH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDaGFuZ2V0aGV0aW1ldG9yZW5kZXJkYXRhIChxdWVyeSl7XHJcblx0cmV0dXJuICBodHRwLnJlcXVlc3Qoe1xyXG5cdFx0dXJsOiBcIi9yZXBvcnQtc3ZjL2FwaS92MS9yZXBvcnQvc3RhdC1kYXRhLXJlcG9ydC9saXN0LXNhbGUtZGF0YVwiLFxyXG5cdFx0bWV0aG9kOiAnR0VUJyxcclxuXHRcdGRhdGE6cXVlcnlcclxuXHR9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gTG9hZGluZ2N1c3RvbWVyaW5mb3JtYXRpb24gKHF1ZXJ5KXtcclxuXHRyZXR1cm4gIGh0dHAucmVxdWVzdCh7XHJcblx0XHR1cmw6IFwiL3JlcG9ydC1zdmMvYXBpL3YxL3JlcG9ydC9zdGF0LWRhdGEtcmVwb3J0L2xpc3QtcmVsLW9yZ1wiLFxyXG5cdFx0bWV0aG9kOiAnR0VUJyxcclxuXHRcdGRhdGE6cXVlcnlcclxuXHR9KVxyXG59XHJcbiBcclxuZXhwb3J0IGZ1bmN0aW9uIExvYWRpbmdjb21tb2RpdHlpbmZvcm1hdGlvbiAocXVlcnkpe1xyXG5cdHJldHVybiAgaHR0cC5yZXF1ZXN0KHtcclxuXHRcdHVybDogXCIvcmVwb3J0LXN2Yy9hcGkvdjEvcmVwb3J0L3N0YXQtZGF0YS1yZXBvcnQvcHJvZHVjdC10eXBlLXRyZWVcIixcclxuXHRcdG1ldGhvZDogJ0dFVCcsXHJcblx0XHRkYXRhOnF1ZXJ5XHJcblx0fSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENvbW1vZGl0eUNoYW5nZURhdGEgKHF1ZXJ5KXtcclxuXHRyZXR1cm4gIGh0dHAucmVxdWVzdCh7XHJcblx0XHR1cmw6IFwiL3JlcG9ydC1zdmMvYXBpL3YxL3JlcG9ydC9zdGF0LWRhdGEtcmVwb3J0L2xpc3Qtc2FsZS1kYXRhXCIsXHJcblx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0ZGF0YTpxdWVyeVxyXG5cdH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBHcm9zc3Byb2ZpdGFuYWx5c2lzZGF0YSAocXVlcnkpe1xyXG5cdHJldHVybiAgaHR0cC5yZXF1ZXN0KHtcclxuXHRcdHVybDogXCIvcmVwb3J0LXN2Yy9hcGkvdjEvcmVwb3J0L3N0YXQtZGF0YS1yZXBvcnQvbGlzdC1ncm9zcy1wcm9maXQtZGF0YVwiLFxyXG5cdFx0bWV0aG9kOiAnR0VUJyxcclxuXHRcdGRhdGE6cXVlcnlcclxuXHR9KVxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///118\n");

/***/ }),

/***/ 12:
/*!**********************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/filters/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.timeAgo = timeAgo;exports.numberFormatter = numberFormatter;exports.toThousandFilter = toThousandFilter;exports.uppercaseFirst = uppercaseFirst;Object.defineProperty(exports, \"parseTime\", { enumerable: true, get: function get() {return _tools.parseTime;} });Object.defineProperty(exports, \"formatTime\", { enumerable: true, get: function get() {return _tools.formatTime;} });\nvar _tools = __webpack_require__(/*! @/common/utils/tools */ 13); // import parseTime, formatTime and set to filter\n\n/**\r\n * Show plural label if time is plural number\r\n * @param {number} time\r\n * @param {string} label\r\n * @return {string}\r\n */\nfunction pluralize(time, label) {\n  if (time === 1) {\n    return time + label;\n  }\n  return time + label + 's';\n}\n\n/**\r\n   * @param {number} time\r\n   */\nfunction timeAgo(time) {\n  var between = Date.now() / 1000 - Number(time);\n  if (between < 3600) {\n    return pluralize(~~(between / 60), ' minute');\n  } else if (between < 86400) {\n    return pluralize(~~(between / 3600), ' hour');\n  } else {\n    return pluralize(~~(between / 86400), ' day');\n  }\n}\n\n/**\r\n   * Number formatting\r\n   * like 10000 => 10k\r\n   * @param {number} num\r\n   * @param {number} digits\r\n   */\nfunction numberFormatter(num, digits) {\n  var si = [\n  { value: 1E18, symbol: 'E' },\n  { value: 1E15, symbol: 'P' },\n  { value: 1E12, symbol: 'T' },\n  { value: 1E9, symbol: 'G' },\n  { value: 1E6, symbol: 'M' },\n  { value: 1E3, symbol: 'k' }];\n\n  for (var i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value + 0.1).toFixed(digits).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + si[i].symbol;\n    }\n  }\n  return num.toString();\n}\n\n/**\r\n   * 10000 => \"10,000\"\r\n   * @param {number} num\r\n   */\nfunction toThousandFilter(num) {\n  return (+num || 0).toString().replace(/^-?\\d+/g, function (m) {return m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ',');});\n}\n\n/**\r\n   * Upper case first char\r\n   * @param {String} string\r\n   */\nfunction uppercaseFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2ZpbHRlcnMvaW5kZXguanMiXSwibmFtZXMiOlsicGx1cmFsaXplIiwidGltZSIsImxhYmVsIiwidGltZUFnbyIsImJldHdlZW4iLCJEYXRlIiwibm93IiwiTnVtYmVyIiwibnVtYmVyRm9ybWF0dGVyIiwibnVtIiwiZGlnaXRzIiwic2kiLCJ2YWx1ZSIsInN5bWJvbCIsImkiLCJsZW5ndGgiLCJ0b0ZpeGVkIiwicmVwbGFjZSIsInRvU3RyaW5nIiwidG9UaG91c2FuZEZpbHRlciIsIm0iLCJ1cHBlcmNhc2VGaXJzdCIsInN0cmluZyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiXSwibWFwcGluZ3MiOiI7QUFDQSxpRSxDQURBOztBQUdBOzs7Ozs7QUFNQSxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsS0FBekIsRUFBZ0M7QUFDOUIsTUFBSUQsSUFBSSxLQUFLLENBQWIsRUFBZ0I7QUFDZCxXQUFPQSxJQUFJLEdBQUdDLEtBQWQ7QUFDRDtBQUNELFNBQU9ELElBQUksR0FBR0MsS0FBUCxHQUFlLEdBQXRCO0FBQ0Q7O0FBRUQ7OztBQUdPLFNBQVNDLE9BQVQsQ0FBaUJGLElBQWpCLEVBQXVCO0FBQzVCLE1BQU1HLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxHQUFMLEtBQWEsSUFBYixHQUFvQkMsTUFBTSxDQUFDTixJQUFELENBQTFDO0FBQ0EsTUFBSUcsT0FBTyxHQUFHLElBQWQsRUFBb0I7QUFDbEIsV0FBT0osU0FBUyxDQUFDLENBQUMsRUFBRUksT0FBTyxHQUFHLEVBQVosQ0FBRixFQUFtQixTQUFuQixDQUFoQjtBQUNELEdBRkQsTUFFTyxJQUFJQSxPQUFPLEdBQUcsS0FBZCxFQUFxQjtBQUMxQixXQUFPSixTQUFTLENBQUMsQ0FBQyxFQUFFSSxPQUFPLEdBQUcsSUFBWixDQUFGLEVBQXFCLE9BQXJCLENBQWhCO0FBQ0QsR0FGTSxNQUVBO0FBQ0wsV0FBT0osU0FBUyxDQUFDLENBQUMsRUFBRUksT0FBTyxHQUFHLEtBQVosQ0FBRixFQUFzQixNQUF0QixDQUFoQjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7OztBQU1PLFNBQVNJLGVBQVQsQ0FBeUJDLEdBQXpCLEVBQThCQyxNQUE5QixFQUFzQztBQUMzQyxNQUFNQyxFQUFFLEdBQUc7QUFDVCxJQUFFQyxLQUFLLEVBQUUsSUFBVCxFQUFlQyxNQUFNLEVBQUUsR0FBdkIsRUFEUztBQUVULElBQUVELEtBQUssRUFBRSxJQUFULEVBQWVDLE1BQU0sRUFBRSxHQUF2QixFQUZTO0FBR1QsSUFBRUQsS0FBSyxFQUFFLElBQVQsRUFBZUMsTUFBTSxFQUFFLEdBQXZCLEVBSFM7QUFJVCxJQUFFRCxLQUFLLEVBQUUsR0FBVCxFQUFjQyxNQUFNLEVBQUUsR0FBdEIsRUFKUztBQUtULElBQUVELEtBQUssRUFBRSxHQUFULEVBQWNDLE1BQU0sRUFBRSxHQUF0QixFQUxTO0FBTVQsSUFBRUQsS0FBSyxFQUFFLEdBQVQsRUFBY0MsTUFBTSxFQUFFLEdBQXRCLEVBTlMsQ0FBWDs7QUFRQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILEVBQUUsQ0FBQ0ksTUFBdkIsRUFBK0JELENBQUMsRUFBaEMsRUFBb0M7QUFDbEMsUUFBSUwsR0FBRyxJQUFJRSxFQUFFLENBQUNHLENBQUQsQ0FBRixDQUFNRixLQUFqQixFQUF3QjtBQUN0QixhQUFPLENBQUNILEdBQUcsR0FBR0UsRUFBRSxDQUFDRyxDQUFELENBQUYsQ0FBTUYsS0FBWixHQUFvQixHQUFyQixFQUEwQkksT0FBMUIsQ0FBa0NOLE1BQWxDLEVBQTBDTyxPQUExQyxDQUFrRCwwQkFBbEQsRUFBOEUsSUFBOUUsSUFBc0ZOLEVBQUUsQ0FBQ0csQ0FBRCxDQUFGLENBQU1ELE1BQW5HO0FBQ0Q7QUFDRjtBQUNELFNBQU9KLEdBQUcsQ0FBQ1MsUUFBSixFQUFQO0FBQ0Q7O0FBRUQ7Ozs7QUFJTyxTQUFTQyxnQkFBVCxDQUEwQlYsR0FBMUIsRUFBK0I7QUFDcEMsU0FBTyxDQUFDLENBQUNBLEdBQUQsSUFBUSxDQUFULEVBQVlTLFFBQVosR0FBdUJELE9BQXZCLENBQStCLFNBQS9CLEVBQTBDLFVBQUFHLENBQUMsVUFBSUEsQ0FBQyxDQUFDSCxPQUFGLENBQVUsc0JBQVYsRUFBa0MsR0FBbEMsQ0FBSixFQUEzQyxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7QUFJTyxTQUFTSSxjQUFULENBQXdCQyxNQUF4QixFQUFnQztBQUNyQyxTQUFPQSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxDQUFkLEVBQWlCQyxXQUFqQixLQUFpQ0YsTUFBTSxDQUFDRyxLQUFQLENBQWEsQ0FBYixDQUF4QztBQUNEIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHBhcnNlVGltZSwgZm9ybWF0VGltZSBhbmQgc2V0IHRvIGZpbHRlclxyXG5leHBvcnQgeyBwYXJzZVRpbWUsIGZvcm1hdFRpbWUgfSBmcm9tICdAL2NvbW1vbi91dGlscy90b29scydcclxuXHJcbi8qKlxyXG4gKiBTaG93IHBsdXJhbCBsYWJlbCBpZiB0aW1lIGlzIHBsdXJhbCBudW1iZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcclxuICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIHBsdXJhbGl6ZSh0aW1lLCBsYWJlbCkge1xyXG4gIGlmICh0aW1lID09PSAxKSB7XHJcbiAgICByZXR1cm4gdGltZSArIGxhYmVsXHJcbiAgfVxyXG4gIHJldHVybiB0aW1lICsgbGFiZWwgKyAncydcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdGltZUFnbyh0aW1lKSB7XHJcbiAgY29uc3QgYmV0d2VlbiA9IERhdGUubm93KCkgLyAxMDAwIC0gTnVtYmVyKHRpbWUpXHJcbiAgaWYgKGJldHdlZW4gPCAzNjAwKSB7XHJcbiAgICByZXR1cm4gcGx1cmFsaXplKH5+KGJldHdlZW4gLyA2MCksICcgbWludXRlJylcclxuICB9IGVsc2UgaWYgKGJldHdlZW4gPCA4NjQwMCkge1xyXG4gICAgcmV0dXJuIHBsdXJhbGl6ZSh+fihiZXR3ZWVuIC8gMzYwMCksICcgaG91cicpXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBwbHVyYWxpemUofn4oYmV0d2VlbiAvIDg2NDAwKSwgJyBkYXknKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE51bWJlciBmb3JtYXR0aW5nXHJcbiAqIGxpa2UgMTAwMDAgPT4gMTBrXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cclxuICogQHBhcmFtIHtudW1iZXJ9IGRpZ2l0c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlckZvcm1hdHRlcihudW0sIGRpZ2l0cykge1xyXG4gIGNvbnN0IHNpID0gW1xyXG4gICAgeyB2YWx1ZTogMUUxOCwgc3ltYm9sOiAnRScgfSxcclxuICAgIHsgdmFsdWU6IDFFMTUsIHN5bWJvbDogJ1AnIH0sXHJcbiAgICB7IHZhbHVlOiAxRTEyLCBzeW1ib2w6ICdUJyB9LFxyXG4gICAgeyB2YWx1ZTogMUU5LCBzeW1ib2w6ICdHJyB9LFxyXG4gICAgeyB2YWx1ZTogMUU2LCBzeW1ib2w6ICdNJyB9LFxyXG4gICAgeyB2YWx1ZTogMUUzLCBzeW1ib2w6ICdrJyB9XHJcbiAgXVxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2kubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChudW0gPj0gc2lbaV0udmFsdWUpIHtcclxuICAgICAgcmV0dXJuIChudW0gLyBzaVtpXS52YWx1ZSArIDAuMSkudG9GaXhlZChkaWdpdHMpLnJlcGxhY2UoL1xcLjArJHwoXFwuWzAtOV0qWzEtOV0pMCskLywgJyQxJykgKyBzaVtpXS5zeW1ib2xcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG51bS50b1N0cmluZygpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxMDAwMCA9PiBcIjEwLDAwMFwiXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1Rob3VzYW5kRmlsdGVyKG51bSkge1xyXG4gIHJldHVybiAoK251bSB8fCAwKS50b1N0cmluZygpLnJlcGxhY2UoL14tP1xcZCsvZywgbSA9PiBtLnJlcGxhY2UoLyg/PSg/IVxcYikoXFxkezN9KSskKS9nLCAnLCcpKVxyXG59XHJcblxyXG4vKipcclxuICogVXBwZXIgY2FzZSBmaXJzdCBjaGFyXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1cHBlcmNhc2VGaXJzdChzdHJpbmcpIHtcclxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 127:
/*!**********************************************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/components/js_sdk/u-charts/u-charts/u-charts.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {/*\r\n * uCharts v1.8.4.20190810\r\n * uni-app平台高性能跨全端图表，支持H5、APP、小程序（微信/支付宝/百度/头条/QQ/360）\r\n * Copyright (c) 2019 QIUN秋云 https://www.ucharts.cn All rights reserved.\r\n * Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\r\n * \r\n * uCharts官方网站\r\n * https://www.uCharts.cn\r\n * \r\n * 开源地址:\r\n * https://gitee.com/uCharts/uCharts\r\n * \r\n * uni-app插件市场地址：\r\n * http://ext.dcloud.net.cn/plugin?id=271\r\n * \r\n */\n\n\n\nvar config = {\n  yAxisWidth: 15,\n  yAxisSplit: 5,\n  xAxisHeight: 15,\n  xAxisLineHeight: 15,\n  legendHeight: 15,\n  yAxisTitleWidth: 15,\n  padding: [10, 10, 10, 10],\n  pixelRatio: 1,\n  rotate: false,\n  columePadding: 3,\n  fontSize: 13,\n  //dataPointShape: ['diamond', 'circle', 'triangle', 'rect'],\n  dataPointShape: ['circle', 'circle', 'circle', 'circle'],\n  colors: ['#1890ff', '#2fc25b', '#facc14', '#f04864', '#8543e0', '#90ed7d'],\n  pieChartLinePadding: 15,\n  pieChartTextPadding: 5,\n  xAxisTextPadding: 3,\n  titleColor: '#333333',\n  titleFontSize: 20,\n  subtitleColor: '#999999',\n  subtitleFontSize: 15,\n  toolTipPadding: 3,\n  toolTipBackground: '#000000',\n  toolTipOpacity: 0.7,\n  toolTipLineHeight: 20,\n  radarGridCount: 3,\n  radarLabelTextMargin: 15,\n  gaugeLabelTextMargin: 15 };\n\n\nvar assign;\nif (Object.assign) {\n  assign = Object.assign;\n} else {\n  // 使用polyfill\n  assign = function assign(target, varArgs) {\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n    var to = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var nextSource = arguments[index];\n      if (nextSource != null) {\n        for (var nextKey in nextSource) {\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n    return to;\n  };\n}\n\nvar util = {\n  toFixed: function toFixed(num, limit) {\n    limit = limit || 2;\n    if (this.isFloat(num)) {\n      num = num.toFixed(limit);\n    }\n    return num;\n  },\n  isFloat: function isFloat(num) {\n    return num % 1 !== 0;\n  },\n  approximatelyEqual: function approximatelyEqual(num1, num2) {\n    return Math.abs(num1 - num2) < 1e-10;\n  },\n  isSameSign: function isSameSign(num1, num2) {\n    return Math.abs(num1) === num1 && Math.abs(num2) === num2 || Math.abs(num1) !== num1 && Math.abs(num2) !== num2;\n  },\n  isSameXCoordinateArea: function isSameXCoordinateArea(p1, p2) {\n    return this.isSameSign(p1.x, p2.x);\n  },\n  isCollision: function isCollision(obj1, obj2) {\n    obj1.end = {};\n    obj1.end.x = obj1.start.x + obj1.width;\n    obj1.end.y = obj1.start.y - obj1.height;\n    obj2.end = {};\n    obj2.end.x = obj2.start.x + obj2.width;\n    obj2.end.y = obj2.start.y - obj2.height;\n    var flag = obj2.start.x > obj1.end.x || obj2.end.x < obj1.start.x || obj2.end.y > obj1.start.y || obj2.start.y < obj1.end.y;\n    return !flag;\n  } };\n\n\n//兼容H5点击事件\nfunction getH5Offset(e) {\n  e.mp = {\n    changedTouches: [] };\n\n  e.mp.changedTouches.push({\n    x: e.offsetX,\n    y: e.offsetY });\n\n  return e;\n}\n\n// hex 转 rgba\nfunction hexToRgb(hexValue, opc) {\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var hex = hexValue.replace(rgx, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  var r = parseInt(rgb[1], 16);\n  var g = parseInt(rgb[2], 16);\n  var b = parseInt(rgb[3], 16);\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + opc + ')';\n}\n\nfunction findRange(num, type, limit) {\n  if (isNaN(num)) {\n    throw new Error('[uCharts] unvalid series data!');\n  }\n  limit = limit || 10;\n  type = type ? type : 'upper';\n  var multiple = 1;\n  while (limit < 1) {\n    limit *= 10;\n    multiple *= 10;\n  }\n  if (type === 'upper') {\n    num = Math.ceil(num * multiple);\n  } else {\n    num = Math.floor(num * multiple);\n  }\n  while (num % limit !== 0) {\n    if (type === 'upper') {\n      num++;\n    } else {\n      num--;\n    }\n  }\n  return num / multiple;\n}\n\nfunction calCandleMA(dayArr, nameArr, colorArr, kdata) {\n  var seriesTemp = [];\n  for (var k = 0; k < dayArr.length; k++) {\n    var seriesItem = {\n      data: [],\n      name: nameArr[k],\n      color: colorArr[k] };\n\n    for (var i = 0, len = kdata.length; i < len; i++) {\n      if (i < dayArr[k]) {\n        seriesItem.data.push(null);\n        continue;\n      }\n      var sum = 0;\n      for (var j = 0; j < dayArr[k]; j++) {\n        sum += kdata[i - j][1];\n      }\n      seriesItem.data.push(+(sum / dayArr[k]).toFixed(3));\n    }\n    seriesTemp.push(seriesItem);\n  }\n  return seriesTemp;\n}\n\nfunction calValidDistance(distance, chartData, config, opts) {\n  var dataChartAreaWidth = opts.width - opts.area[1] - opts.area[3];\n  var dataChartWidth = chartData.eachSpacing * (opts.chartData.xAxisData.xAxisPoints.length - 1);\n  var validDistance = distance;\n  if (distance >= 0) {\n    validDistance = 0;\n  } else if (Math.abs(distance) >= dataChartWidth - dataChartAreaWidth) {\n    validDistance = dataChartAreaWidth - dataChartWidth;\n  }\n  return validDistance;\n}\n\nfunction isInAngleRange(angle, startAngle, endAngle) {\n  function adjust(angle) {\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    return angle;\n  }\n  angle = adjust(angle);\n  startAngle = adjust(startAngle);\n  endAngle = adjust(endAngle);\n  if (startAngle > endAngle) {\n    endAngle += 2 * Math.PI;\n    if (angle < startAngle) {\n      angle += 2 * Math.PI;\n    }\n  }\n  return angle >= startAngle && angle <= endAngle;\n}\n\nfunction calRotateTranslate(x, y, h) {\n  var xv = x;\n  var yv = h - y;\n  var transX = xv + (h - yv - xv) / Math.sqrt(2);\n  transX *= -1;\n  var transY = (h - yv) * (Math.sqrt(2) - 1) - (h - yv - xv) / Math.sqrt(2);\n  return {\n    transX: transX,\n    transY: transY };\n\n}\n\nfunction createCurveControlPoints(points, i) {\n\n  function isNotMiddlePoint(points, i) {\n    if (points[i - 1] && points[i + 1]) {\n      return points[i].y >= Math.max(points[i - 1].y, points[i + 1].y) || points[i].y <= Math.min(points[i - 1].y,\n      points[\n      i + 1].y);\n    } else {\n      return false;\n    }\n  }\n  var a = 0.2;\n  var b = 0.2;\n  var pAx = null;\n  var pAy = null;\n  var pBx = null;\n  var pBy = null;\n  if (i < 1) {\n    pAx = points[0].x + (points[1].x - points[0].x) * a;\n    pAy = points[0].y + (points[1].y - points[0].y) * a;\n  } else {\n    pAx = points[i].x + (points[i + 1].x - points[i - 1].x) * a;\n    pAy = points[i].y + (points[i + 1].y - points[i - 1].y) * a;\n  }\n\n  if (i > points.length - 3) {\n    var last = points.length - 1;\n    pBx = points[last].x - (points[last].x - points[last - 1].x) * b;\n    pBy = points[last].y - (points[last].y - points[last - 1].y) * b;\n  } else {\n    pBx = points[i + 1].x - (points[i + 2].x - points[i].x) * b;\n    pBy = points[i + 1].y - (points[i + 2].y - points[i].y) * b;\n  }\n  if (isNotMiddlePoint(points, i + 1)) {\n    pBy = points[i + 1].y;\n  }\n  if (isNotMiddlePoint(points, i)) {\n    pAy = points[i].y;\n  }\n  return {\n    ctrA: {\n      x: pAx,\n      y: pAy },\n\n    ctrB: {\n      x: pBx,\n      y: pBy } };\n\n\n}\n\nfunction convertCoordinateOrigin(x, y, center) {\n  return {\n    x: center.x + x,\n    y: center.y - y };\n\n}\n\nfunction avoidCollision(obj, target) {\n  if (target) {\n    // is collision test\n    while (util.isCollision(obj, target)) {\n      if (obj.start.x > 0) {\n        obj.start.y--;\n      } else if (obj.start.x < 0) {\n        obj.start.y++;\n      } else {\n        if (obj.start.y > 0) {\n          obj.start.y++;\n        } else {\n          obj.start.y--;\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nfunction fillSeries(series, opts, config) {\n  var index = 0;\n  return series.map(function (item) {\n    if (!item.color) {\n      item.color = config.colors[index];\n      index = (index + 1) % config.colors.length;\n    }\n    if (!item.type) {\n      item.type = opts.type;\n    }\n    if (typeof item.show == \"undefined\") {\n      item.show = true;\n    }\n    if (!item.type) {\n      item.type = opts.type;\n    }\n    if (!item.pointShape) {\n      item.pointShape = \"circle\";\n    }\n    if (!item.legendShape) {\n      switch (item.type) {\n        case 'line':\n          item.legendShape = \"line\";\n          break;\n        case 'column':\n          item.legendShape = \"rect\";\n          break;\n        case 'area':\n          item.legendShape = \"triangle\";\n          break;\n        default:\n          item.legendShape = \"circle\";}\n\n    }\n    return item;\n  });\n}\n\nfunction getDataRange(minData, maxData) {\n  var limit = 0;\n  var range = maxData - minData;\n  if (range >= 10000) {\n    limit = 1000;\n  } else if (range >= 1000) {\n    limit = 100;\n  } else if (range >= 100) {\n    limit = 10;\n  } else if (range >= 10) {\n    limit = 5;\n  } else if (range >= 1) {\n    limit = 1;\n  } else if (range >= 0.1) {\n    limit = 0.1;\n  } else if (range >= 0.01) {\n    limit = 0.01;\n  } else if (range >= 0.001) {\n    limit = 0.001;\n  } else if (range >= 0.0001) {\n    limit = 0.0001;\n  } else if (range >= 0.00001) {\n    limit = 0.00001;\n  } else {\n    limit = 0.000001;\n  }\n  return {\n    minRange: findRange(minData, 'lower', limit),\n    maxRange: findRange(maxData, 'upper', limit) };\n\n}\n\nfunction measureText(text) {\n  var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.fontSize;\n  text = String(text);\n  var text = text.split('');\n  var width = 0;\n  for (var i = 0; i < text.length; i++) {\n    var item = text[i];\n    if (/[a-zA-Z]/.test(item)) {\n      width += 7;\n    } else if (/[0-9]/.test(item)) {\n      width += 5.5;\n    } else if (/\\./.test(item)) {\n      width += 2.7;\n    } else if (/-/.test(item)) {\n      width += 3.25;\n    } else if (/[\\u4e00-\\u9fa5]/.test(item)) {\n      width += 10;\n    } else if (/\\(|\\)/.test(item)) {\n      width += 3.73;\n    } else if (/\\s/.test(item)) {\n      width += 2.5;\n    } else if (/%/.test(item)) {\n      width += 8;\n    } else {\n      width += 10;\n    }\n  }\n  return width * fontSize / 10;\n}\n\nfunction dataCombine(series) {\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data);\n  }, []);\n}\n\nfunction dataCombineStack(series, len) {\n  var sum = new Array(len);\n  for (var j = 0; j < sum.length; j++) {\n    sum[j] = 0;\n  }\n  for (var i = 0; i < series.length; i++) {\n    for (var j = 0; j < sum.length; j++) {\n      sum[j] += series[i].data[j];\n    }\n  }\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data).concat(sum);\n  }, []);\n}\n\nfunction getTouches(touches, opts, e) {\n  var x, y;\n  if (touches.clientX) {\n    if (opts.rotate) {\n      y = opts.height - touches.clientX * opts.pixelRatio;\n      x = (touches.pageY - e.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) *\n      opts.pixelRatio;\n    } else {\n      x = touches.clientX * opts.pixelRatio;\n      y = (touches.pageY - e.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) *\n      opts.pixelRatio;\n    }\n  } else {\n    if (opts.rotate) {\n      y = opts.height - touches.x * opts.pixelRatio;\n      x = touches.y * opts.pixelRatio;\n    } else {\n      x = touches.x * opts.pixelRatio;\n      y = touches.y * opts.pixelRatio;\n    }\n  }\n  return {\n    x: x,\n    y: y };\n\n}\n\nfunction getSeriesDataItem(series, index) {\n  var data = [];\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    if (item.data[index] !== null && typeof item.data[index] !== 'undefined' && item.show) {\n      var seriesItem = {};\n      seriesItem.color = item.color;\n      seriesItem.type = item.type;\n      seriesItem.style = item.style;\n      seriesItem.pointShape = item.pointShape;\n      seriesItem.disableLegend = item.disableLegend;\n      seriesItem.name = item.name;\n      seriesItem.show = item.show;\n      seriesItem.data = item.format ? item.format(item.data[index]) : item.data[index];\n      data.push(seriesItem);\n    }\n  }\n  return data;\n}\n\nfunction getMaxTextListLength(list) {\n  var lengthList = list.map(function (item) {\n    return measureText(item);\n  });\n  return Math.max.apply(null, lengthList);\n}\n\nfunction getRadarCoordinateSeries(length) {\n  var eachAngle = 2 * Math.PI / length;\n  var CoordinateSeries = [];\n  for (var i = 0; i < length; i++) {\n    CoordinateSeries.push(eachAngle * i);\n  }\n\n  return CoordinateSeries.map(function (item) {\n    return -1 * item + Math.PI / 2;\n  });\n}\n\nfunction getToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var textList = seriesData.map(function (item) {\n    return {\n      text: option.format ? option.format(item, categories[index]) : item.name + ': ' + item.data,\n      color: item.color };\n\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  for (var _i = 0; _i < validCalPoints.length; _i++) {\n    var item = validCalPoints[_i];\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  }\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction getMixToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var textList = seriesData.map(function (item) {\n    return {\n      text: option.format ? option.format(item, categories[index]) : item.name + ': ' + item.data,\n      color: item.color,\n      disableLegend: item.disableLegend ? true : false };\n\n  });\n  textList = textList.filter(function (item) {\n    if (item.disableLegend !== true) {\n      return item;\n    }\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  for (var _i2 = 0; _i2 < validCalPoints.length; _i2++) {\n    var item = validCalPoints[_i2];\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  }\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction getCandleToolTipData(series, seriesData, calPoints, index, categories, extra) {\n  var option = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n  var upColor = extra.color.upFill;\n  var downColor = extra.color.downFill;\n  //颜色顺序为开盘，收盘，最低，最高\n  var color = [upColor, upColor, downColor, upColor];\n  var textList = [];\n  var text0 = {\n    text: categories[index],\n    color: null };\n\n  textList.push(text0);\n  seriesData.map(function (item) {\n    if (index == 0 && item.data[1] - item.data[0] < 0) {\n      color[1] = downColor;\n    } else {\n      if (item.data[0] < series[index - 1][1]) {\n        color[0] = downColor;\n      }\n      if (item.data[1] < item.data[0]) {\n        color[1] = downColor;\n      }\n      if (item.data[2] > series[index - 1][1]) {\n        color[2] = upColor;\n      }\n      if (item.data[3] < series[index - 1][1]) {\n        color[3] = downColor;\n      }\n    }\n    var text1 = {\n      text: '开盘：' + item.data[0],\n      color: color[0] };\n\n    var text2 = {\n      text: '收盘：' + item.data[1],\n      color: color[1] };\n\n    var text3 = {\n      text: '最低：' + item.data[2],\n      color: color[2] };\n\n    var text4 = {\n      text: '最高：' + item.data[3],\n      color: color[3] };\n\n    textList.push(text1, text2, text3, text4);\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  offset.x = Math.round(validCalPoints[0][0].x);\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction filterSeries(series) {\n  var tempSeries = [];\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].show == true) {\n      tempSeries.push(series[i]);\n    }\n  }\n  return tempSeries;\n}\n\nfunction findCurrentIndex(currentPoints, xAxisPoints, opts, config) {\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var currentIndex = -1;\n  var spacing = 0;\n  if ((opts.type == 'line' || opts.type == 'area') && opts.xAxis.boundaryGap == 'justify') {\n    spacing = opts.chartData.eachSpacing / 2;\n  }\n  if (isInExactChartArea(currentPoints, opts, config)) {\n    xAxisPoints.forEach(function (item, index) {\n      if (currentPoints.x + offset + spacing > item) {\n        currentIndex = index;\n      }\n    });\n  }\n  return currentIndex;\n}\n\nfunction findLegendIndex(currentPoints, legendData, opts) {\n  var currentIndex = -1;\n  if (isInExactLegendArea(currentPoints, legendData.area)) {\n    var points = legendData.points;\n    var index = -1;\n    for (var i = 0, len = points.length; i < len; i++) {\n      var item = points[i];\n      for (var j = 0; j < item.length; j++) {\n        index += 1;\n        var area = item[j]['area'];\n        if (currentPoints.x > area[0] && currentPoints.x < area[2] && currentPoints.y > area[1] && currentPoints.y < area[3]) {\n          currentIndex = index;\n          break;\n        }\n      }\n    }\n    return currentIndex;\n  }\n  return currentIndex;\n}\n\nfunction isInExactLegendArea(currentPoints, area) {\n  return currentPoints.x > area.start.x && currentPoints.x < area.end.x && currentPoints.y > area.start.y &&\n  currentPoints.y < area.end.y;\n}\n\nfunction isInExactChartArea(currentPoints, opts, config) {\n  return currentPoints.x < opts.width - opts.area[1] + 10 && currentPoints.x > opts.area[3] - 10 && currentPoints.y > opts.area[0] && currentPoints.y < opts.height - opts.area[2];\n}\n\nfunction findRadarChartCurrentIndex(currentPoints, radarData, count) {\n  var eachAngleArea = 2 * Math.PI / count;\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, radarData.center, radarData.radius)) {\n    var fixAngle = function fixAngle(angle) {\n      if (angle < 0) {\n        angle += 2 * Math.PI;\n      }\n      if (angle > 2 * Math.PI) {\n        angle -= 2 * Math.PI;\n      }\n      return angle;\n    };\n\n    var angle = Math.atan2(radarData.center.y - currentPoints.y, currentPoints.x - radarData.center.x);\n    angle = -1 * angle;\n    if (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n\n    var angleList = radarData.angleList.map(function (item) {\n      item = fixAngle(-1 * item);\n\n      return item;\n    });\n\n    angleList.forEach(function (item, index) {\n      var rangeStart = fixAngle(item - eachAngleArea / 2);\n      var rangeEnd = fixAngle(item + eachAngleArea / 2);\n      if (rangeEnd < rangeStart) {\n        rangeEnd += 2 * Math.PI;\n      }\n      if (angle >= rangeStart && angle <= rangeEnd || angle + 2 * Math.PI >= rangeStart && angle + 2 * Math.PI <=\n      rangeEnd) {\n        currentIndex = index;\n      }\n    });\n  }\n\n  return currentIndex;\n}\n\nfunction findFunnelChartCurrentIndex(currentPoints, funnelData) {\n  var currentIndex = -1;\n  for (var i = 0, len = funnelData.series.length; i < len; i++) {\n    var item = funnelData.series[i];\n    if (currentPoints.x > item.funnelArea[0] && currentPoints.x < item.funnelArea[2] && currentPoints.y > item.funnelArea[1] && currentPoints.y < item.funnelArea[3]) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findPieChartCurrentIndex(currentPoints, pieData) {\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\n    angle = -angle;\n    for (var i = 0, len = pieData.series.length; i < len; i++) {\n      var item = pieData.series[i];\n      if (isInAngleRange(angle, item._start_, item._start_ + item._proportion_ * 2 * Math.PI)) {\n        currentIndex = i;\n        break;\n      }\n    }\n  }\n\n  return currentIndex;\n}\n\nfunction isInExactPieChartArea(currentPoints, center, radius) {\n  return Math.pow(currentPoints.x - center.x, 2) + Math.pow(currentPoints.y - center.y, 2) <= Math.pow(radius, 2);\n}\n\nfunction splitPoints(points) {\n  var newPoints = [];\n  var items = [];\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      items.push(item);\n    } else {\n      if (items.length) {\n        newPoints.push(items);\n      }\n      items = [];\n    }\n  });\n  if (items.length) {\n    newPoints.push(items);\n  }\n\n  return newPoints;\n}\n\nfunction calLegendData(series, opts, config, chartData) {\n  var legendData = {\n    area: {\n      start: {\n        x: 0,\n        y: 0 },\n\n      end: {\n        x: 0,\n        y: 0 },\n\n      width: 0,\n      height: 0,\n      wholeWidth: 0,\n      wholeHeight: 0 },\n\n    points: [],\n    widthArr: [],\n    heightArr: [] };\n\n  if (opts.legend.show === false) {\n    chartData.legendData = legendData;\n    return legendData;\n  }\n\n  var padding = opts.legend.padding;\n  var margin = opts.legend.margin;\n  var fontSize = opts.legend.fontSize;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var shapeRight = 5 * opts.pixelRatio;\n  var lineHeight = Math.max(opts.legend.lineHeight * opts.pixelRatio, fontSize);\n  if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n    var legendList = [];\n    var widthCount = 0;\n    var widthCountArr = [];\n    var currentRow = [];\n    for (var i = 0; i < series.length; i++) {\n      var item = series[i];\n      var itemWidth = shapeWidth + shapeRight + measureText(item.name || 'undefined', fontSize) + opts.legend.itemGap;\n      if (widthCount + itemWidth > opts.width - opts.padding[1] - opts.padding[3]) {\n        legendList.push(currentRow);\n        widthCountArr.push(widthCount - opts.legend.itemGap);\n        widthCount = itemWidth;\n        currentRow = [item];\n      } else {\n        widthCount += itemWidth;\n        currentRow.push(item);\n      }\n    }\n    if (currentRow.length) {\n      legendList.push(currentRow);\n      widthCountArr.push(widthCount - opts.legend.itemGap);\n      legendData.widthArr = widthCountArr;\n      var legendWidth = Math.max.apply(null, widthCountArr);\n      switch (opts.legend.float) {\n        case 'left':\n          legendData.area.start.x = opts.padding[3];\n          legendData.area.end.x = opts.padding[3] + 2 * padding;\n          break;\n        case 'right':\n          legendData.area.start.x = opts.width - opts.padding[1] - legendWidth - 2 * padding;\n          legendData.area.end.x = opts.width - opts.padding[1];\n          break;\n        default:\n          legendData.area.start.x = (opts.width - legendWidth) / 2 - padding;\n          legendData.area.end.x = (opts.width + legendWidth) / 2 + padding;}\n\n      legendData.area.width = legendWidth + 2 * padding;\n      legendData.area.wholeWidth = legendWidth + 2 * padding;\n      legendData.area.height = legendList.length * lineHeight + 2 * padding;\n      legendData.area.wholeHeight = legendList.length * lineHeight + 2 * padding + 2 * margin;\n      legendData.points = legendList;\n    }\n  } else {\n    var len = series.length;\n    var maxHeight = opts.height - opts.padding[0] - opts.padding[2] - 2 * margin - 2 * padding;\n    var maxLength = Math.min(Math.floor(maxHeight / lineHeight), len);\n    legendData.area.height = maxLength * lineHeight + padding * 2;\n    legendData.area.wholeHeight = maxLength * lineHeight + padding * 2;\n    switch (opts.legend.float) {\n      case 'top':\n        legendData.area.start.y = opts.padding[0] + margin;\n        legendData.area.end.y = opts.padding[0] + margin + legendData.area.height;\n        break;\n      case 'bottom':\n        legendData.area.start.y = opts.height - opts.padding[2] - margin - legendData.area.height;\n        legendData.area.end.y = opts.height - opts.padding[2] - margin;\n        break;\n      default:\n        legendData.area.start.y = (opts.height - legendData.area.height) / 2;\n        legendData.area.end.y = (opts.height + legendData.area.height) / 2;}\n\n    var lineNum = len % maxLength === 0 ? len / maxLength : Math.floor(len / maxLength + 1);\n    var _currentRow = [];\n    for (var _i3 = 0; _i3 < lineNum; _i3++) {\n      var temp = series.slice(_i3 * maxLength, _i3 * maxLength + maxLength);\n      _currentRow.push(temp);\n    }\n\n    legendData.points = _currentRow;\n\n    if (_currentRow.length) {\n      for (var _i4 = 0; _i4 < _currentRow.length; _i4++) {\n        var _item = _currentRow[_i4];\n        var maxWidth = 0;\n        for (var j = 0; j < _item.length; j++) {\n          var _itemWidth = shapeWidth + shapeRight + measureText(_item[j].name || 'undefined', fontSize) + opts.legend.itemGap;\n          if (_itemWidth > maxWidth) {\n            maxWidth = _itemWidth;\n          }\n        }\n        legendData.widthArr.push(maxWidth);\n        legendData.heightArr.push(_item.length * lineHeight + padding * 2);\n      }\n      var _legendWidth = 0;\n      for (var _i5 = 0; _i5 < legendData.widthArr.length; _i5++) {\n        _legendWidth += legendData.widthArr[_i5];\n      }\n      legendData.area.width = _legendWidth - opts.legend.itemGap + 2 * padding;\n      legendData.area.wholeWidth = legendData.area.width + padding;\n    }\n  }\n\n  switch (opts.legend.position) {\n    case 'top':\n      legendData.area.start.y = opts.padding[0] + margin;\n      legendData.area.end.y = opts.padding[0] + margin + legendData.area.height;\n      break;\n    case 'bottom':\n      legendData.area.start.y = opts.height - opts.padding[2] - legendData.area.height - margin;\n      legendData.area.end.y = opts.height - opts.padding[2] - margin;\n      break;\n    case 'left':\n      legendData.area.start.x = opts.padding[3];\n      legendData.area.end.x = opts.padding[3] + legendData.area.width;\n      break;\n    case 'right':\n      legendData.area.start.x = opts.width - opts.padding[1] - legendData.area.width;\n      legendData.area.end.x = opts.width - opts.padding[1];\n      break;}\n\n  chartData.legendData = legendData;\n  return legendData;\n}\n\nfunction calCategoriesData(categories, opts, config, eachSpacing) {\n  var result = {\n    angle: 0,\n    xAxisHeight: config.xAxisHeight };\n\n  var categoriesTextLenth = categories.map(function (item) {\n    return measureText(item);\n  });\n  var maxTextLength = Math.max.apply(this, categoriesTextLenth);\n\n  if (opts.xAxis.rotateLabel == true && maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\n    result.angle = 45 * Math.PI / 180;\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\n  }\n  return result;\n}\n\nfunction getRadarDataPoints(angleList, center, radius, series, opts) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n\n  var radarOption = opts.extra.radar || {};\n  radarOption.max = radarOption.max || 0;\n  var maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\n\n  var data = [];var _loop2 = function _loop2(\n  i) {\n    var each = series[i];\n    var listItem = {};\n    listItem.color = each.color;\n    listItem.data = [];\n    each.data.forEach(function (item, index) {\n      var tmp = {};\n      tmp.angle = angleList[index];\n\n      tmp.proportion = item / maxData;\n      tmp.position = convertCoordinateOrigin(radius * tmp.proportion * process * Math.cos(tmp.angle), radius * tmp.proportion *\n      process * Math.sin(tmp.angle), center);\n      listItem.data.push(tmp);\n    });\n\n    data.push(listItem);};for (var i = 0; i < series.length; i++) {_loop2(i);\n  }\n\n  return data;\n}\n\nfunction getPieDataPoints(series, radius) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  var count = 0;\n  var _start_ = 0;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n  }\n  for (var _i6 = 0; _i6 < series.length; _i6++) {\n    var _item2 = series[_i6];\n    _item2.data = _item2.data === null ? 0 : _item2.data;\n    if (count === 0) {\n      _item2._proportion_ = 1 / series.length * process;\n    } else {\n      _item2._proportion_ = _item2.data / count * process;\n    }\n    _item2._radius_ = radius;\n  }\n  for (var _i7 = 0; _i7 < series.length; _i7++) {\n    var _item3 = series[_i7];\n    _item3._start_ = _start_;\n    _start_ += 2 * _item3._proportion_ * Math.PI;\n  }\n\n  return series;\n}\n\nfunction getFunnelDataPoints(series, radius) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  series = series.sort(function (a, b) {return parseInt(b.data) - parseInt(a.data);});\n  for (var i = 0; i < series.length; i++) {\n    series[i].radius = series[i].data / series[0].data * radius * process;\n    series[i]._proportion_ = series[i].data / series[0].data;\n  }\n  return series.reverse();\n}\n\nfunction getRoseDataPoints(series, type, minRadius, radius) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var count = 0;\n  var _start_ = 0;\n\n  var dataArr = [];\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n    dataArr.push(item.data);\n  }\n  var minData = dataArr.pop();\n  var maxData = dataArr.shift();\n  var radiusLength = radius - minRadius;\n\n  for (var _i8 = 0; _i8 < series.length; _i8++) {\n    var _item4 = series[_i8];\n    _item4.data = _item4.data === null ? 0 : _item4.data;\n    if (count === 0 || type == 'area') {\n      _item4._proportion_ = 1 / series.length * process;\n    } else {\n      _item4._proportion_ = _item4.data / count * process;\n    }\n    _item4._radius_ = minRadius + radiusLength * ((_item4.data - minData) / (maxData - minData));\n  }\n  for (var _i9 = 0; _i9 < series.length; _i9++) {\n    var _item5 = series[_i9];\n    _item5._start_ = _start_;\n    _start_ += 2 * _item5._proportion_ * Math.PI;\n  }\n\n  return series;\n}\n\nfunction getArcbarDataPoints(series, arcbarOption) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (process == 1) {\n    process = 0.999999;\n  }\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    var totalAngle = void 0;\n    if (arcbarOption.type == 'default') {\n      if (arcbarOption.endAngle < arcbarOption.startAngle) {\n        totalAngle = 2 + arcbarOption.endAngle - arcbarOption.startAngle;\n      } else {\n        totalAngle = arcbarOption.startAngle - arcbarOption.endAngle;\n      }\n    } else {\n      totalAngle = 2;\n    }\n    item._proportion_ = totalAngle * item.data * process + arcbarOption.startAngle;\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  }\n  return series;\n}\n\nfunction getGaugeAxisPoints(categories, startAngle, endAngle) {\n  var totalAngle = startAngle - endAngle + 1;\n  var tempStartAngle = startAngle;\n  for (var i = 0; i < categories.length; i++) {\n    categories[i].value = categories[i].value === null ? 0 : categories[i].value;\n    categories[i]._startAngle_ = tempStartAngle;\n    categories[i]._endAngle_ = totalAngle * categories[i].value + startAngle;\n    if (categories[i]._endAngle_ >= 2) {\n      categories[i]._endAngle_ = categories[i]._endAngle_ % 2;\n    }\n    tempStartAngle = categories[i]._endAngle_;\n  }\n  return categories;\n}\n\nfunction getGaugeDataPoints(series, categories, gaugeOption) {\n  var process = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    if (gaugeOption.pointer.color == 'auto') {\n      for (var _i10 = 0; _i10 < categories.length; _i10++) {\n        if (item.data <= categories[_i10].value) {\n          item.color = categories[_i10].color;\n          break;\n        }\n      }\n    } else {\n      item.color = gaugeOption.pointer.color;\n    }\n    var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n    item._endAngle_ = totalAngle * item.data + gaugeOption.startAngle;\n    item._oldAngle_ = gaugeOption.oldAngle;\n    if (gaugeOption.oldAngle < gaugeOption.endAngle) {\n      item._oldAngle_ += 2;\n    }\n    if (item.data >= gaugeOption.oldData) {\n      item._proportion_ = (item._endAngle_ - item._oldAngle_) * process + gaugeOption.oldAngle;\n    } else {\n      item._proportion_ = item._oldAngle_ - (item._oldAngle_ - item._endAngle_) * process;\n    }\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  }\n  return series;\n}\n\nfunction getPieTextMaxLength(series) {\n  series = getPieDataPoints(series);\n  var maxLength = 0;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    maxLength = Math.max(maxLength, measureText(text));\n  }\n\n  return maxLength;\n}\n\nfunction fixColumeData(points, eachSpacing, columnLen, index, config, opts) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / columnLen);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n    if (item.width <= 0) {\n      item.width = 1;\n    }\n    item.x += (index + 0.5 - columnLen / 2) * item.width;\n    return item;\n  });\n}\n\nfunction fixColumeMeterData(points, eachSpacing, columnLen, index, config, opts, border) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / 2);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n\n    if (index > 0) {\n      item.width -= 2 * border;\n    }\n    return item;\n  });\n}\n\nfunction fixColumeStackData(points, eachSpacing, columnLen, index, config, opts, series) {\n\n  return points.map(function (item, indexn) {\n\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / 2);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n    return item;\n  });\n}\n\nfunction getXAxisPoints(categories, opts, config) {\n  var yAxisTotalWidth = config.yAxisWidth + config.yAxisTitleWidth;\n  var spacingValid = opts.width - opts.area[1] - opts.area[3];\n  var dataCount = opts.enableScroll ? Math.min(opts.xAxis.itemCount, categories.length) : categories.length;\n  if ((opts.type == 'line' || opts.type == 'area') && dataCount > 1 && opts.xAxis.boundaryGap == 'justify') {\n    dataCount -= 1;\n  }\n  var eachSpacing = spacingValid / dataCount;\n\n  var xAxisPoints = [];\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  categories.forEach(function (item, index) {\n    xAxisPoints.push(startX + index * eachSpacing);\n  });\n  if (opts.xAxis.boundaryGap !== 'justify') {\n    if (opts.enableScroll === true) {\n      xAxisPoints.push(startX + categories.length * eachSpacing);\n    } else {\n      xAxisPoints.push(endX);\n    }\n  }\n  return {\n    xAxisPoints: xAxisPoints,\n    startX: startX,\n    endX: endX,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var cPoints = [];\n      item.forEach(function (items, indexs) {\n        var point = {};\n        point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n        var value = items.value || items;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        height *= process;\n        point.y = opts.height - Math.round(height) - opts.area[2];\n        cPoints.push(point);\n      });\n      points.push(cPoints);\n    }\n  });\n\n  return points;\n}\n\nfunction getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var boundaryGap = 'center';\n  if (opts.type == 'line' || opts.type == 'area') {\n    boundaryGap = opts.xAxis.boundaryGap;\n  }\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index];\n      if (boundaryGap == 'center') {\n        point.x += Math.round(eachSpacing / 2);\n      }\n      var value = item;\n      if (typeof item === 'object' && item !== null) {\n        value = item.value;\n      }\n      var height = validHeight * (value - minRange) / (maxRange - minRange);\n      height *= process;\n      point.y = opts.height - Math.round(height) - opts.area[2];\n      points.push(point);\n    }\n  });\n\n  return points;\n}\n\nfunction getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, stackSeries) {\n  var process = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n\n      if (seriesIndex > 0) {\n        var value = 0;\n        for (var i = 0; i <= seriesIndex; i++) {\n          value += stackSeries[i].data[index];\n        }\n        var value0 = value - item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = validHeight * (value0 - minRange) / (maxRange - minRange);\n      } else {\n        var value = item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = 0;\n      }\n      var heightc = height0;\n      height *= process;\n      heightc *= process;\n      point.y = opts.height - Math.round(height) - opts.area[2];\n      point.y0 = opts.height - Math.round(heightc) - opts.area[2];\n      points.push(point);\n    }\n  });\n\n  return points;\n}\n\nfunction getYAxisTextList(series, opts, config, stack) {\n  var data;\n  if (stack == 'stack') {\n    data = dataCombineStack(series, opts.categories.length);\n  } else {\n    data = dataCombine(series);\n  }\n  var sorted = [];\n  // remove null from data\n  data = data.filter(function (item) {\n    //return item !== null;\n    if (typeof item === 'object' && item !== null) {\n      if (item.constructor == Array) {\n        return item !== null;\n      } else {\n        return item.value !== null;\n      }\n    } else {\n      return item !== null;\n    }\n  });\n  data.map(function (item) {\n    if (typeof item === 'object') {\n      if (item.constructor == Array) {\n        item.map(function (subitem) {\n          sorted.push(subitem);\n        });\n      } else {\n        sorted.push(item.value);\n      }\n    } else {\n      sorted.push(item);\n    }\n  });\n  var minData = 0;\n  var maxData = 0;\n  if (sorted.length > 0) {\n    minData = Math.min.apply(this, sorted);\n    maxData = Math.max.apply(this, sorted);\n  }\n  if (typeof opts.yAxis.min === 'number') {\n    minData = Math.min(opts.yAxis.min, minData);\n  }\n  if (typeof opts.yAxis.max === 'number') {\n    maxData = Math.max(opts.yAxis.max, maxData);\n  }\n\n  if (minData === maxData) {\n    var rangeSpan = maxData || 10;\n    maxData += rangeSpan;\n  }\n\n  var dataRange = getDataRange(minData, maxData);\n  var minRange = dataRange.minRange;\n  var maxRange = dataRange.maxRange;\n\n  var range = [];\n  var eachRange = (maxRange - minRange) / config.yAxisSplit;\n\n  for (var i = 0; i <= config.yAxisSplit; i++) {\n    range.push(minRange + eachRange * i);\n  }\n  return range.reverse();\n}\n\nfunction calYAxisData(series, opts, config) {\n  //堆叠图重算Y轴\n  var columnstyle = assign({}, {\n    type: \"\" },\n  opts.extra.column);\n  var ranges = getYAxisTextList(series, opts, config, columnstyle.type);\n  var yAxisWidth = config.yAxisWidth;\n  var yAxisFontSize = opts.yAxis.fontSize || config.fontSize;\n  var rangesFormat = ranges.map(function (item) {\n    item = util.toFixed(item, 6);\n    item = opts.yAxis.format ? opts.yAxis.format(Number(item)) : item;\n    yAxisWidth = Math.max(yAxisWidth, measureText(item, yAxisFontSize) + 5);\n    return item;\n  });\n  if (opts.yAxis.disabled === true) {\n    yAxisWidth = 0;\n  }\n\n  return {\n    rangesFormat: rangesFormat,\n    ranges: ranges,\n    yAxisWidth: yAxisWidth };\n\n}\n\nfunction calTooltipYAxisData(point, series, opts, config, eachSpacing) {\n  var ranges = getYAxisTextList(series, opts, config);\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var maxVal = ranges[0];\n  var minVal = ranges[ranges.length - 1];\n  var minAxis = opts.padding[3];\n  var maxAxis = opts.padding[1] + spacingValid;\n  var item = maxVal - (maxVal - minVal) * (point - minAxis) / (maxAxis - minAxis);\n  item = opts.yAxis.format ? opts.yAxis.format(Number(item)) : item;\n  return item;\n}\n\nfunction calMarkLineData(minRange, maxRange, points, opts) {\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  for (var i = 0; i < points.length; i++) {\n    var height = spacingValid * (points[i].value - minRange) / (maxRange - minRange);\n    points[i].y = opts.height - Math.round(height) - opts.area[2];\n  }\n  return points;\n}\n\nfunction contextRotate(context, opts) {\n  if (opts.rotateLock !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n  } else if (opts._rotate_ !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n    opts._rotate_ = true;\n  }\n}\n\nfunction drawPointShape(points, color, shape, context, opts) {\n  context.beginPath();\n  context.setStrokeStyle(\"#ffffff\");\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setFillStyle(color);\n  if (shape === 'diamond') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y);\n        context.lineTo(item.x, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  } else if (shape === 'circle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x + 3.5 * opts.pixelRatio, item.y);\n        context.arc(item.x, item.y, 4 * opts.pixelRatio, 0, 2 * Math.PI, false);\n      }\n    });\n  } else if (shape === 'rect') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x - 3.5, item.y - 3.5);\n        context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\n      }\n    });\n  } else if (shape === 'triangle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y + 4.5);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  }\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n\nfunction drawRingTitle(opts, config, context, center) {\n  var titlefontSize = opts.title.fontSize || config.titleFontSize;\n  var subtitlefontSize = opts.subtitle.fontSize || config.subtitleFontSize;\n  var title = opts.title.name || '';\n  var subtitle = opts.subtitle.name || '';\n  var titleFontColor = opts.title.color || config.titleColor;\n  var subtitleFontColor = opts.subtitle.color || config.subtitleColor;\n  var titleHeight = title ? titlefontSize : 0;\n  var subtitleHeight = subtitle ? subtitlefontSize : 0;\n  var margin = 5;\n\n  if (subtitle) {\n    var textWidth = measureText(subtitle, subtitlefontSize);\n    var startX = center.x - textWidth / 2 + (opts.subtitle.offsetX || 0);\n    var startY = center.y + subtitlefontSize / 2 + (opts.subtitle.offsetY || 0);\n    if (title) {\n      startY += (titleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(subtitlefontSize);\n    context.setFillStyle(subtitleFontColor);\n    context.fillText(subtitle, startX, startY);\n    context.closePath();\n    context.stroke();\n  }\n  if (title) {\n    var _textWidth = measureText(title, titlefontSize);\n    var _startX = center.x - _textWidth / 2 + (opts.title.offsetX || 0);\n    var _startY = center.y + titlefontSize / 2 + (opts.title.offsetY || 0);\n    if (subtitle) {\n      _startY -= (subtitleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(titlefontSize);\n    context.setFillStyle(titleFontColor);\n    context.fillText(title, _startX, _startY);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawPointText(points, series, config, context) {\n  // 绘制数据文案\n  var data = series.data;\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      //var formatVal = series.format ? series.format(data[index]) : data[index];\n      context.beginPath();\n      context.setFontSize(series.textSize || config.fontSize);\n      context.setFillStyle(series.textColor || '#666666');\n      var value = data[index];\n      if (typeof data[index] === 'object' && data[index] !== null) {\n        value = data[index].value;\n      }\n      var formatVal = series.format ? series.format(value) : value;\n      context.fillText(String(formatVal), item.x - measureText(formatVal, series.textSize || config.fontSize) / 2, item.y -\n      2);\n      context.closePath();\n      context.stroke();\n    }\n  });\n\n}\n\nfunction drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context) {\n  radius -= gaugeOption.width / 2 + config.gaugeLabelTextMargin;\n\n  var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n  var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n  var totalNumber = gaugeOption.endNumber - gaugeOption.startNumber;\n  var splitNumber = totalNumber / gaugeOption.splitLine.splitNumber;\n  var nowAngle = gaugeOption.startAngle;\n  var nowNumber = gaugeOption.startNumber;\n  for (var i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\n    var pos = {\n      x: radius * Math.cos(nowAngle * Math.PI),\n      y: radius * Math.sin(nowAngle * Math.PI) };\n\n    var labelText = gaugeOption.labelFormat ? gaugeOption.labelFormat(nowNumber) : nowNumber;\n    pos.x += centerPosition.x - measureText(labelText) / 2;\n    pos.y += centerPosition.y;\n    var startX = pos.x;\n    var startY = pos.y;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(gaugeOption.labelColor || '#666666');\n    context.fillText(labelText, startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n\n    nowAngle += splitAngle;\n    if (nowAngle >= 2) {\n      nowAngle = nowAngle % 2;\n    }\n    nowNumber += splitNumber;\n  }\n\n}\n\nfunction drawRadarLabel(angleList, radius, centerPosition, opts, config, context) {\n  var radarOption = opts.extra.radar || {};\n  radius += config.radarLabelTextMargin;\n\n  angleList.forEach(function (angle, index) {\n    var pos = {\n      x: radius * Math.cos(angle),\n      y: radius * Math.sin(angle) };\n\n    var posRelativeCanvas = convertCoordinateOrigin(pos.x, pos.y, centerPosition);\n    var startX = posRelativeCanvas.x;\n    var startY = posRelativeCanvas.y;\n    if (util.approximatelyEqual(pos.x, 0)) {\n      startX -= measureText(opts.categories[index] || '') / 2;\n    } else if (pos.x < 0) {\n      startX -= measureText(opts.categories[index] || '');\n    }\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(radarOption.labelColor || '#666666');\n    context.fillText(opts.categories[index] || '', startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n  });\n\n}\n\nfunction drawPieText(series, opts, config, context, radius, center) {\n  var lineRadius = config.pieChartLinePadding;\n  var textObjectCollection = [];\n  var lastTextObject = null;\n\n  var seriesConvert = series.map(function (item) {\n    var arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._proportion_ / 2);\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    var color = item.color;\n    var radius = item._radius_;\n    return {\n      arc: arc,\n      text: text,\n      color: color,\n      radius: radius,\n      textColor: item.textColor,\n      textSize: item.textSize };\n\n  });\n  for (var i = 0; i < seriesConvert.length; i++) {\n    var item = seriesConvert[i];\n    // line end\n    var orginX1 = Math.cos(item.arc) * (item.radius + lineRadius);\n    var orginY1 = Math.sin(item.arc) * (item.radius + lineRadius);\n\n    // line start\n    var orginX2 = Math.cos(item.arc) * item.radius;\n    var orginY2 = Math.sin(item.arc) * item.radius;\n\n    // text start\n    var orginX3 = orginX1 >= 0 ? orginX1 + config.pieChartTextPadding : orginX1 - config.pieChartTextPadding;\n    var orginY3 = orginY1;\n    var textWidth = measureText(item.text);\n    var startY = orginY3;\n\n    if (lastTextObject && util.isSameXCoordinateArea(lastTextObject.start, {\n      x: orginX3 }))\n    {\n      if (orginX3 > 0) {\n        startY = Math.min(orginY3, lastTextObject.start.y);\n      } else if (orginX1 < 0) {\n        startY = Math.max(orginY3, lastTextObject.start.y);\n      } else {\n        if (orginY3 > 0) {\n          startY = Math.max(orginY3, lastTextObject.start.y);\n        } else {\n          startY = Math.min(orginY3, lastTextObject.start.y);\n        }\n      }\n    }\n    if (orginX3 < 0) {\n      orginX3 -= textWidth;\n    }\n\n    var textObject = {\n      lineStart: {\n        x: orginX2,\n        y: orginY2 },\n\n      lineEnd: {\n        x: orginX1,\n        y: orginY1 },\n\n      start: {\n        x: orginX3,\n        y: startY },\n\n      width: textWidth,\n      height: config.fontSize,\n      text: item.text,\n      color: item.color,\n      textColor: item.textColor,\n      textSize: item.textSize };\n\n    lastTextObject = avoidCollision(textObject, lastTextObject);\n    textObjectCollection.push(lastTextObject);\n  }\n\n  for (var _i11 = 0; _i11 < textObjectCollection.length; _i11++) {\n    var _item6 = textObjectCollection[_i11];\n    var lineStartPoistion = convertCoordinateOrigin(_item6.lineStart.x, _item6.lineStart.y, center);\n    var lineEndPoistion = convertCoordinateOrigin(_item6.lineEnd.x, _item6.lineEnd.y, center);\n    var textPosition = convertCoordinateOrigin(_item6.start.x, _item6.start.y, center);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setFontSize(config.fontSize);\n    context.beginPath();\n    context.setStrokeStyle(_item6.color);\n    context.setFillStyle(_item6.color);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    var curveStartX = _item6.start.x < 0 ? textPosition.x + _item6.width : textPosition.x;\n    var textStartX = _item6.start.x < 0 ? textPosition.x - 5 : textPosition.x + 5;\n    context.quadraticCurveTo(lineEndPoistion.x, lineEndPoistion.y, curveStartX, textPosition.y);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.moveTo(textPosition.x + _item6.width, textPosition.y);\n    context.arc(curveStartX, textPosition.y, 2, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n    context.beginPath();\n    context.setFontSize(_item6.textSize || config.fontSize);\n    context.setFillStyle(_item6.textColor || '#666666');\n    context.fillText(_item6.text, textStartX, textPosition.y + 3);\n    context.closePath();\n    context.stroke();\n    context.closePath();\n  }\n}\n\nfunction drawToolTipSplitLine(offsetX, opts, config, context) {\n  var toolTipOption = opts.extra.tooltip || {};\n  toolTipOption.gridType = toolTipOption.gridType == undefined ? 'solid' : toolTipOption.gridType;\n  toolTipOption.dashLength = toolTipOption.dashLength == undefined ? 4 : toolTipOption.dashLength;\n  var startY = opts.area[0];\n  var endY = opts.height - opts.area[2];\n\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.beginPath();\n  context.moveTo(offsetX, startY);\n  context.lineTo(offsetX, endY);\n  context.stroke();\n  context.setLineDash([]);\n\n  if (toolTipOption.xAxisLabel) {\n    var labelText = opts.categories[opts.tooltip.index];\n    context.setFontSize(config.fontSize);\n    var textWidth = measureText(labelText, config.fontSize);\n\n    var textX = offsetX - 0.5 * textWidth;\n    var textY = endY;\n    context.beginPath();\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.rect(textX - config.toolTipPadding, textY, textWidth + 2 * config.toolTipPadding, config.fontSize + 2 * config.toolTipPadding);\n    context.closePath();\n    context.stroke();\n    context.fill();\n\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n    context.fillText(String(labelText), textX, textY + config.toolTipPadding + config.fontSize);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawMarkLine(minRange, maxRange, opts, config, context) {\n  var markLineOption = assign({}, {\n    type: 'solid',\n    dashLength: 4,\n    data: [] },\n  opts.extra.markLine);\n  var startX = opts.area[3];\n  var endX = opts.width - opts.padding[1];\n  var points = calMarkLineData(minRange, maxRange, markLineOption.data, opts);\n\n  for (var i = 0; i < points.length; i++) {\n    var item = assign({}, {\n      lineColor: '#DE4A42',\n      showLabel: false,\n      labelFontColor: '#666666',\n      labelBgColor: '#DFE8FF',\n      labelBgOpacity: 0.8,\n      yAxisIndex: 0 },\n    points[i]);\n\n    if (markLineOption.type == 'dash') {\n      context.setLineDash([markLineOption.dashLength, markLineOption.dashLength]);\n    }\n    context.setStrokeStyle(item.lineColor);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.beginPath();\n    context.moveTo(startX, item.y);\n    context.lineTo(endX, item.y);\n    context.stroke();\n    context.setLineDash([]);\n    if (item.showLabel) {\n      var labelText = opts.yAxis.format ? opts.yAxis.format(Number(item.value)) : item.value;\n      context.setFontSize(config.fontSize);\n      var textWidth = measureText(labelText, config.fontSize);\n      var bgStartX = opts.padding[3] + config.yAxisTitleWidth - config.toolTipPadding;\n      var bgEndX = Math.max(opts.area[3], textWidth + config.toolTipPadding * 2);\n      var bgWidth = bgEndX - bgStartX;\n\n      var textX = bgStartX + (bgWidth - textWidth) / 2;\n      var textY = item.y;\n      context.setFillStyle(hexToRgb(item.labelBgColor, item.labelBgOpacity));\n      context.setStrokeStyle(item.labelBgColor);\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.beginPath();\n      context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 * config.toolTipPadding);\n      context.closePath();\n      context.stroke();\n      context.fill();\n\n      context.beginPath();\n      context.setFontSize(config.fontSize);\n      context.setFillStyle(item.labelFontColor);\n      context.fillText(String(labelText), textX, textY + 0.5 * config.fontSize);\n      context.stroke();\n    }\n  }\n}\n\nfunction drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = assign({}, {\n    gridType: 'solid',\n    dashLength: 4 },\n  opts.extra.tooltip);\n\n  var startX = opts.area[3];\n  var endX = opts.width - opts.padding[1];\n\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.beginPath();\n  context.moveTo(startX, opts.tooltip.offset.y);\n  context.lineTo(endX, opts.tooltip.offset.y);\n  context.stroke();\n  context.setLineDash([]);\n\n  if (toolTipOption.yAxisLabel) {\n    var labelText = calTooltipYAxisData(opts.tooltip.offset.y, opts.series, opts, config, eachSpacing);\n    context.setFontSize(config.fontSize);\n    var textWidth = measureText(labelText, config.fontSize);\n    var bgStartX = opts.padding[3] + config.yAxisTitleWidth - config.toolTipPadding;\n    var bgEndX = Math.max(opts.area[3], textWidth + config.toolTipPadding * 2);\n    var bgWidth = bgEndX - bgStartX;\n\n    var textX = bgStartX + (bgWidth - textWidth) / 2;\n    var textY = opts.tooltip.offset.y;\n    context.beginPath();\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 * config.toolTipPadding);\n    context.closePath();\n    context.stroke();\n    context.fill();\n\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n    context.fillText(labelText, textX, textY + 0.5 * config.fontSize);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawToolTipSplitArea(offsetX, opts, config, context, eachSpacing) {\n  var toolTipOption = assign({}, {\n    activeBgColor: '#000000',\n    activeBgOpacity: 0.08 },\n  opts.extra.tooltip);\n  var startY = opts.area[0];\n  var endY = opts.height - opts.area[2];\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.activeBgColor, toolTipOption.activeBgOpacity));\n  context.rect(offsetX - eachSpacing / 2, startY, eachSpacing, endY - startY);\n  context.closePath();\n  context.fill();\n}\n\nfunction drawToolTip(textList, offset, opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = assign({}, {\n    bgColor: '#000000',\n    bgOpacity: 0.7,\n    fontColor: '#FFFFFF' },\n  opts.extra.tooltip);\n  var legendWidth = 4 * opts.pixelRatio;\n  var legendMarginRight = 5 * opts.pixelRatio;\n  var arrowWidth = 8 * opts.pixelRatio;\n  var isOverRightBorder = false;\n  if (opts.type == 'line' || opts.type == 'area' || opts.type == 'candle' || opts.type == 'mix') {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n\n  offset = assign({\n    x: 0,\n    y: 0 },\n  offset);\n  offset.y -= 8 * opts.pixelRatio;\n  var textWidth = textList.map(function (item) {\n    return measureText(item.text, config.fontSize);\n  });\n  var toolTipWidth = legendWidth + legendMarginRight + 4 * config.toolTipPadding + Math.max.apply(null, textWidth);\n  var toolTipHeight = 2 * config.toolTipPadding + textList.length * config.toolTipLineHeight;\n\n  // if beyond the right border\n  if (offset.x - Math.abs(opts._scrollDistance_) + arrowWidth + toolTipWidth > opts.width) {\n    isOverRightBorder = true;\n  }\n  if (toolTipHeight + offset.y > opts.height) {\n    offset.y = opts.height - toolTipHeight;\n  }\n  // draw background rect\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.bgColor || config.toolTipBackground, toolTipOption.bgOpacity || config.toolTipOpacity));\n  if (isOverRightBorder) {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  } else {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  }\n\n  context.closePath();\n  context.fill();\n\n  // draw legend\n  textList.forEach(function (item, index) {\n    if (item.color !== null) {\n      context.beginPath();\n      context.setFillStyle(item.color);\n      var startX = offset.x + arrowWidth + 2 * config.toolTipPadding;\n      var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index +\n      config.toolTipPadding + 1;\n      if (isOverRightBorder) {\n        startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding;\n      }\n      context.fillRect(startX, startY, legendWidth, config.fontSize);\n      context.closePath();\n    }\n  });\n\n  // draw text list\n\n  textList.forEach(function (item, index) {\n    var startX = offset.x + arrowWidth + 2 * config.toolTipPadding + legendWidth + legendMarginRight;\n    if (isOverRightBorder) {\n      startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding + +legendWidth + legendMarginRight;\n    }\n    var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index +\n    config.toolTipPadding;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.fontColor);\n    context.fillText(item.text, startX, startY + config.fontSize);\n    context.closePath();\n    context.stroke();\n  });\n}\n\nfunction drawYAxisTitle(title, opts, config, context) {\n  var startX = config.xAxisHeight + (opts.height - config.xAxisHeight - measureText(title)) / 2;\n  context.save();\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle(opts.yAxis.titleFontColor || '#333333');\n  context.translate(0, opts.height);\n  context.rotate(-90 * Math.PI / 180);\n  context.fillText(title, startX, opts.padding[3] + 0.5 * config.fontSize);\n  context.closePath();\n  context.stroke();\n  context.restore();\n}\n\nfunction drawColumnDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n  var columnOption = assign({}, {\n    type: 'group',\n    width: eachSpacing / 2,\n    meter: {\n      border: 4,\n      fillColor: '#FFFFFF' } },\n\n  opts.extra.column);\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitArea(opts.tooltip.offset.x, opts, config, context, eachSpacing);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    switch (columnOption.type) {\n      case 'group':\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        var tooltipPoints = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n        calPoints.push(tooltipPoints);\n        points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n        points.forEach(function (item, index) {\n          if (item !== null) {\n            context.beginPath();\n            context.setFillStyle(item.color || eachSeries.color);\n            var startX = item.x - item.width / 2 + 1;\n            var height = opts.height - item.y - opts.area[2];\n            context.moveTo(startX, item.y);\n            context.fillRect(startX, item.y, item.width - 2, height);\n            context.closePath();\n            context.fill();\n          }\n        });\n        break;\n      case 'stack':\n        // 绘制堆叠数据图\n        var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config,\n        seriesIndex,\n        series, process);\n        calPoints.push(points);\n        points = fixColumeStackData(points, eachSpacing, series.length, seriesIndex, config, opts, series);\n\n        points.forEach(function (item, index) {\n          if (item !== null) {\n            context.beginPath();\n            context.setFillStyle(item.color || eachSeries.color);\n            var startX = item.x - item.width / 2 + 1;\n            var height = opts.height - item.y - opts.area[2];\n            var height0 = opts.height - item.y0 - opts.area[2];\n            if (seriesIndex > 0) {\n              height -= height0;\n            }\n            context.moveTo(startX, item.y);\n            context.fillRect(startX, item.y, item.width - 2, height);\n            context.closePath();\n            context.fill();\n          }\n        });\n        break;\n      case 'meter':\n        // 绘制温度计数据图\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        calPoints.push(points);\n        points = fixColumeMeterData(points, eachSpacing, series.length, seriesIndex, config, opts, columnOption.meter.\n        border);\n        if (seriesIndex == 0) {\n          points.forEach(function (item, index) {\n            if (item !== null) {\n              //画背景颜色\n              context.beginPath();\n              context.setFillStyle(columnOption.meter.fillColor);\n              var startX = item.x - item.width / 2;\n              var height = opts.height - item.y - opts.area[2];\n              context.moveTo(startX, item.y);\n              context.fillRect(startX, item.y, item.width, height);\n              context.closePath();\n              context.fill();\n              //画边框线\n              if (columnOption.meter.border > 0) {\n                context.beginPath();\n                context.setStrokeStyle(eachSeries.color);\n                context.setLineWidth(columnOption.meter.border * opts.pixelRatio);\n                context.moveTo(startX + columnOption.meter.border * 0.5, item.y + height);\n                context.lineTo(startX + columnOption.meter.border * 0.5, item.y + columnOption.meter.border * 0.5);\n                context.lineTo(startX + item.width - columnOption.meter.border * 0.5, item.y + columnOption.meter.border * 0.5);\n                context.lineTo(startX + item.width - columnOption.meter.border * 0.5, item.y + height);\n                context.stroke();\n              }\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (item !== null) {\n              context.beginPath();\n              context.setFillStyle(item.color || eachSeries.color);\n              var startX = item.x - item.width / 2;\n              var height = opts.height - item.y - opts.area[2];\n              context.moveTo(startX, item.y);\n              context.fillRect(startX, item.y, item.width, height);\n              context.closePath();\n              context.fill();\n            }\n          });\n        }\n        break;}\n\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      switch (columnOption.type) {\n        case 'group':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'stack':\n          var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config,\n          seriesIndex,\n          series, process);\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'meter':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          drawPointText(points, eachSeries, config, context);\n          break;}\n\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawCandleDataPoints(series, seriesMA, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var candleOption = assign({}, {\n    color: {},\n    average: {} },\n  opts.extra.candle);\n  candleOption.color = assign({}, {\n    upLine: '#f04864',\n    upFill: '#f04864',\n    downLine: '#2fc25b',\n    downFill: '#2fc25b' },\n  candleOption.color);\n  candleOption.average = assign({}, {\n    show: false,\n    name: [],\n    day: [],\n    color: config.colors },\n  candleOption.average);\n  opts.extra.candle = candleOption;\n\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  //画均线\n  if (candleOption.average.show) {\n    seriesMA.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      //calPoints.push(points);\n      var splitPointList = splitPoints(points);\n\n      splitPointList.forEach(function (points, index) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(1);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y,\n              item.x, item.\n              y);\n            }\n          });\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      });\n    });\n  }\n  //画K线\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n    splitPointList = splitPointList[0];\n\n    splitPointList.forEach(function (points, index) {\n      context.beginPath();\n      //如果上涨\n      if (data[index][1] - data[index][0] > 0) {\n        context.setStrokeStyle(candleOption.color.upLine);\n        context.setFillStyle(candleOption.color.upFill);\n        context.setLineWidth(1 * opts.pixelRatio);\n        context.moveTo(points[3].x, points[3].y); //顶点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.lineTo(points[1].x - eachSpacing / 4, points[1].y); //收盘左侧点\n        context.lineTo(points[0].x - eachSpacing / 4, points[0].y); //开盘左侧点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.lineTo(points[2].x, points[2].y); //底点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.lineTo(points[0].x + eachSpacing / 4, points[0].y); //开盘右侧点\n        context.lineTo(points[1].x + eachSpacing / 4, points[1].y); //收盘右侧点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.moveTo(points[3].x, points[3].y); //顶点\n      } else {\n        context.setStrokeStyle(candleOption.color.downLine);\n        context.setFillStyle(candleOption.color.downFill);\n        context.setLineWidth(1 * opts.pixelRatio);\n        context.moveTo(points[3].x, points[3].y); //顶点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.lineTo(points[0].x - eachSpacing / 4, points[0].y); //开盘左侧点\n        context.lineTo(points[1].x - eachSpacing / 4, points[1].y); //收盘左侧点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.lineTo(points[2].x, points[2].y); //底点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.lineTo(points[1].x + eachSpacing / 4, points[1].y); //收盘右侧点\n        context.lineTo(points[0].x + eachSpacing / 4, points[0].y); //开盘右侧点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.moveTo(points[3].x, points[3].y); //顶点\n      }\n      context.closePath();\n      context.fill();\n      context.stroke();\n    });\n  });\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawAreaDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var areaOption = assign({}, {\n    type: 'straight',\n    opacity: 0.2,\n    addLine: false,\n    width: 2 },\n  opts.extra.area);\n\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var endY = opts.height - opts.area[2];\n  var calPoints = [];\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n\n    var splitPointList = splitPoints(points);var _loop3 = function _loop3(\n\n    i) {\n      var points = splitPointList[i];\n      // 绘制区域数\n      context.beginPath();\n      context.setStrokeStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      context.setFillStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      context.setLineWidth(areaOption.width * opts.pixelRatio);\n      if (points.length > 1) {\n        var firstPoint = points[0];\n        var lastPoint = points[points.length - 1];\n\n        context.moveTo(firstPoint.x, firstPoint.y);\n        if (areaOption.type === 'curve') {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              context.lineTo(item.x, item.y);\n            }\n          });\n        }\n\n        context.lineTo(lastPoint.x, endY);\n        context.lineTo(firstPoint.x, endY);\n        context.lineTo(firstPoint.x, firstPoint.y);\n      } else {\n        var item = points[0];\n        context.moveTo(item.x - eachSpacing / 2, item.y);\n        context.lineTo(item.x + eachSpacing / 2, item.y);\n        context.lineTo(item.x + eachSpacing / 2, endY);\n        context.lineTo(item.x - eachSpacing / 2, endY);\n        context.moveTo(item.x - eachSpacing / 2, item.y);\n      }\n      context.closePath();\n      context.fill();\n\n      //画连线\n      if (areaOption.addLine) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(areaOption.width * opts.pixelRatio);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          if (areaOption.type === 'curve') {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                var ctrlPoint = createCurveControlPoints(points, index - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n              }\n            });\n          } else {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                context.lineTo(item.x, item.y);\n              }\n            });\n          }\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      }};for (var i = 0; i < splitPointList.length; i++) {_loop3(i);\n    }\n\n    //画点\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawLineDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var lineOption = opts.extra.line || {\n    type: 'straight',\n    width: 2 };\n\n  lineOption.type = lineOption.type ? lineOption.type : 'straight';\n  lineOption.width = lineOption.width ? lineOption.width : 2;\n\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n\n    splitPointList.forEach(function (points, index) {\n      context.beginPath();\n      context.setStrokeStyle(eachSeries.color);\n      context.setLineWidth(lineOption.width * opts.pixelRatio);\n      if (points.length === 1) {\n        context.moveTo(points[0].x, points[0].y);\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n      } else {\n        context.moveTo(points[0].x, points[0].y);\n        if (lineOption.type === 'curve') {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y,\n              item.x, item.\n              y);\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              context.lineTo(item.x, item.y);\n            }\n          });\n        }\n        context.moveTo(points[0].x, points[0].y);\n      }\n      context.closePath();\n      context.stroke();\n    });\n\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawMixDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var endY = opts.height - opts.area[2];\n  var calPoints = [];\n\n  var columnIndex = 0;\n  var columnLength = 0;\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (eachSeries.type == 'column') {\n      columnLength += 1;\n    }\n  });\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n\n    // 绘制柱状数据图\n    if (eachSeries.type == 'column') {\n      points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n      points.forEach(function (item, index) {\n        if (item !== null) {\n          context.beginPath();\n          context.setFillStyle(item.color || eachSeries.color);\n          var startX = item.x - item.width / 2 + 1;\n          var height = opts.height - item.y - opts.area[2];\n          context.moveTo(startX, item.y);\n          context.rect(startX, item.y, item.width - 2, height);\n          context.closePath();\n          context.fill();\n        }\n      });\n      columnIndex += 1;\n    }\n\n    //绘制区域图数据\n\n    if (eachSeries.type == 'area') {\n      var _splitPointList = splitPoints(points);var _loop4 = function _loop4(\n      i) {\n        var points = _splitPointList[i];\n        // 绘制区域数据\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setFillStyle(hexToRgb(eachSeries.color, 0.2));\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (points.length > 1) {\n          firstPoint = points[0];\n          var lastPoint = points[points.length - 1];\n          context.moveTo(firstPoint.x, firstPoint.y);\n          if (eachSeries.style === 'curve') {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                var ctrlPoint = createCurveControlPoints(points, index - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n              }\n            });\n          } else {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                context.lineTo(item.x, item.y);\n              }\n            });\n          }\n          context.lineTo(lastPoint.x, endY);\n          context.lineTo(firstPoint.x, endY);\n          context.lineTo(firstPoint.x, firstPoint.y);\n        } else {\n          var item = points[0];\n          context.moveTo(item.x - eachSpacing / 2, item.y);\n          context.lineTo(item.x + eachSpacing / 2, item.y);\n          context.lineTo(item.x + eachSpacing / 2, endY);\n          context.lineTo(item.x - eachSpacing / 2, endY);\n          context.moveTo(item.x - eachSpacing / 2, item.y);\n        }\n        context.closePath();\n        context.fill();};for (var i = 0; i < _splitPointList.length; i++) {var firstPoint;_loop4(i);\n      }\n    }\n\n    // 绘制折线数据图\n    if (eachSeries.type == 'line') {\n      var splitPointList = splitPoints(points);\n      splitPointList.forEach(function (points, index) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          if (eachSeries.style == 'curve') {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                var ctrlPoint = createCurveControlPoints(points, index - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y,\n                item.x,\n                item.y);\n              }\n            });\n          } else {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                context.lineTo(item.x, item.y);\n              }\n            });\n          }\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      });\n    }\n\n    // 绘制点数据图\n    if (eachSeries.type == 'point') {\n      points.forEach(function (pointsa, index) {\n        if (pointsa) {\n          context.beginPath();\n          context.setFillStyle(eachSeries.color);\n          context.setStrokeStyle('#FFFFFF');\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.moveTo(pointsa.x + 3.5 * opts.pixelRatio, pointsa.y);\n          context.arc(pointsa.x, pointsa.y, 4 * opts.pixelRatio, 0, 2 * Math.PI);\n          context.closePath();\n          context.fill();\n          context.stroke();\n        }\n      });\n    }\n\n    if (eachSeries.addPoint == true && eachSeries.type !== 'column') {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    var columnIndex = 0;\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      if (eachSeries.type !== 'column') {\n        drawPointText(points, eachSeries, config, context);\n      } else {\n        points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n        drawPointText(points, eachSeries, config, context);\n        columnIndex += 1;\n      }\n\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints) {\n  var toolTipOption = opts.extra.tooltip || {};\n  if (toolTipOption.horizentalLine && opts.tooltip && process === 1 && (opts.type == 'line' || opts.type == 'area' || opts.type == 'column' || opts.type == 'candle' || opts.type == 'mix')) {\n    drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTip(opts.tooltip.textList, opts.tooltip.offset, opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.restore();\n\n}\n\nfunction drawXAxis(categories, opts, config, context) {\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  startX = xAxisData.startX,\n  endX = xAxisData.endX,\n  eachSpacing = xAxisData.eachSpacing;\n  var boundaryGap = 'center';\n  if (opts.type == 'line' || opts.type == 'area') {\n    boundaryGap = opts.xAxis.boundaryGap;\n  }\n  var startY = opts.height - opts.area[2];\n  var endY = opts.area[0];\n\n  //绘制滚动条\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    var scrollY = opts.height - opts.area[2] + config.xAxisHeight;\n    var scrollScreenWidth = endX - startX;\n    var scrollTotalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var scrollWidth = scrollScreenWidth * scrollScreenWidth / scrollTotalWidth;\n    var scrollLeft = 0;\n    if (opts._scrollDistance_) {\n      scrollLeft = -opts._scrollDistance_ * scrollScreenWidth / scrollTotalWidth;\n    }\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollBackgroundColor || \"#EFEBEF\");\n    context.moveTo(startX, scrollY);\n    context.lineTo(endX, scrollY);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollColor || \"#A6A6A6\");\n    context.moveTo(startX + scrollLeft, scrollY);\n    context.lineTo(startX + scrollLeft + scrollWidth, scrollY);\n    context.stroke();\n    context.closePath();\n    context.setLineCap('butt');\n  }\n\n  context.save();\n\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n\n  if (opts.xAxis.disableGrid !== true) {\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\n    context.setLineCap('butt');\n    context.setLineWidth(1 * opts.pixelRatio);\n    if (opts.xAxis.gridType == 'dash') {\n      context.setLineDash([opts.xAxis.dashLength, opts.xAxis.dashLength]);\n    }\n    if (opts.xAxis.type === 'calibration') {\n      xAxisPoints.forEach(function (item, index) {\n        if (index > 0) {\n          context.beginPath();\n          context.moveTo(item - eachSpacing / 2, startY);\n          context.lineTo(item - eachSpacing / 2, startY + 4 * opts.pixelRatio);\n          context.closePath();\n          context.stroke();\n        }\n      });\n    } else {\n      opts.xAxis.gridEval = opts.xAxis.gridEval || 1;\n      xAxisPoints.forEach(function (item, index) {\n        if (index % opts.xAxis.gridEval == 0) {\n          context.beginPath();\n          context.moveTo(item, startY);\n          context.lineTo(item, endY);\n          context.stroke();\n        }\n      });\n    }\n    context.setLineDash([]);\n  }\n\n\n  //不绘制X轴\n  if (opts.xAxis.disabled !== true) {\n    // 对X轴列表做抽稀处理\n    var validWidth = opts.width - opts.padding[1] - opts.padding[3] - config.yAxisWidth - config.yAxisTitleWidth;\n    //默认全部显示X轴标签\n    var maxXAxisListLength = categories.length;\n    //如果设置了X轴单屏数量\n    if (opts.xAxis.labelCount) {\n      //如果设置X轴密度\n      if (opts.xAxis.itemCount) {\n        maxXAxisListLength = Math.ceil(categories.length / opts.xAxis.itemCount * opts.xAxis.labelCount);\n      } else {\n        maxXAxisListLength = opts.xAxis.labelCount;\n      }\n      maxXAxisListLength -= 1;\n    }\n\n    var ratio = Math.ceil(categories.length / maxXAxisListLength);\n\n    var newCategories = [];\n    var cgLength = categories.length;\n    for (var i = 0; i < cgLength; i++) {\n      if (i % ratio !== 0) {\n        newCategories.push(\"\");\n      } else {\n        newCategories.push(categories[i]);\n      }\n    }\n    newCategories[cgLength - 1] = categories[cgLength - 1];\n\n    var xAxisFontSize = opts.xAxis.fontSize || config.fontSize;\n    if (config._xAxisTextAngle_ === 0) {\n      newCategories.forEach(function (item, index) {\n        var offset = -measureText(item, xAxisFontSize) / 2;\n        if (boundaryGap == 'center') {\n          offset += eachSpacing / 2;\n        }\n        context.beginPath();\n        context.setFontSize(xAxisFontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        context.fillText(item, xAxisPoints[index] + offset, startY + xAxisFontSize + (config.xAxisHeight - xAxisFontSize) / 2);\n        context.closePath();\n        context.stroke();\n      });\n\n    } else {\n      newCategories.forEach(function (item, index) {\n        context.save();\n        context.beginPath();\n        context.setFontSize(xAxisFontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        var textWidth = measureText(item);\n        var offset = -textWidth;\n        if (boundaryGap == 'center') {\n          offset += eachSpacing / 2;\n        }\n        var _calRotateTranslate = calRotateTranslate(xAxisPoints[index] + eachSpacing / 2, startY + xAxisFontSize / 2 + 5, opts.height),\n        transX = _calRotateTranslate.transX,\n        transY = _calRotateTranslate.transY;\n\n        context.rotate(-1 * config._xAxisTextAngle_);\n        context.translate(transX, transY);\n        context.fillText(item, xAxisPoints[index] + offset, startY + xAxisFontSize + 5);\n        context.closePath();\n        context.stroke();\n        context.restore();\n      });\n    }\n  }\n  context.restore();\n\n}\n\nfunction drawYAxisGrid(categories, opts, config, context) {\n  if (opts.yAxis.disableGrid === true) {\n    return;\n  }\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var eachSpacing = spacingValid / config.yAxisSplit;\n  var startX = opts.area[3];\n  var xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\n  xAxiseachSpacing = opts.chartData.xAxisData.eachSpacing;\n  var TotalWidth = xAxiseachSpacing * (xAxisPoints.length - 1);\n  var endX = startX + TotalWidth;\n\n  var points = [];\n  for (var i = 0; i < config.yAxisSplit + 1; i++) {\n    points.push(opts.height - opts.area[2] - eachSpacing * i);\n  }\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  if (opts.yAxis.gridType == 'dash') {\n    context.setLineDash([opts.yAxis.dashLength, opts.yAxis.dashLength]);\n  }\n  context.setStrokeStyle(opts.yAxis.gridColor || \"#cccccc\");\n  context.setLineWidth(1 * opts.pixelRatio);\n  points.forEach(function (item, index) {\n    context.beginPath();\n    context.moveTo(startX, item);\n    context.lineTo(endX, item);\n    context.stroke();\n  });\n  context.setLineDash([]);\n\n  context.restore();\n}\n\nfunction drawYAxis(series, opts, config, context) {\n  if (opts.yAxis.disabled === true) {\n    return;\n  }\n  var rangesFormat = opts.chartData.yAxisData.rangesFormat;\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var eachSpacing = Math.floor(spacingValid / config.yAxisSplit);\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  var endY = opts.height - opts.area[2];\n  var fillEndY = endY + config.xAxisHeight;\n  if (opts.xAxis.scrollShow) {\n    fillEndY -= 3 * opts.pixelRatio;\n  }\n  // set YAxis background\n  context.beginPath();\n  context.setFillStyle(opts.background || '#ffffff');\n  if (opts._scrollDistance_ < 0) {\n    context.fillRect(0, 0, startX, fillEndY);\n  }\n  if (opts.enableScroll == true) {\n    context.fillRect(endX, 0, opts.width, fillEndY);\n  }\n  context.closePath();\n  context.stroke();\n\n  var points = [];\n  for (var i = 0; i <= config.yAxisSplit; i++) {\n    points.push(opts.area[0] + eachSpacing * i);\n  }\n\n  var yAxisFontSize = opts.yAxis.fontSize || config.fontSize;\n  rangesFormat.forEach(function (item, index) {\n    var pos = points[index] ? points[index] : endY;\n    context.beginPath();\n    context.setFontSize(yAxisFontSize);\n    context.setFillStyle(opts.yAxis.fontColor || '#666666');\n    context.fillText(String(item), opts.area[3] - config.yAxisWidth, pos + yAxisFontSize / 2);\n    context.closePath();\n    context.stroke();\n  });\n\n  if (opts.yAxis.title) {\n    drawYAxisTitle(opts.yAxis.title, opts, config, context);\n  }\n}\n\nfunction drawLegend(series, opts, config, context, chartData) {\n  if (opts.legend.show === false) {\n    return;\n  }\n  var legendData = chartData.legendData;\n  var legendList = legendData.points;\n  var legendArea = legendData.area;\n  var padding = opts.legend.padding;\n  var fontSize = opts.legend.fontSize;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var shapeRight = 5 * opts.pixelRatio;\n  var itemGap = opts.legend.itemGap;\n  var lineHeight = Math.max(opts.legend.lineHeight * opts.pixelRatio, fontSize);\n\n  //画背景及边框\n  context.beginPath();\n  context.setLineWidth(opts.legend.borderWidth);\n  context.setStrokeStyle(opts.legend.borderColor);\n  context.setFillStyle(opts.legend.backgroundColor);\n  context.moveTo(legendArea.start.x, legendArea.start.y);\n  context.rect(legendArea.start.x, legendArea.start.y, legendArea.width, legendArea.height);\n  context.closePath();\n  context.fill();\n  context.stroke();\n\n  legendList.forEach(function (itemList, listIndex) {\n    var width = 0;\n    var height = 0;\n    width = legendData.widthArr[listIndex];\n    height = legendData.heightArr[listIndex];\n    var startX = 0;\n    var startY = 0;\n    if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n      startX = legendArea.start.x + (legendArea.width - width) / 2;\n      startY = legendArea.start.y + padding + listIndex * lineHeight;\n    } else {\n      if (listIndex == 0) {\n        width = 0;\n      } else {\n        width = legendData.widthArr[listIndex - 1];\n      }\n      startX = legendArea.start.x + padding + width;\n      startY = legendArea.start.y + padding + (legendArea.height - height) / 2;\n    }\n\n    context.setFontSize(config.fontSize);\n    for (var i = 0; i < itemList.length; i++) {\n      var item = itemList[i];\n      item.area = [0, 0, 0, 0];\n      item.area[0] = startX;\n      item.area[1] = startY;\n      item.area[3] = startY + lineHeight;\n      context.beginPath();\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.show ? item.color : opts.legend.hiddenColor);\n      context.setFillStyle(item.show ? item.color : opts.legend.hiddenColor);\n      switch (item.legendShape) {\n        case 'line':\n          context.moveTo(startX, startY + 0.5 * lineHeight - 2 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 2 * opts.pixelRatio, 15 * opts.pixelRatio, 4 * opts.pixelRatio);\n          break;\n        case 'triangle':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.lineTo(startX + 2.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 12.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          break;\n        case 'diamond':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.lineTo(startX + 2.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 12.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          break;\n        case 'circle':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight, 5 * opts.pixelRatio, 0, 2 * Math.PI);\n          break;\n        case 'rect':\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio, 15 * opts.pixelRatio, 10 * opts.pixelRatio);\n          break;\n        default:\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio, 15 * opts.pixelRatio, 10 * opts.pixelRatio);}\n\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      startX += shapeWidth + shapeRight;\n      var fontTrans = 0.5 * lineHeight + 0.5 * fontSize - 2;\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.show ? opts.legend.fontColor : opts.legend.hiddenColor);\n      context.fillText(item.name, startX, startY + fontTrans);\n      context.closePath();\n      context.stroke();\n      if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n        startX += measureText(item.name, fontSize) + itemGap;\n        item.area[2] = startX;\n      } else {\n        item.area[2] = startX + measureText(item.name, fontSize) + itemGap;;\n        startX -= shapeWidth + shapeRight;\n        startY += lineHeight;\n      }\n    }\n  });\n}\n\nfunction drawPieDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var pieOption = assign({}, {\n    activeOpacity: 0.5,\n    activeRadius: 10 * opts.pixelRatio,\n    offsetAngle: 0,\n    labelWidth: 15 * opts.pixelRatio,\n    ringWidth: 0,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF' },\n  opts.extra.pie);\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n  if (config.pieChartLinePadding == 0) {\n    config.pieChartLinePadding = pieOption.activeRadius;\n  }\n\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\n\n  series = getPieDataPoints(series, radius, process);\n\n  var activeRadius = pieOption.activeRadius;\n\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += pieOption.offsetAngle * Math.PI / 180;\n    return eachSeries;\n  });\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (opts.tooltip) {\n      if (opts.tooltip.index == seriesIndex) {\n        context.beginPath();\n        context.setFillStyle(hexToRgb(eachSeries.color, opts.extra.pie.activeOpacity || 0.5));\n        context.moveTo(centerPosition.x, centerPosition.y);\n        context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_ + activeRadius, eachSeries._start_,\n        eachSeries._start_ + 2 *\n        eachSeries._proportion_ * Math.PI);\n        context.closePath();\n        context.fill();\n      }\n    }\n    context.beginPath();\n    context.setLineWidth(pieOption.borderWidth * opts.pixelRatio);\n    context.lineJoin = \"round\";\n    context.setStrokeStyle(pieOption.borderColor);\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (pieOption.border == true) {\n      context.stroke();\n    }\n  });\n\n  if (opts.type === 'ring') {\n    var innerPieWidth = radius * 0.6;\n    if (typeof opts.extra.pie.ringWidth === 'number' && opts.extra.pie.ringWidth > 0) {\n      innerPieWidth = Math.max(0, radius - opts.extra.pie.ringWidth);\n    }\n    context.beginPath();\n    context.setFillStyle(opts.background || '#ffffff');\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, innerPieWidth, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n  }\n\n  if (opts.dataLabel !== false && process === 1) {\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n\n  if (process === 1 && opts.type === 'ring') {\n    drawRingTitle(opts, config, context, centerPosition);\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawRoseDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var roseOption = assign({}, {\n    type: 'area',\n    activeOpacity: 0.5,\n    activeRadius: 10 * opts.pixelRatio,\n    offsetAngle: 0,\n    labelWidth: 15 * opts.pixelRatio,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF' },\n  opts.extra.rose);\n  if (config.pieChartLinePadding == 0) {\n    config.pieChartLinePadding = roseOption.activeRadius;\n  }\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n  var radius = Math.min(centerPosition.x - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_,\n  centerPosition.y - config.pieChartLinePadding - config.pieChartTextPadding);\n  if (opts.dataLabel) {\n    radius -= 10;\n  } else {\n    //TODO逻辑不对\n    radius -= opts.padding[1] + opts.padding[3];\n  }\n  var minRadius = roseOption.minRadius || radius * 0.5;\n\n  series = getRoseDataPoints(series, roseOption.type, minRadius, radius, process);\n\n  var activeRadius = roseOption.activeRadius;\n\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += (roseOption.offsetAngle || 0) * Math.PI / 180;\n    return eachSeries;\n  });\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (opts.tooltip) {\n      if (opts.tooltip.index == seriesIndex) {\n        context.beginPath();\n        context.setFillStyle(hexToRgb(eachSeries.color, roseOption.activeOpacity || 0.5));\n        context.moveTo(centerPosition.x, centerPosition.y);\n        context.arc(centerPosition.x, centerPosition.y, activeRadius + eachSeries._radius_, eachSeries._start_,\n        eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\n        context.closePath();\n        context.fill();\n      }\n    }\n    context.beginPath();\n    context.setLineWidth(roseOption.borderWidth * opts.pixelRatio);\n    context.lineJoin = \"round\";\n    context.setStrokeStyle(roseOption.borderColor);\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 *\n    eachSeries._proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (roseOption.border == true) {\n      context.stroke();\n    }\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawArcbarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var arcbarOption = assign({}, {\n    startAngle: 0.75,\n    endAngle: 0.25,\n    type: 'default',\n    width: 12 * opts.pixelRatio },\n  opts.extra.arcbar);\n\n  series = getArcbarDataPoints(series, arcbarOption, process);\n  var centerPosition = {\n    x: opts.width / 2,\n    y: opts.height / 2 };\n\n  var radius = Math.min(centerPosition.x, centerPosition.y);\n  radius -= 5 * opts.pixelRatio;\n  radius -= arcbarOption.width / 2;\n\n  //背景颜色\n  context.setLineWidth(arcbarOption.width);\n  context.setStrokeStyle(arcbarOption.backgroundColor || '#E9E9E9');\n  context.setLineCap('round');\n  context.beginPath();\n  if (arcbarOption.type == 'default') {\n    context.arc(centerPosition.x, centerPosition.y, radius, arcbarOption.startAngle * Math.PI, arcbarOption.endAngle *\n    Math.PI, false);\n  } else {\n    context.arc(centerPosition.x, centerPosition.y, radius, 0, 2 * Math.PI, false);\n  }\n  context.stroke();\n\n  for (var i = 0; i < series.length; i++) {\n    var eachSeries = series[i];\n    context.setLineWidth(arcbarOption.width);\n    context.setStrokeStyle(eachSeries.color);\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, radius, arcbarOption.startAngle * Math.PI, eachSeries._proportion_ *\n    Math.PI, false);\n    context.stroke();\n  }\n\n  drawRingTitle(opts, config, context, centerPosition);\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawGaugeDataPoints(categories, series, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var gaugeOption = assign({}, {\n    startAngle: 0.75,\n    endAngle: 0.25,\n    width: 15,\n    splitLine: {\n      fixRadius: 0,\n      splitNumber: 10,\n      width: 15,\n      color: '#FFFFFF',\n      childNumber: 5,\n      childWidth: 5 },\n\n    pointer: {\n      width: 15,\n      color: 'auto' } },\n\n  opts.extra.gauge);\n\n  if (gaugeOption.oldAngle == undefined) {\n    gaugeOption.oldAngle = gaugeOption.startAngle;\n  }\n  if (gaugeOption.oldData == undefined) {\n    gaugeOption.oldData = 0;\n  }\n\n  categories = getGaugeAxisPoints(categories, gaugeOption.startAngle, gaugeOption.endAngle);\n\n  var centerPosition = {\n    x: opts.width / 2,\n    y: opts.height / 2 };\n\n  var radius = Math.min(centerPosition.x, centerPosition.y);\n  radius -= 5 * opts.pixelRatio;\n  radius -= gaugeOption.width / 2;\n  var innerRadius = radius - gaugeOption.width;\n\n  //画背景\n  context.setLineWidth(gaugeOption.width);\n  context.setLineCap('butt');\n  for (var i = 0; i < categories.length; i++) {\n    var eachCategories = categories[i];\n    context.beginPath();\n    context.setStrokeStyle(eachCategories.color);\n    context.arc(centerPosition.x, centerPosition.y, radius, eachCategories._startAngle_ * Math.PI, eachCategories._endAngle_ *\n    Math.PI, false);\n    context.stroke();\n  }\n  context.save();\n\n  //画刻度线\n  var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n  var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n  var childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\n  var startX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\n  var endX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\n  var childendX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.childWidth;\n\n  context.translate(centerPosition.x, centerPosition.y);\n  context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n\n  for (var _i12 = 0; _i12 < gaugeOption.splitLine.splitNumber + 1; _i12++) {\n    context.beginPath();\n    context.setStrokeStyle(gaugeOption.splitLine.color);\n    context.setLineWidth(2 * opts.pixelRatio);\n    context.moveTo(startX, 0);\n    context.lineTo(endX, 0);\n    context.stroke();\n    context.rotate(splitAngle * Math.PI);\n  }\n  context.restore();\n\n  context.save();\n  context.translate(centerPosition.x, centerPosition.y);\n  context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n\n  for (var _i13 = 0; _i13 < gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1; _i13++) {\n    context.beginPath();\n    context.setStrokeStyle(gaugeOption.splitLine.color);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.moveTo(startX, 0);\n    context.lineTo(childendX, 0);\n    context.stroke();\n    context.rotate(childAngle * Math.PI);\n  }\n  context.restore();\n\n  //画指针\n  series = getGaugeDataPoints(series, categories, gaugeOption, process);\n\n  for (var _i14 = 0; _i14 < series.length; _i14++) {\n    var eachSeries = series[_i14];\n    context.save();\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((eachSeries._proportion_ - 1) * Math.PI);\n    context.beginPath();\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(gaugeOption.pointer.width, 0);\n    context.lineTo(0, -gaugeOption.pointer.width / 2);\n    context.lineTo(-innerRadius, 0);\n    context.lineTo(0, gaugeOption.pointer.width / 2);\n    context.lineTo(gaugeOption.pointer.width, 0);\n    context.closePath();\n    context.fill();\n    context.beginPath();\n    context.setFillStyle('#FFFFFF');\n    context.arc(0, 0, gaugeOption.pointer.width / 6, 0, 2 * Math.PI, false);\n    context.fill();\n    context.restore();\n  }\n\n  if (opts.dataLabel !== false) {\n    drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context);\n  }\n\n  drawRingTitle(opts, config, context, centerPosition);\n\n  if (process === 1 && opts.type === 'gauge') {\n    gaugeOption.oldAngle = series[0]._proportion_;\n    gaugeOption.oldData = series[0].data;\n  }\n  return {\n    center: centerPosition,\n    radius: radius,\n    innerRadius: innerRadius,\n    categories: categories,\n    totalAngle: totalAngle };\n\n}\n\nfunction drawRadarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var radarOption = assign({}, {\n    gridColor: '#cccccc',\n    labelColor: '#666666',\n    opacity: 0.2 },\n  opts.extra.radar);\n\n  var coordinateAngle = getRadarCoordinateSeries(opts.categories.length);\n\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n\n  var radius = Math.min(centerPosition.x - (getMaxTextListLength(opts.categories) + config.radarLabelTextMargin),\n  centerPosition.y - config.radarLabelTextMargin);\n  //TODO逻辑不对\n  radius -= opts.padding[1];\n\n  // draw grid\n  context.beginPath();\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setStrokeStyle(radarOption.gridColor);\n  coordinateAngle.forEach(function (angle) {\n    var pos = convertCoordinateOrigin(radius * Math.cos(angle), radius * Math.sin(angle), centerPosition);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.lineTo(pos.x, pos.y);\n  });\n  context.stroke();\n  context.closePath();\n  // draw split line grid\n\n  var _loop = function _loop(i) {\n    var startPos = {};\n    context.beginPath();\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setStrokeStyle(radarOption.gridColor);\n    coordinateAngle.forEach(function (angle, index) {\n      var pos = convertCoordinateOrigin(radius / config.radarGridCount * i * Math.cos(angle), radius / config.radarGridCount *\n      i * Math.sin(angle), centerPosition);\n      if (index === 0) {\n        startPos = pos;\n        context.moveTo(pos.x, pos.y);\n      } else {\n        context.lineTo(pos.x, pos.y);\n      }\n    });\n    context.lineTo(startPos.x, startPos.y);\n    context.stroke();\n    context.closePath();\n  };\n\n  for (var i = 1; i <= config.radarGridCount; i++) {\n    _loop(i);\n  }\n\n  var radarDataPoints = getRadarDataPoints(coordinateAngle, centerPosition, radius, series, opts, process);\n\n  radarDataPoints.forEach(function (eachSeries, seriesIndex) {\n    // 绘制区域数据\n    context.beginPath();\n    context.setFillStyle(hexToRgb(eachSeries.color, radarOption.opacity));\n    eachSeries.data.forEach(function (item, index) {\n      if (index === 0) {\n        context.moveTo(item.position.x, item.position.y);\n      } else {\n        context.lineTo(item.position.x, item.position.y);\n      }\n    });\n    context.closePath();\n    context.fill();\n\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      var points = eachSeries.data.map(function (item) {\n        return item.position;\n      });\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  // draw label text\n  drawRadarLabel(coordinateAngle, radius, centerPosition, opts, config, context);\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    angleList: coordinateAngle };\n\n}\n\nfunction normalInt(min, max, iter) {\n  iter = iter == 0 ? 1 : iter;\n  var arr = [];\n  for (var i = 0; i < iter; i++) {\n    arr[i] = Math.random();\n  };\n  return Math.floor(arr.reduce(function (i, j) {return i + j;}) / iter * (max - min)) + min;\n};\n\nfunction collisionNew(area, points, width, height) {\n  var isIn = false;\n  for (var i = 0; i < points.length; i++) {\n    if (points[i].area) {\n      if (area[3] < points[i].area[1] || area[0] > points[i].area[2] || area[1] > points[i].area[3] || area[2] < points[i].area[0]) {\n        if (area[0] < 0 || area[1] < 0 || area[2] > width || area[3] > height) {\n          isIn = true;\n          break;\n        } else {\n          isIn = false;\n        }\n      } else {\n        isIn = true;\n        break;\n      }\n    }\n  }\n  return isIn;\n};\n\nfunction drawWordCloudDataPoints(series, opts, config, context) {\n  var wordOption = assign({}, {\n    type: 'normal',\n    autoColors: true },\n  opts.extra.word);\n\n  context.beginPath();\n  context.clearRect(0, 0, opts.width, opts.height);\n  context.setFillStyle(opts.background || '#FFFFFF');\n  context.rect(0, 0, opts.width, opts.height);\n  context.fill();\n  context.save();\n  var points = series.sort(function (a, b) {return parseInt(b.textSize) - parseInt(a.textSize);});\n  switch (wordOption.type) {\n    case 'normal':\n      context.translate(opts.width / 2, opts.height / 2);\n      for (var i = 0; i < points.length; i++) {\n        context.save();\n        var text = points[i].name;\n        var tHeight = points[i].textSize;\n        var tWidth = measureText(text, tHeight);\n        var x = void 0,y = void 0;\n        var area = void 0;\n        var breaknum = 0;\n        while (true) {\n          breaknum++;\n          x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\n          y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\n          area = [x - 5 + opts.width / 2, y - 5 - tHeight + opts.height / 2, x + tWidth + 5 + opts.width / 2, y + 5 + opts.height / 2];\n          var isCollision = collisionNew(area, points, opts.width, opts.height);\n          if (!isCollision) break;\n          if (breaknum == 1000) {\n            area = [-100, -100, -100, -100];\n            break;\n          }\n        };\n        points[i].area = area;\n        //console.log(points[i].color);\n        context.beginPath();\n        context.setFillStyle(points[i].color);\n        context.setFontSize(tHeight);\n        context.fillText(text, area[0] + 5 - opts.width / 2, area[1] + 5 + tHeight - opts.height / 2);\n        //context.rect(area[0]+5-opts.width/2,area[1]+5-opts.height/2,area[2]-area[0],area[3]-area[1]);\n        context.stroke();\n        context.draw(true);\n        context.restore();\n      }\n      break;\n    case 'vertical':\n      context.translate(opts.width / 2, opts.height / 2);var\n      Spin = function Spin() {\n        //获取均匀随机值，是否旋转，旋转的概率为（1-0.5）\n        if (Math.random() > 0.7) {\n          context.rotate(90 * Math.PI / 180);\n          return true;\n        } else {return false;};\n      };;\n\n      for (var _i15 = 0; _i15 < points.length; _i15++) {\n        context.save();\n        var _text = points[_i15].name;\n        var _tHeight = points[_i15].textSize;\n        var _tWidth = measureText(_text, _tHeight);\n        var isSpin = Spin();\n        var _x = void 0,_y = void 0,_area = void 0,areav = void 0;\n        var _breaknum = 0;\n        while (true) {\n          _breaknum++;\n          var _isCollision = void 0;\n          if (isSpin) {\n            _x = normalInt(-opts.width / 2, opts.width / 2, 5) - _tWidth / 2;\n            _y = normalInt(-opts.height / 2, opts.height / 2, 5) + _tHeight / 2;\n            _area = [_y - 5 - _tWidth + opts.width / 2, -_x - 5 + opts.height / 2, _y + 5 + opts.width / 2, -_x + _tHeight + 5 + opts.height / 2];\n            areav = [opts.width - (opts.width / 2 - opts.height / 2) - (-_x + _tHeight + 5 + opts.height / 2) - 5, opts.height / 2 - opts.width / 2 + (_y - 5 - _tWidth + opts.width / 2) - 5, opts.width - (opts.width / 2 - opts.height / 2) - (-_x + _tHeight + 5 + opts.height / 2) + _tHeight, opts.height / 2 - opts.width / 2 + (_y - 5 - _tWidth + opts.width / 2) + _tWidth + 5];\n            _isCollision = collisionNew(areav, points, opts.height, opts.width);\n          } else {\n            _x = normalInt(-opts.width / 2, opts.width / 2, 5) - _tWidth / 2;\n            _y = normalInt(-opts.height / 2, opts.height / 2, 5) + _tHeight / 2;\n            _area = [_x - 5 + opts.width / 2, _y - 5 - _tHeight + opts.height / 2, _x + _tWidth + 5 + opts.width / 2, _y + 5 + opts.height / 2];\n            _isCollision = collisionNew(_area, points, opts.width, opts.height);\n          }\n          if (!_isCollision) break;\n          if (_breaknum == 1000) {\n            _area = [-100, -100, -100, -100];\n            break;\n          }\n        };\n        if (isSpin) {\n          points[_i15].area = areav;\n        } else {\n          points[_i15].area = _area;\n        }\n        //console.log(points[i].color);\n        context.beginPath();\n        context.setFillStyle(points[_i15].color);\n        context.setFontSize(_tHeight);\n        context.fillText(_text, _area[0] + 5 - opts.width / 2, _area[1] + 5 + _tHeight - opts.height / 2);\n        context.stroke();\n        context.draw(true);\n        context.restore();\n      };\n      break;\n    //45度旋转\n    case 'tilt':\n\n      break;\n    //随机旋转\n    case 'random':\n\n      break;}\n\n  context.restore();\n  //drawCanvas(opts, context);\n}\n\nfunction drawFunnelDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var funnelOption = assign({}, {\n    activeWidth: 10,\n    activeOpacity: 0.3,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF',\n    fillOpacity: 1,\n    labelAlign: 'right' },\n  opts.extra.funnel);\n  var eachSpacing = (opts.height - opts.area[0] - opts.area[2]) / series.length;\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.height - opts.area[2] };\n\n  var activeWidth = funnelOption.activeWidth;\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - activeWidth, (opts.height - opts.area[0] - opts.area[2]) / 2 - activeWidth);\n  series = getFunnelDataPoints(series, radius, process);\n  context.save();\n  context.translate(centerPosition.x, centerPosition.y);\n  for (var i = 0; i < series.length; i++) {\n    if (i == 0) {\n      if (opts.tooltip) {\n        if (opts.tooltip.index == i) {\n          context.beginPath();\n          context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\n          context.moveTo(-activeWidth, 0);\n          context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\n          context.lineTo(series[i].radius + activeWidth, -eachSpacing);\n          context.lineTo(activeWidth, 0);\n          context.lineTo(-activeWidth, 0);\n          context.closePath();\n          context.fill();\n        }\n      }\n      series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing, centerPosition.x + series[i].radius, centerPosition.y];\n      context.beginPath();\n      context.setLineWidth(funnelOption.borderWidth * opts.pixelRatio);\n      context.setStrokeStyle(funnelOption.borderColor);\n      context.setFillStyle(hexToRgb(series[i].color, funnelOption.fillOpacity));\n      context.moveTo(0, 0);\n      context.lineTo(-series[i].radius, -eachSpacing);\n      context.lineTo(series[i].radius, -eachSpacing);\n      context.lineTo(0, 0);\n      context.closePath();\n      context.fill();\n      if (funnelOption.border == true) {\n        context.stroke();\n      }\n    } else {\n      if (opts.tooltip) {\n        if (opts.tooltip.index == i) {\n          context.beginPath();\n          context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\n          context.moveTo(0, 0);\n          context.lineTo(-series[i - 1].radius - activeWidth, 0);\n          context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\n          context.lineTo(series[i].radius + activeWidth, -eachSpacing);\n          context.lineTo(series[i - 1].radius + activeWidth, 0);\n          context.lineTo(0, 0);\n          context.closePath();\n          context.fill();\n          context.closePath();\n          context.fill();\n        }\n      }\n      series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\n      context.beginPath();\n      context.setLineWidth(funnelOption.borderWidth * opts.pixelRatio);\n      context.setStrokeStyle(funnelOption.borderColor);\n      context.setFillStyle(hexToRgb(series[i].color, funnelOption.fillOpacity));\n      context.moveTo(0, 0);\n      context.lineTo(-series[i - 1].radius, 0);\n      context.lineTo(-series[i].radius, -eachSpacing);\n      context.lineTo(series[i].radius, -eachSpacing);\n      context.lineTo(series[i - 1].radius, 0);\n      context.lineTo(0, 0);\n      context.closePath();\n      context.fill();\n      if (funnelOption.border == true) {\n        context.stroke();\n      }\n    }\n    context.translate(0, -eachSpacing);\n  }\n  context.restore();\n\n  if (opts.dataLabel !== false && process === 1) {\n    drawFunnelText(series, opts, context, eachSpacing, funnelOption.labelAlign, activeWidth, centerPosition);\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawFunnelText(series, opts, context, eachSpacing, labelAlign, activeWidth, centerPosition) {\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    var startX = void 0,endX = void 0,startY = void 0,fontSize = void 0;\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    if (labelAlign == 'right') {\n      if (i == 0) {\n        startX = (item.funnelArea[2] + centerPosition.x) / 2;\n      } else {\n        startX = (item.funnelArea[2] + series[i - 1].funnelArea[2]) / 2;\n      }\n      endX = startX + activeWidth * 2;\n      startY = item.funnelArea[1] + eachSpacing / 2;\n      fontSize = item.textSize || opts.fontSize;\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.color);\n      context.setFillStyle(item.color);\n      context.beginPath();\n      context.moveTo(startX, startY);\n      context.lineTo(endX, startY);\n      context.stroke();\n      context.closePath();\n      context.beginPath();\n      context.moveTo(endX, startY);\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.textColor || '#666666');\n      context.fillText(text, endX + 5, startY + fontSize / 2 - 2);\n      context.closePath();\n      context.stroke();\n      context.closePath();\n    } else {\n      if (i == 0) {\n        startX = (item.funnelArea[0] + centerPosition.x) / 2;\n      } else {\n        startX = (item.funnelArea[0] + series[i - 1].funnelArea[0]) / 2;\n      }\n      endX = startX - activeWidth * 2;\n      startY = item.funnelArea[1] + eachSpacing / 2;\n      fontSize = item.textSize || opts.fontSize;\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.color);\n      context.setFillStyle(item.color);\n      context.beginPath();\n      context.moveTo(startX, startY);\n      context.lineTo(endX, startY);\n      context.stroke();\n      context.closePath();\n      context.beginPath();\n      context.moveTo(endX, startY);\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.textColor || '#666666');\n      context.fillText(text, endX - 5 - measureText(text), startY + fontSize / 2 - 2);\n      context.closePath();\n      context.stroke();\n      context.closePath();\n    }\n\n  }\n}\n\n\nfunction drawCanvas(opts, context) {\n  context.draw();\n}\n\nvar Timing = {\n  easeIn: function easeIn(pos) {\n    return Math.pow(pos, 3);\n  },\n  easeOut: function easeOut(pos) {\n    return Math.pow(pos - 1, 3) + 1;\n  },\n  easeInOut: function easeInOut(pos) {\n    if ((pos /= 0.5) < 1) {\n      return 0.5 * Math.pow(pos, 3);\n    } else {\n      return 0.5 * (Math.pow(pos - 2, 3) + 2);\n    }\n  },\n  linear: function linear(pos) {\n    return pos;\n  } };\n\n\nfunction Animation(opts) {\n  this.isStop = false;\n  opts.duration = typeof opts.duration === 'undefined' ? 1000 : opts.duration;\n  opts.timing = opts.timing || 'linear';\n  var delay = 17;\n\n  function createAnimationFrame() {\n    if (typeof setTimeout !== 'undefined') {\n      return function (step, delay) {\n        setTimeout(function () {\n          var timeStamp = +new Date();\n          step(timeStamp);\n        }, delay);\n      };\n    } else if (typeof requestAnimationFrame !== 'undefined') {\n      return requestAnimationFrame;\n    } else {\n      return function (step) {\n        step(null);\n      };\n    }\n  };\n  var animationFrame = createAnimationFrame();\n  var startTimeStamp = null;\n  var _step = function step(timestamp) {\n    if (timestamp === null || this.isStop === true) {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n      return;\n    }\n    if (startTimeStamp === null) {\n      startTimeStamp = timestamp;\n    }\n    if (timestamp - startTimeStamp < opts.duration) {\n      var process = (timestamp - startTimeStamp) / opts.duration;\n      var timingFunction = Timing[opts.timing];\n      process = timingFunction(process);\n\n      opts.onProcess && opts.onProcess(process);\n      animationFrame(_step, delay);\n    } else {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n    }\n  };\n  _step = _step.bind(this);\n  animationFrame(_step, delay);\n}\n\n// stop animation immediately\n// and tigger onAnimationFinish\nAnimation.prototype.stop = function () {\n  this.isStop = true;\n};\n\nfunction drawCharts(type, opts, config, context) {\n  var _this = this;\n  var series = opts.series;\n  var categories = opts.categories;\n  series = fillSeries(series, opts, config);\n  var duration = opts.animation ? opts.duration : 0;\n  this.animationInstance && this.animationInstance.stop();\n  var seriesMA = null;\n  if (type == 'candle') {\n    var average = assign({}, opts.extra.candle.average);\n    if (average.show) {\n      seriesMA = calCandleMA(average.day, average.name, average.color, series[0].data);\n      seriesMA = fillSeries(seriesMA, opts, config);\n      opts.seriesMA = seriesMA;\n    } else if (opts.seriesMA) {\n      seriesMA = opts.seriesMA = fillSeries(opts.seriesMA, opts, config);\n    } else {\n      seriesMA = series;\n    }\n  } else {\n    seriesMA = series;\n  }\n\n  /* 过滤掉show=false的series */\n  opts._series_ = series = filterSeries(series);\n\n  //重新计算图表区域\n\n  opts.area = new Array(4);\n  //复位绘图区域\n  for (var j = 0; j < 4; j++) {\n    opts.area[j] = opts.padding[j];\n  }\n\n  //通过计算三大区域：图例、X轴、Y轴的大小，确定绘图区域\n  var _calLegendData = calLegendData(seriesMA, opts, config, opts.chartData),\n  legendHeight = _calLegendData.area.wholeHeight,\n  legendWidth = _calLegendData.area.wholeWidth;\n  //TODO废弃config.legendHeight参数\n  config.legendHeight = legendHeight;\n  switch (opts.legend.position) {\n    case 'top':\n      opts.area[0] += legendHeight;\n      break;\n    case 'bottom':\n      opts.area[2] += legendHeight;\n      break;\n    case 'left':\n      opts.area[3] += legendWidth;\n      break;\n    case 'right':\n      opts.area[1] += legendWidth;\n      break;}\n\n\n  var _calYAxisData = {},yAxisWidth = 0;\n  if (opts.type === 'line' || opts.type === 'column' || opts.type === 'area' || opts.type === 'mix' || opts.type === 'candle') {\n    _calYAxisData = calYAxisData(series, opts, config);\n    yAxisWidth = _calYAxisData.yAxisWidth;\n    config.yAxisWidth = yAxisWidth;\n    opts.area[3] += yAxisWidth;\n  } else {\n    config.yAxisWidth = yAxisWidth;\n  }\n  opts.chartData.yAxisData = _calYAxisData;\n\n  if (opts.categories && opts.categories.length) {\n    opts.chartData.xAxisData = getXAxisPoints(opts.categories, opts, config);\n    var _calCategoriesData = calCategoriesData(opts.categories, opts, config, opts.chartData.xAxisData.eachSpacing),\n    xAxisHeight = _calCategoriesData.xAxisHeight,\n    angle = _calCategoriesData.angle;\n    config.xAxisHeight = xAxisHeight;\n    config._xAxisTextAngle_ = angle;\n    opts.area[2] += xAxisHeight;\n    opts.chartData.categoriesData = _calCategoriesData;\n  }\n\n  //计算右对齐偏移距离\n  if (opts.enableScroll && opts.xAxis.scrollAlign == 'right' && opts._scrollDistance_ === undefined) {\n    var offsetLeft = 0,\n    xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\n    startX = opts.chartData.xAxisData.startX,\n    endX = opts.chartData.xAxisData.endX,\n    eachSpacing = opts.chartData.xAxisData.eachSpacing;\n    var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var screenWidth = endX - startX;\n    offsetLeft = screenWidth - totalWidth;\n    _this.scrollOption = {\n      currentOffset: offsetLeft,\n      startTouchX: offsetLeft,\n      distance: 0,\n      lastMoveTime: 0 };\n\n    opts._scrollDistance_ = offsetLeft;\n  }\n\n  if (type === 'pie' || type === 'ring' || type === 'rose') {\n    config._pieTextMaxLength_ = opts.dataLabel === false ? 0 : getPieTextMaxLength(seriesMA);\n  }\n\n  switch (type) {\n    case 'word':\n      context.clearRect(0, 0, opts.width, opts.height);\n      drawWordCloudDataPoints(series, opts, config, context);\n      break;\n    case 'funnel':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.funnelData = drawFunnelDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'line':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawLineDataPoints = drawLineDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawLineDataPoints.xAxisPoints,\n          calPoints = _drawLineDataPoints.calPoints,\n          eachSpacing = _drawLineDataPoints.eachSpacing,\n          minRange = _drawLineDataPoints.minRange,\n          maxRange = _drawLineDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'mix':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawMixDataPoints = drawMixDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawMixDataPoints.xAxisPoints,\n          calPoints = _drawMixDataPoints.calPoints,\n          eachSpacing = _drawMixDataPoints.eachSpacing,\n          minRange = _drawMixDataPoints.minRange,\n          maxRange = _drawMixDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'column':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawColumnDataPoints = drawColumnDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawColumnDataPoints.xAxisPoints,\n          calPoints = _drawColumnDataPoints.calPoints,\n          eachSpacing = _drawColumnDataPoints.eachSpacing,\n          minRange = _drawColumnDataPoints.minRange,\n          maxRange = _drawColumnDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'area':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawAreaDataPoints = drawAreaDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawAreaDataPoints.xAxisPoints,\n          calPoints = _drawAreaDataPoints.calPoints,\n          eachSpacing = _drawAreaDataPoints.eachSpacing,\n          minRange = _drawAreaDataPoints.minRange,\n          maxRange = _drawAreaDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'ring':\n    case 'pie':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'rose':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.pieData = drawRoseDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'radar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.radarData = drawRadarDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'arcbar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.arcbarData = drawArcbarDataPoints(series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'gauge':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.gaugeData = drawGaugeDataPoints(categories, series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'candle':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawCandleDataPoints = drawCandleDataPoints(series, seriesMA, opts, config, context, process),\n          xAxisPoints = _drawCandleDataPoints.xAxisPoints,\n          calPoints = _drawCandleDataPoints.calPoints,\n          eachSpacing = _drawCandleDataPoints.eachSpacing,\n          minRange = _drawCandleDataPoints.minRange,\n          maxRange = _drawCandleDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          if (seriesMA) {\n            drawLegend(seriesMA, opts, config, context, opts.chartData);\n          } else {\n            drawLegend(opts.series, opts, config, context, opts.chartData);\n          }\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;}\n\n}\n\n// simple event implement\n\nfunction Event() {\n  this.events = {};\n}\n\nEvent.prototype.addEventListener = function (type, listener) {\n  this.events[type] = this.events[type] || [];\n  this.events[type].push(listener);\n};\n\nEvent.prototype.trigger = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var type = args[0];\n  var params = args.slice(1);\n  if (!!this.events[type]) {\n    this.events[type].forEach(function (listener) {\n      try {\n        listener.apply(null, params);\n      } catch (e) {\n        console.error(__f__(e, \" at components\\\\js_sdk\\\\u-charts\\\\u-charts\\\\u-charts.js:4271\"));\n      }\n    });\n  }\n};\n\nvar Charts = function Charts(opts) {\n  opts.pixelRatio = opts.pixelRatio ? opts.pixelRatio : 1;\n  opts.fontSize = opts.fontSize ? opts.fontSize * opts.pixelRatio : 13 * opts.pixelRatio;\n  opts.title = assign({}, opts.title);\n  opts.subtitle = assign({}, opts.subtitle);\n  opts.duration = opts.duration ? opts.duration : 1000;\n  opts.yAxis = assign({}, {\n    gridType: 'solid',\n    dashLength: 4 * opts.pixelRatio },\n  opts.yAxis);\n  opts.xAxis = assign({}, {\n    rotateLabel: false,\n    type: 'calibration',\n    gridType: 'solid',\n    dashLength: 4 * opts.pixelRatio,\n    scrollAlign: 'left',\n    boundaryGap: 'center' },\n  opts.xAxis);\n  opts.legend = assign({}, {\n    show: true,\n    position: 'bottom',\n    float: 'center',\n    backgroundColor: 'rgba(0,0,0,0)',\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    padding: 5,\n    margin: 5,\n    itemGap: 10,\n    fontSize: opts.fontSize,\n    lineHeight: opts.fontSize,\n    fontColor: '#333333',\n    format: {},\n    hiddenColor: '#CECECE' },\n  opts.legend);\n  opts.legend.borderWidth = opts.legend.borderWidth * opts.pixelRatio;\n  opts.legend.itemGap = opts.legend.itemGap * opts.pixelRatio;\n  opts.legend.padding = opts.legend.padding * opts.pixelRatio;\n  opts.legend.margin = opts.legend.margin * opts.pixelRatio;\n  opts.extra = assign({}, opts.extra);\n  opts.rotate = opts.rotate ? true : false;\n  opts.animation = opts.animation ? true : false;\n\n  var config$$1 = JSON.parse(JSON.stringify(config));\n  config$$1.colors = opts.colors ? opts.colors : config$$1.colors;\n  config$$1.yAxisTitleWidth = opts.yAxis.disabled !== true && opts.yAxis.title ? config$$1.yAxisTitleWidth : 0;\n  if (opts.type == 'pie' || opts.type == 'ring') {\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.pie.labelWidth * opts.pixelRatio || config$$1.pieChartLinePadding * opts.pixelRatio;\n  }\n  if (opts.type == 'rose') {\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.rose.labelWidth * opts.pixelRatio || config$$1.pieChartLinePadding * opts.pixelRatio;\n  }\n  config$$1.pieChartTextPadding = opts.dataLabel === false ? 0 : config$$1.pieChartTextPadding * opts.pixelRatio;\n  config$$1.yAxisSplit = opts.yAxis.splitNumber ? opts.yAxis.splitNumber : config.yAxisSplit;\n\n  //屏幕旋转\n  config$$1.rotate = opts.rotate;\n  if (opts.rotate) {\n    var tempWidth = opts.width;\n    var tempHeight = opts.height;\n    opts.width = tempHeight;\n    opts.height = tempWidth;\n  }\n\n  //适配高分屏\n  opts.padding = opts.padding ? opts.padding : config$$1.padding;\n  for (var i = 0; i < 4; i++) {\n    opts.padding[i] *= opts.pixelRatio;\n  }\n  config$$1.yAxisWidth = config.yAxisWidth * opts.pixelRatio;\n  config$$1.xAxisHeight = config.xAxisHeight * opts.pixelRatio;\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    config$$1.xAxisHeight += 6 * opts.pixelRatio;\n  }\n  config$$1.xAxisLineHeight = config.xAxisLineHeight * opts.pixelRatio;\n  config$$1.legendHeight = config.legendHeight * opts.pixelRatio;\n  config$$1.fontSize = opts.fontSize;\n  config$$1.titleFontSize = config.titleFontSize * opts.pixelRatio;\n  config$$1.subtitleFontSize = config.subtitleFontSize * opts.pixelRatio;\n  config$$1.toolTipPadding = config.toolTipPadding * opts.pixelRatio;\n  config$$1.toolTipLineHeight = config.toolTipLineHeight * opts.pixelRatio;\n  config$$1.columePadding = config.columePadding * opts.pixelRatio;\n  opts.$this = opts.$this ? opts.$this : this;\n\n  this.context = uni.createCanvasContext(opts.canvasId, opts.$this);\n  /* 兼容原生H5\r\n                                                                     this.context = document.getElementById(opts.canvasId).getContext(\"2d\");\r\n                                                                     this.context.setStrokeStyle = function(e){ return this.strokeStyle=e; }\r\n                                                                     this.context.setLineWidth = function(e){ return this.lineWidth=e; }\r\n                                                                     this.context.setLineCap = function(e){ return this.lineCap=e; }\r\n                                                                     this.context.setFontSize = function(e){ return this.font=e+\"px sans-serif\"; }\r\n                                                                     this.context.setFillStyle = function(e){ return this.fillStyle=e; }\r\n                                                                     this.context.draw = function(){ }\r\n                                                                     */\n\n  opts.chartData = {};\n  this.event = new Event();\n  this.scrollOption = {\n    currentOffset: 0,\n    startTouchX: 0,\n    distance: 0,\n    lastMoveTime: 0 };\n\n\n  this.opts = opts;\n  this.config = config$$1;\n\n  drawCharts.call(this, opts.type, opts, config$$1, this.context);\n};\n\nCharts.prototype.updateData = function () {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  this.opts = assign({}, this.opts, data);\n  var scrollPosition = data.scrollPosition || 'current';\n  switch (scrollPosition) {\n    case 'current':\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\n      break;\n    case 'left':\n      this.opts._scrollDistance_ = 0;\n      this.scrollOption = {\n        currentOffset: 0,\n        startTouchX: 0,\n        distance: 0,\n        lastMoveTime: 0 };\n\n      break;\n    case 'right':\n      var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n      yAxisWidth = _calYAxisData.yAxisWidth;\n      this.config.yAxisWidth = yAxisWidth;\n      var offsetLeft = 0;\n      var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n      xAxisPoints = _getXAxisPoints0.xAxisPoints,\n      startX = _getXAxisPoints0.startX,\n      endX = _getXAxisPoints0.endX,\n      eachSpacing = _getXAxisPoints0.eachSpacing;\n      var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n      var screenWidth = endX - startX;\n      offsetLeft = screenWidth - totalWidth;\n      this.scrollOption = {\n        currentOffset: offsetLeft,\n        startTouchX: offsetLeft,\n        distance: 0,\n        lastMoveTime: 0 };\n\n      this.opts._scrollDistance_ = offsetLeft;\n      break;}\n\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\n\nCharts.prototype.zoom = function () {\n  var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.opts.xAxis.itemCount;\n  if (this.opts.enableScroll !== true) {\n    console.log(__f__('请启用滚动条后使用！', \" at components\\\\js_sdk\\\\u-charts\\\\u-charts\\\\u-charts.js:4431\"));\n    return;\n  }\n  //当前屏幕中间点\n  var centerPoint = Math.round(Math.abs(this.scrollOption.currentOffset) / this.opts.chartData.eachSpacing) + Math.round(\n  this.opts.xAxis.itemCount / 2);\n  this.opts.animation = false;\n  this.opts.xAxis.itemCount = val.itemCount;\n  //重新计算x轴偏移距离\n  var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n  yAxisWidth = _calYAxisData.yAxisWidth;\n  this.config.yAxisWidth = yAxisWidth;\n  var offsetLeft = 0;\n  var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n  xAxisPoints = _getXAxisPoints0.xAxisPoints,\n  startX = _getXAxisPoints0.startX,\n  endX = _getXAxisPoints0.endX,\n  eachSpacing = _getXAxisPoints0.eachSpacing;\n  var centerLeft = eachSpacing * centerPoint;\n  var screenWidth = endX - startX;\n  var MaxLeft = screenWidth - eachSpacing * (xAxisPoints.length - 1);\n  offsetLeft = screenWidth / 2 - centerLeft;\n  if (offsetLeft > 0) {\n    offsetLeft = 0;\n  }\n  if (offsetLeft < MaxLeft) {\n    offsetLeft = MaxLeft;\n  }\n  this.scrollOption = {\n    currentOffset: offsetLeft,\n    startTouchX: offsetLeft,\n    distance: 0,\n    lastMoveTime: 0 };\n\n  this.opts._scrollDistance_ = offsetLeft;\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\n\nCharts.prototype.stopAnimation = function () {\n  this.animationInstance && this.animationInstance.stop();\n};\n\nCharts.prototype.addEventListener = function (type, listener) {\n  this.event.addEventListener(type, listener);\n};\n\nCharts.prototype.getCurrentDataIndex = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose') {\n      return findPieChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.pieData);\n    } else if (this.opts.type === 'radar') {\n      return findRadarChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.radarData, this.opts.categories.length);\n    } else if (this.opts.type === 'funnel') {\n      return findFunnelChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.funnelData);\n    } else {\n      return findCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.xAxisPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\n    }\n  }\n  return -1;\n};\n\nCharts.prototype.getLegendDataIndex = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    return findLegendIndex({\n      x: _touches$.x,\n      y: _touches$.y },\n    this.opts.chartData.legendData);\n  }\n  return -1;\n};\n\nCharts.prototype.touchLegend = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    var index = this.getLegendDataIndex(e);\n    if (index >= 0) {\n      this.opts.series[index].show = !this.opts.series[index].show;\n      this.opts.animation = option.animation ? true : false;\n      drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n    }\n  }\n\n};\n\nCharts.prototype.showToolTip = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (!touches) {\n    console.log(__f__(\"touchError\", \" at components\\\\js_sdk\\\\u-charts\\\\u-charts\\\\u-charts.js:4557\"));\n  }\n  var _touches$ = getTouches(touches, this.opts, e);\n  var currentOffset = this.scrollOption.currentOffset;\n  var opts = assign({}, this.opts, {\n    _scrollDistance_: currentOffset,\n    animation: false });\n\n  if (this.opts.type === 'line' || this.opts.type === 'area' || this.opts.type === 'column') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getToolTipData(seriesData, this.opts.chartData.calPoints, index, this.opts.categories,\n        option),\n        textList = _getToolTipData.textList,\n        offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'mix') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getMixToolTipData = getMixToolTipData(seriesData, this.opts.chartData.calPoints, index, this.opts.categories,\n        option),\n        textList = _getMixToolTipData.textList,\n        offset = _getMixToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'candle') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getCandleToolTipData(this.opts.series[0].data, seriesData, this.opts.chartData.calPoints,\n        index, this.opts.categories, this.opts.extra.candle, option),\n        textList = _getToolTipData.textList,\n        offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = this.opts._series_[index];\n      var textList = [{\n        text: option.format ? option.format(seriesData) : seriesData.name + ': ' + seriesData.data,\n        color: seriesData.color }];\n\n      var offset = {\n        x: _touches$.x,\n        y: _touches$.y };\n\n      opts.tooltip = {\n        textList: textList,\n        offset: offset,\n        option: option,\n        index: index };\n\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'funnel') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = this.opts._series_[index];\n      var textList = [{\n        text: option.format ? option.format(seriesData) : seriesData.name + ': ' + seriesData.data, color: seriesData.color }];\n      var offset = {\n        x: _touches$.x,\n        y: _touches$.y };\n\n      opts.tooltip = {\n        textList: textList,\n        offset: offset,\n        option: option,\n        index: index };\n\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'radar') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var textList = seriesData.map(function (item) {\n          return {\n            text: option.format ? option.format(item) : item.name + ': ' + item.data,\n            color: item.color };\n\n        });\n        var offset = {\n          x: _touches$.x,\n          y: _touches$.y };\n\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n};\n\nCharts.prototype.translate = function (distance) {\n  this.scrollOption = {\n    currentOffset: distance,\n    startTouchX: distance,\n    distance: 0,\n    lastMoveTime: 0 };\n\n  var opts = assign({}, this.opts, {\n    _scrollDistance_: distance,\n    animation: false });\n\n  drawCharts.call(this, this.opts.type, opts, this.config, this.context);\n};\n\nCharts.prototype.scrollStart = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  var _touches$ = getTouches(touches, this.opts, e);\n  if (touches && this.opts.enableScroll === true) {\n    this.scrollOption.startTouchX = _touches$.x;\n  }\n};\n\nCharts.prototype.scroll = function (e) {\n  if (this.scrollOption.lastMoveTime === 0) {\n    this.scrollOption.lastMoveTime = Date.now();\n  }\n  var Limit = this.opts.extra.touchMoveLimit || 20;\n  var currMoveTime = Date.now();\n  var duration = currMoveTime - this.scrollOption.lastMoveTime;\n  if (duration < Math.floor(1000 / Limit)) return;\n  this.scrollOption.lastMoveTime = currMoveTime;\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches && this.opts.enableScroll === true) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    var _distance;\n    _distance = _touches$.x - this.scrollOption.startTouchX;\n    var currentOffset = this.scrollOption.currentOffset;\n    var validDistance = calValidDistance(currentOffset + _distance, this.opts.chartData, this.config, this.opts);\n    this.scrollOption.distance = _distance = validDistance - currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset + _distance,\n      animation: false });\n\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n    return currentOffset + _distance;\n  }\n};\n\nCharts.prototype.scrollEnd = function (e) {\n  if (this.opts.enableScroll === true) {\n    var _scrollOption = this.scrollOption,\n    currentOffset = _scrollOption.currentOffset,\n    distance = _scrollOption.distance;\n    this.scrollOption.currentOffset = currentOffset + distance;\n    this.scrollOption.distance = 0;\n  }\n};\nif ( true && typeof module.exports === \"object\") {\n  module.exports = Charts;\n  //export default Charts;//建议使用nodejs的module导出方式，如报错请使用export方式导出\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 20)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///127\n");

/***/ }),

/***/ 128:
/*!**********************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/utils/tools.2.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.parseTime1 = parseTime1;exports.parseJavaTime = parseJavaTime;exports.formatTime = formatTime;exports.getQueryObject = getQueryObject;exports.byteLength = byteLength;exports.cleanArray = cleanArray;exports.param = param;exports.param2Obj = param2Obj;exports.html2Text = html2Text;exports.objectMerge = objectMerge;exports.toggleClass = toggleClass;exports.getTime = getTime;exports.debounce = debounce;exports.deepClone = deepClone;exports.uniqueArr = uniqueArr;exports.createUniqueString = createUniqueString;exports.hasClass = hasClass;exports.addClass = addClass;exports.removeClass = removeClass; /**\r\nreated by PanJiaChen on 16/11/18.\r\nn\n/**\r\narse the time to string\r\nparam {(Object|string|number)} time\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 * @param {string} cFormat\r\nreturns {string}\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 */\nfunction parseTime1(time, cFormat) {\n  if (arguments.length === 0) {\n    return null;\n  }\n  var format = cFormat || '{y}-{m}-{d} {H}:{i}:{s}';\n  var date;\n  var step = -1;\n  if (typeof time === 'object') {\n    date = time;\n  } else {\n    if (typeof time === 'string' && /^[0-9]+$/.test(time)) {\n      time = parseInt(time);\n    }\n    if (typeof time === 'number' && time.toString().length === 10) {\n      time = time * 1000;\n    }\n    if (typeof time === 'string' && uni.getSystemInfoSync().platform === 'ios') {\n      var a = time.split(/[^0-9]/);\n      var d;\n      if (a.length > 3) {\n        d = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);\n      } else\n      {\n        d = new Date(a[0], a[1] - 1, a[2]);\n      }\n      time = d.getTime();\n      if (a.length === 8 && a[7] === '0000') {\n        time = time + 3600 * 1000 * 8;\n      }\n    }\n    date = new Date(time);\n  }\n\n  var formatObj =\n  {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate() + 1,\n    h: date.getHours(),\n    H: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    e: date.getDay(),\n    a: date.getHours() };\n\n  var time_str = format.replace(/{(y|m|d|h|H|i|s|e|a)+}/g, function (result, key) {\n    var value = formatObj[key];\n    // Note: getDay() returns 0 on Sunday\n    if (key === 'e') {return ['日', '一', '二', '三', '四', '五', '六'][value];}\n    if (key === 'a') {\n      if (value > 12) {return '下午';} else {return '上午';}\n    }\n    if (key === 'h') {\n      if (value > 12) {value = value - 12;}\n    }\n    if (result.length > 0 && value < 10) {\n      value = '0' + value;\n    }\n    return value || 0;\n  });\n  return time_str;\n}\n\n/**\r\n   * 将\"yyyy-mm-ddTHH:MM:ss.000+0000\"格式的字符串，转化为一个Date对象\r\n   * Parse the string to time\r\n   * @param str \r\n   * @returns Date\r\n   */\nfunction parseJavaTime(str) {\n  if (uni.getSystemInfoSync().platform === 'ios') {\n    var a = str.split(/[^0-9]/);\n    var d;\n    if (a.length > 3) {\n      d = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);\n    } else\n    {\n      d = new Date(a[0], a[1] - 1, a[2]);\n    }\n    var time = d.getTime();\n    if (a.length === 8 && a[7] === '0000') {\n      time = time + 3600 * 1000 * 8;\n    }\n    return new Date(time);\n  } else\n  {\n    return new Date(str);\n  }\n}\n\n/**\r\n   * @param {number} time\r\n   * @param {string} option\r\n   * @returns {string}\r\n   */\nfunction formatTime(time, option) {\n  if (('' + time).length === 10) {\n    time = parseInt(time) * 1000;\n  } else {\n    time = +time;\n  }\n  var d = new Date(time);\n  var now = Date.now();\n\n  var diff = (now - d) / 1000;\n\n  if (diff < 30) {\n    return '刚刚';\n  } else if (diff < 3600) {\n    // less 1 hour\n    return Math.ceil(diff / 60) + '分钟前';\n  } else if (diff < 3600 * 24) {\n    return Math.ceil(diff / 3600) + '小时前';\n  } else if (diff < 3600 * 24 * 2) {\n    return '1天前';\n  }\n  if (option) {\n    return parseTime(time, option);\n  } else {\n    return (\n      d.getMonth() +\n      1 +\n      '月' +\n      d.getDate() +\n      '日' +\n      d.getHours() +\n      '时' +\n      d.getMinutes() +\n      '分');\n\n  }\n}\n\n/**\r\n   * @param {string} url\r\n   * @returns {Object}\r\n   */\nfunction getQueryObject(url) {\n  url = url == null ? window.location.href : url;\n  var search = url.substring(url.lastIndexOf('?') + 1);\n  var obj = {};\n  var reg = /([^?&=]+)=([^?&=]*)/g;\n  search.replace(reg, function (rs, $1, $2) {\n    var name = decodeURIComponent($1);\n    var val = decodeURIComponent($2);\n    val = String(val);\n    obj[name] = val;\n    return rs;\n  });\n  return obj;\n}\n\n/**\r\n   * @param {string} input value\r\n   * @returns {number} output value\r\n   */\nfunction byteLength(str) {\n  // returns the byte length of an utf8 string\n  var s = str.length;\n  for (var i = str.length - 1; i >= 0; i--) {\n    var code = str.charCodeAt(i);\n    if (code > 0x7f && code <= 0x7ff) s++;else\n    if (code > 0x7ff && code <= 0xffff) s += 2;\n    if (code >= 0xDC00 && code <= 0xDFFF) i--;\n  }\n  return s;\n}\n\n/**\r\n   * @param {Array} actual\r\n   * @returns {Array}\r\n   */\nfunction cleanArray(actual) {\n  var newArray = [];\n  for (var i = 0; i < actual.length; i++) {\n    if (actual[i]) {\n      newArray.push(actual[i]);\n    }\n  }\n  return newArray;\n}\n\n/**\r\n   * @param {Object} json\r\n   * @returns {Array}\r\n   */\nfunction param(json) {\n  if (!json) return '';\n  return cleanArray(\n  Object.keys(json).map(function (key) {\n    if (json[key] === undefined) return '';\n    return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);\n  })).\n  join('&');\n}\n\n/**\r\n   * @param {string} url\r\n   * @returns {Object}\r\n   */\nfunction param2Obj(url) {\n  var search = url.split('?')[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse(\n  '{\"' +\n  decodeURIComponent(search).\n  replace(/\"/g, '\\\\\"').\n  replace(/&/g, '\",\"').\n  replace(/=/g, '\":\"').\n  replace(/\\+/g, ' ') +\n  '\"}');\n\n}\n\n/**\r\n   * @param {string} val\r\n   * @returns {string}\r\n   */\nfunction html2Text(val) {\n  var div = document.createElement('div');\n  div.innerHTML = val;\n  return div.textContent || div.innerText;\n}\n\n/**\r\n   * Merges two objects, giving the last one precedence\r\n   * @param {Object} target\r\n   * @param {(Object|Array)} source\r\n   * @returns {Object}\r\n   */\nfunction objectMerge(target, source) {\n  if (typeof target !== 'object') {\n    target = {};\n  }\n  if (Array.isArray(source)) {\n    return source.slice();\n  }\n  Object.keys(source).forEach(function (property) {\n    var sourceProperty = source[property];\n    if (typeof sourceProperty === 'object') {\n      target[property] = objectMerge(target[property], sourceProperty);\n    } else {\n      target[property] = sourceProperty;\n    }\n  });\n  return target;\n}\n\n/**\r\n   * @param {HTMLElement} element\r\n   * @param {string} className\r\n   */\nfunction toggleClass(element, className) {\n  if (!element || !className) {\n    return;\n  }\n  var classString = element.className;\n  var nameIndex = classString.indexOf(className);\n  if (nameIndex === -1) {\n    classString += '' + className;\n  } else {\n    classString =\n    classString.substr(0, nameIndex) +\n    classString.substr(nameIndex + className.length);\n  }\n  element.className = classString;\n}\n\n/**\r\n   * @param {string} type\r\n   * @returns {Date}\r\n   */\nfunction getTime(type) {\n  if (type === 'start') {\n    return new Date().getTime() - 3600 * 1000 * 24 * 90;\n  } else {\n    return new Date(new Date().toDateString());\n  }\n}\n\n/**\r\n   * @param {Function} func\r\n   * @param {number} wait\r\n   * @param {boolean} immediate\r\n   * @return {*}\r\n   */\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function later() {\n    // 据上一次触发时间间隔\n    var last = +new Date() - timestamp;\n\n    // 上次被包装函数被调用时间间隔 last 小于设定时间间隔 wait\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n    context = this;\n    timestamp = +new Date();\n    var callNow = immediate && !timeout;\n    // 如果延时不存在，重新设定延时\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n\n/**\r\n   * This is just a simple version of deep copy\r\n   * Has a lot of edge cases bug\r\n   * If you want to use a perfect deep copy, use lodash's _.cloneDeep\r\n   * @param {Object} source\r\n   * @returns {Object}\r\n   */\nfunction deepClone(source) {\n  if (!source && typeof source !== 'object') {\n    throw new Error('error arguments', 'deepClone');\n  }\n  var targetObj = source.constructor === Array ? [] : {};\n  Object.keys(source).forEach(function (keys) {\n    if (source[keys] && typeof source[keys] === 'object') {\n      targetObj[keys] = deepClone(source[keys]);\n    } else {\n      targetObj[keys] = source[keys];\n    }\n  });\n  return targetObj;\n}\n\n/**\r\n   * @param {Array} arr\r\n   * @returns {Array}\r\n   */\nfunction uniqueArr(arr) {\n  return Array.from(new Set(arr));\n}\n\n/**\r\n   * @returns {string}\r\n   */\nfunction createUniqueString() {\n  var timestamp = +new Date() + '';\n  var randomNum = parseInt((1 + Math.random()) * 65536) + '';\n  return (+(randomNum + timestamp)).toString(32);\n}\n\n/**\r\n   * Check if an element has a class\r\n   * @param {HTMLElement} elm\r\n   * @param {string} cls\r\n   * @returns {boolean}\r\n   */\nfunction hasClass(ele, cls) {\n  return !!ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\n\n/**\r\n   * Add class to element\r\n   * @param {HTMLElement} elm\r\n   * @param {string} cls\r\n   */\nfunction addClass(ele, cls) {\n  if (!hasClass(ele, cls)) ele.className += ' ' + cls;\n}\n\n/**\r\n   * Remove class from element\r\n   * @param {HTMLElement} elm\r\n   * @param {string} cls\r\n   */\nfunction removeClass(ele, cls) {\n  if (hasClass(ele, cls)) {\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n    ele.className = ele.className.replace(reg, ' ');\n  }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///128\n");

/***/ }),

/***/ 13:
/*!********************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/utils/tools.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.parseTime = parseTime;exports.parseJavaTime = parseJavaTime;exports.formatTime = formatTime;exports.getQueryObject = getQueryObject;exports.byteLength = byteLength;exports.cleanArray = cleanArray;exports.param = param;exports.param2Obj = param2Obj;exports.html2Text = html2Text;exports.objectMerge = objectMerge;exports.toggleClass = toggleClass;exports.getTime = getTime;exports.debounce = debounce;exports.deepClone = deepClone;exports.uniqueArr = uniqueArr;exports.createUniqueString = createUniqueString;exports.hasClass = hasClass;exports.addClass = addClass;exports.removeClass = removeClass; /**\r\nreated by PanJiaChen on 16/11/18.\r\nn\n/**\r\narse the time to string\r\nparam {(Object|string|number)} time\r\nparam {string} cFormat\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @returns {string}\r\nnfunction parseTime(time, cFormat) {\n  if (arguments.length === 0) {\n    return null;\n  }\n  var format = cFormat || '{y}-{m}-{d} {H}:{i}:{s}';\n  var date;\n  var step = -1;\n  if (typeof time === 'object') {\n    date = time;\n  } else {\n    if (typeof time === 'string' && /^[0-9]+$/.test(time)) {\n      time = parseInt(time);\n    }\n    if (typeof time === 'number' && time.toString().length === 10) {\n      time = time * 1000;\n    }\n    if (typeof time === 'string' && uni.getSystemInfoSync().platform === 'ios') {\n      var a = time.split(/[^0-9]/);\n      var d;\n      if (a.length > 3) {\n        d = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);\n      } else\n      {\n        d = new Date(a[0], a[1] - 1, a[2]);\n      }\n      time = d.getTime();\n      if (a.length === 8 && a[7] === '0000') {\n        time = time + 3600 * 1000 * 8;\n      }\n    }\n    date = new Date(time);\n  }\n\n  var formatObj =\n  {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    H: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    e: date.getDay(),\n    a: date.getHours() };\n\n  var time_str = format.replace(/{(y|m|d|h|H|i|s|e|a)+}/g, function (result, key) {\n    var value = formatObj[key];\n    // Note: getDay() returns 0 on Sunday\n    if (key === 'e') {return ['日', '一', '二', '三', '四', '五', '六'][value];}\n    if (key === 'a') {\n      if (value > 12) {return '下午';} else {return '上午';}\n    }\n    if (key === 'h') {\n      if (value > 12) {value = value - 12;}\n    }\n    if (result.length > 0 && value < 10) {\n      value = '0' + value;\n    }\n    return value || 0;\n  });\n  return time_str;\n}\n\n/**\r\n   * 将\"yyyy-mm-ddTHH:MM:ss.000+0000\"格式的字符串，转化为一个Date对象\r\n   * Parse the string to time\r\n   * @param str \r\n   * @returns Date\r\n   */\nfunction parseJavaTime(str) {\n  if (uni.getSystemInfoSync().platform === 'ios') {\n    var a = str.split(/[^0-9]/);\n    var d;\n    if (a.length > 3) {\n      d = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);\n    } else\n    {\n      d = new Date(a[0], a[1] - 1, a[2]);\n    }\n    var time = d.getTime();\n    if (a.length === 8 && a[7] === '0000') {\n      time = time + 3600 * 1000 * 8;\n    }\n    return new Date(time);\n  } else\n  {\n    return new Date(str);\n  }\n}\n\n/**\r\n   * @param {number} time\r\n   * @param {string} option\r\n   * @returns {string}\r\n   */\nfunction formatTime(time, option) {\n  if (('' + time).length === 10) {\n    time = parseInt(time) * 1000;\n  } else {\n    time = +time;\n  }\n  var d = new Date(time);\n  var now = Date.now();\n\n  var diff = (now - d) / 1000;\n\n  if (diff < 30) {\n    return '刚刚';\n  } else if (diff < 3600) {\n    // less 1 hour\n    return Math.ceil(diff / 60) + '分钟前';\n  } else if (diff < 3600 * 24) {\n    return Math.ceil(diff / 3600) + '小时前';\n  } else if (diff < 3600 * 24 * 2) {\n    return '1天前';\n  }\n  if (option) {\n    return parseTime(time, option);\n  } else {\n    return (\n      d.getMonth() +\n      1 +\n      '月' +\n      d.getDate() +\n      '日' +\n      d.getHours() +\n      '时' +\n      d.getMinutes() +\n      '分');\n\n  }\n}\n\n/**\r\n   * @param {string} url\r\n   * @returns {Object}\r\n   */\nfunction getQueryObject(url) {\n  url = url == null ? window.location.href : url;\n  var search = url.substring(url.lastIndexOf('?') + 1);\n  var obj = {};\n  var reg = /([^?&=]+)=([^?&=]*)/g;\n  search.replace(reg, function (rs, $1, $2) {\n    var name = decodeURIComponent($1);\n    var val = decodeURIComponent($2);\n    val = String(val);\n    obj[name] = val;\n    return rs;\n  });\n  return obj;\n}\n\n/**\r\n   * @param {string} input value\r\n   * @returns {number} output value\r\n   */\nfunction byteLength(str) {\n  // returns the byte length of an utf8 string\n  var s = str.length;\n  for (var i = str.length - 1; i >= 0; i--) {\n    var code = str.charCodeAt(i);\n    if (code > 0x7f && code <= 0x7ff) s++;else\n    if (code > 0x7ff && code <= 0xffff) s += 2;\n    if (code >= 0xDC00 && code <= 0xDFFF) i--;\n  }\n  return s;\n}\n\n/**\r\n   * @param {Array} actual\r\n   * @returns {Array}\r\n   */\nfunction cleanArray(actual) {\n  var newArray = [];\n  for (var i = 0; i < actual.length; i++) {\n    if (actual[i]) {\n      newArray.push(actual[i]);\n    }\n  }\n  return newArray;\n}\n\n/**\r\n   * @param {Object} json\r\n   * @returns {Array}\r\n   */\nfunction param(json) {\n  if (!json) return '';\n  return cleanArray(\n  Object.keys(json).map(function (key) {\n    if (json[key] === undefined) return '';\n    return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);\n  })).\n  join('&');\n}\n\n/**\r\n   * @param {string} url\r\n   * @returns {Object}\r\n   */\nfunction param2Obj(url) {\n  var search = url.split('?')[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse(\n  '{\"' +\n  decodeURIComponent(search).\n  replace(/\"/g, '\\\\\"').\n  replace(/&/g, '\",\"').\n  replace(/=/g, '\":\"').\n  replace(/\\+/g, ' ') +\n  '\"}');\n\n}\n\n/**\r\n   * @param {string} val\r\n   * @returns {string}\r\n   */\nfunction html2Text(val) {\n  var div = document.createElement('div');\n  div.innerHTML = val;\n  return div.textContent || div.innerText;\n}\n\n/**\r\n   * Merges two objects, giving the last one precedence\r\n   * @param {Object} target\r\n   * @param {(Object|Array)} source\r\n   * @returns {Object}\r\n   */\nfunction objectMerge(target, source) {\n  if (typeof target !== 'object') {\n    target = {};\n  }\n  if (Array.isArray(source)) {\n    return source.slice();\n  }\n  Object.keys(source).forEach(function (property) {\n    var sourceProperty = source[property];\n    if (typeof sourceProperty === 'object') {\n      target[property] = objectMerge(target[property], sourceProperty);\n    } else {\n      target[property] = sourceProperty;\n    }\n  });\n  return target;\n}\n\n/**\r\n   * @param {HTMLElement} element\r\n   * @param {string} className\r\n   */\nfunction toggleClass(element, className) {\n  if (!element || !className) {\n    return;\n  }\n  var classString = element.className;\n  var nameIndex = classString.indexOf(className);\n  if (nameIndex === -1) {\n    classString += '' + className;\n  } else {\n    classString =\n    classString.substr(0, nameIndex) +\n    classString.substr(nameIndex + className.length);\n  }\n  element.className = classString;\n}\n\n/**\r\n   * @param {string} type\r\n   * @returns {Date}\r\n   */\nfunction getTime(type) {\n  if (type === 'start') {\n    return new Date().getTime() - 3600 * 1000 * 24 * 90;\n  } else {\n    return new Date(new Date().toDateString());\n  }\n}\n\n/**\r\n   * @param {Function} func\r\n   * @param {number} wait\r\n   * @param {boolean} immediate\r\n   * @return {*}\r\n   */\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function later() {\n    // 据上一次触发时间间隔\n    var last = +new Date() - timestamp;\n\n    // 上次被包装函数被调用时间间隔 last 小于设定时间间隔 wait\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n    context = this;\n    timestamp = +new Date();\n    var callNow = immediate && !timeout;\n    // 如果延时不存在，重新设定延时\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n\n/**\r\n   * This is just a simple version of deep copy\r\n   * Has a lot of edge cases bug\r\n   * If you want to use a perfect deep copy, use lodash's _.cloneDeep\r\n   * @param {Object} source\r\n   * @returns {Object}\r\n   */\nfunction deepClone(source) {\n  if (!source && typeof source !== 'object') {\n    throw new Error('error arguments', 'deepClone');\n  }\n  var targetObj = source.constructor === Array ? [] : {};\n  Object.keys(source).forEach(function (keys) {\n    if (source[keys] && typeof source[keys] === 'object') {\n      targetObj[keys] = deepClone(source[keys]);\n    } else {\n      targetObj[keys] = source[keys];\n    }\n  });\n  return targetObj;\n}\n\n/**\r\n   * @param {Array} arr\r\n   * @returns {Array}\r\n   */\nfunction uniqueArr(arr) {\n  return Array.from(new Set(arr));\n}\n\n/**\r\n   * @returns {string}\r\n   */\nfunction createUniqueString() {\n  var timestamp = +new Date() + '';\n  var randomNum = parseInt((1 + Math.random()) * 65536) + '';\n  return (+(randomNum + timestamp)).toString(32);\n}\n\n/**\r\n   * Check if an element has a class\r\n   * @param {HTMLElement} elm\r\n   * @param {string} cls\r\n   * @returns {boolean}\r\n   */\nfunction hasClass(ele, cls) {\n  return !!ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\n\n/**\r\n   * Add class to element\r\n   * @param {HTMLElement} elm\r\n   * @param {string} cls\r\n   */\nfunction addClass(ele, cls) {\n  if (!hasClass(ele, cls)) ele.className += ' ' + cls;\n}\n\n/**\r\n   * Remove class from element\r\n   * @param {HTMLElement} elm\r\n   * @param {string} cls\r\n   */\nfunction removeClass(ele, cls) {\n  if (hasClass(ele, cls)) {\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n    ele.className = ele.className.replace(reg, ' ');\n  }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 170:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 171);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDhCQUFxQiIsImZpbGUiOiIxNzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///170\n");

/***/ }),

/***/ 171:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 172);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG9CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIxNzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xufSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///171\n");

/***/ }),

/***/ 172:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///172\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 20:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n    return v;\n  });\n  var msg = '';\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJhcmdzIiwibXNncyIsIm1hcCIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJwb3AiLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQU1DLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVY7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFYyxTQUFTQyxTQUFULEdBQTZCLG1DQUFOQyxJQUFNLG9EQUFOQSxJQUFNO0FBQzFDLE1BQU1DLElBQUksR0FBR0QsSUFBSSxDQUFDRSxHQUFMLENBQVMsVUFBQ1gsQ0FBRCxFQUFPO0FBQzNCLFFBQU1ZLElBQUksR0FBR1YsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQWI7QUFDQSxRQUFJWSxJQUFJLENBQUNDLFdBQUwsT0FBdUIsaUJBQTNCLEVBQThDO0FBQzVDLFVBQUk7QUFDRmIsU0FBQyxHQUFHLHFCQUFxQmMsSUFBSSxDQUFDQyxTQUFMLENBQWVmLENBQWYsQ0FBckIsR0FBeUMsZ0JBQTdDO0FBQ0QsT0FGRCxDQUVFLE9BQU9nQixDQUFQLEVBQVU7QUFDVmhCLFNBQUMsR0FBRyxpQkFBSjtBQUNEO0FBQ0YsS0FORCxNQU1PO0FBQ0wsVUFBSUEsQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDZEEsU0FBQyxHQUFHLFlBQUo7QUFDRCxPQUZELE1BRU8sSUFBSUEsQ0FBQyxLQUFLaUIsU0FBVixFQUFxQjtBQUMxQmpCLFNBQUMsR0FBRyxpQkFBSjtBQUNELE9BRk0sTUFFQTtBQUNMLFlBQU1rQixLQUFLLEdBQUduQixLQUFLLENBQUNDLENBQUQsQ0FBTCxDQUFTbUIsV0FBVCxFQUFkO0FBQ0EsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3Q2xCLFdBQUMsR0FBRyxjQUFja0IsS0FBZCxHQUFzQixLQUF0QixHQUE4QmxCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDa0IsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTGxCLFdBQUMsR0FBR29CLE1BQU0sQ0FBQ3BCLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFdBQU9BLENBQVA7QUFDRCxHQXZCWSxDQUFiO0FBd0JBLE1BQUlxQixHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUlYLElBQUksQ0FBQ0gsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CLFFBQU1lLE9BQU8sR0FBR1osSUFBSSxDQUFDYSxHQUFMLEVBQWhCO0FBQ0FGLE9BQUcsR0FBR1gsSUFBSSxDQUFDYyxJQUFMLENBQVUsYUFBVixDQUFOO0FBQ0EsUUFBSUYsT0FBTyxDQUFDRyxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSixTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNMRCxPQUFHLEdBQUdYLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDtBQUNELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgY29uc3QgcyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gIHJldHVybiBzLnN1YnN0cmluZyg4LCBzLmxlbmd0aCAtIDEpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvZyAoLi4uYXJncykge1xyXG4gIGNvbnN0IG1zZ3MgPSBhcmdzLm1hcCgodikgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gICAgaWYgKHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ1tvYmplY3Qgb2JqZWN0XScpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2ID0gJy0tLUJFR0lOOkpTT04tLS0nICsgSlNPTi5zdHJpbmdpZnkodikgKyAnLS0tRU5EOkpTT04tLS0nXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB2ID0gJ1tvYmplY3Qgb2JqZWN0XSdcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHYgPT09IG51bGwpIHtcclxuICAgICAgICB2ID0gJy0tLU5VTEwtLS0nXHJcbiAgICAgIH0gZWxzZSBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdiA9ICctLS1VTkRFRklORUQtLS0nXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcbiAgICAgICAgaWYgKHZUeXBlID09PSAnTlVNQkVSJyB8fCB2VHlwZSA9PT0gJ0JPT0xFQU4nKSB7XHJcbiAgICAgICAgICB2ID0gJy0tLUJFR0lOOicgKyB2VHlwZSArICctLS0nICsgdiArICctLS1FTkQ6JyArIHZUeXBlICsgJy0tLSdcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdiA9IFN0cmluZyh2KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZcclxuICB9KVxyXG4gIGxldCBtc2cgPSAnJ1xyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIGNvbnN0IGxhc3RNc2cgPSBtc2dzLnBvcCgpXHJcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcclxuICAgIGlmIChsYXN0TXNnLmluZGV4T2YoJyBhdCAnKSA9PT0gMCkge1xyXG4gICAgICBtc2cgKz0gbGFzdE1zZ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbXNnICs9ICctLS1DT01NQS0tLScgKyBsYXN0TXNnXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIG1zZyA9IG1zZ3NbMF1cclxuICB9XHJcbiAgcmV0dXJuIG1zZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ }),

/***/ 21:
/*!********************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/api/deliver.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.getDeliveryOrder = getDeliveryOrder;exports.fetchPendingDelivery = fetchPendingDelivery;exports.countPendingDelivery = countPendingDelivery;exports.fetchDeliveryItem = fetchDeliveryItem;exports.loadItem = loadItem;var _interface = _interopRequireDefault(__webpack_require__(/*! ./interface */ 22));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction getDeliveryOrder(query) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/delivery-order/{deliveryOrderId}',\n    method: 'GET',\n    data: query });\n\n}\n\nfunction fetchPendingDelivery(query) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/delivery-order/list-pending-delivery-order',\n    method: 'GET',\n    data: query });\n\n}\n\nfunction countPendingDelivery() {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/delivery-order/count-pending-delivery-order',\n    method: 'GET' });\n\n}\n\nfunction fetchDeliveryItem(query) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/delivery-order-item/{deliveryOrderId}/list',\n    method: 'GET',\n    data: query });\n\n}\n\nfunction loadItem(data) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/delivery-order-item/load-item',\n    method: 'POST',\n    data: { data: data } });\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2FwaS9kZWxpdmVyLmpzIl0sIm5hbWVzIjpbImdldERlbGl2ZXJ5T3JkZXIiLCJxdWVyeSIsImh0dHAiLCJyZXF1ZXN0IiwidXJsIiwibWV0aG9kIiwiZGF0YSIsImZldGNoUGVuZGluZ0RlbGl2ZXJ5IiwiY291bnRQZW5kaW5nRGVsaXZlcnkiLCJmZXRjaERlbGl2ZXJ5SXRlbSIsImxvYWRJdGVtIl0sIm1hcHBpbmdzIjoiNFJBQUEsb0Y7O0FBRU8sU0FBU0EsZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDO0FBQ3RDLFNBQU9DLG1CQUFLQyxPQUFMLENBQWE7QUFDbEJDLE9BQUcsRUFBRSx1REFEYTtBQUVsQkMsVUFBTSxFQUFFLEtBRlU7QUFHcEJDLFFBQUksRUFBRUwsS0FIYyxFQUFiLENBQVA7O0FBS0Q7O0FBRU0sU0FBU00sb0JBQVQsQ0FBOEJOLEtBQTlCLEVBQXFDO0FBQzFDLFNBQU9DLG1CQUFLQyxPQUFMLENBQWE7QUFDbEJDLE9BQUcsRUFBRSxpRUFEYTtBQUVsQkMsVUFBTSxFQUFFLEtBRlU7QUFHcEJDLFFBQUksRUFBRUwsS0FIYyxFQUFiLENBQVA7O0FBS0Q7O0FBRU0sU0FBU08sb0JBQVQsR0FBZ0M7QUFDckMsU0FBT04sbUJBQUtDLE9BQUwsQ0FBYTtBQUNsQkMsT0FBRyxFQUFFLGtFQURhO0FBRWxCQyxVQUFNLEVBQUUsS0FGVSxFQUFiLENBQVA7O0FBSUQ7O0FBRU0sU0FBU0ksaUJBQVQsQ0FBMkJSLEtBQTNCLEVBQWtDO0FBQ3ZDLFNBQU9DLG1CQUFLQyxPQUFMLENBQWE7QUFDbEJDLE9BQUcsRUFBRSxpRUFEYTtBQUVsQkMsVUFBTSxFQUFFLEtBRlU7QUFHcEJDLFFBQUksRUFBRUwsS0FIYyxFQUFiLENBQVA7O0FBS0Q7O0FBRU0sU0FBU1MsUUFBVCxDQUFrQkosSUFBbEIsRUFBd0I7QUFDN0IsU0FBT0osbUJBQUtDLE9BQUwsQ0FBYTtBQUNsQkMsT0FBRyxFQUFFLG9EQURhO0FBRWxCQyxVQUFNLEVBQUUsTUFGVTtBQUdwQkMsUUFBSSxFQUFFLEVBQUVBLElBQUksRUFBSkEsSUFBRixFQUhjLEVBQWIsQ0FBUDs7QUFLRCIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwIGZyb20gJy4vaW50ZXJmYWNlJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERlbGl2ZXJ5T3JkZXIocXVlcnkpIHtcclxuICByZXR1cm4gaHR0cC5yZXF1ZXN0KHtcclxuICAgIHVybDogJy9hcGkvdjEvc3VwcGx5LWNoYWluL2RlbGl2ZXJ5LW9yZGVyL3tkZWxpdmVyeU9yZGVySWR9JyxcclxuICAgIG1ldGhvZDogJ0dFVCcsXHJcblx0XHRkYXRhOiBxdWVyeVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaFBlbmRpbmdEZWxpdmVyeShxdWVyeSkge1xyXG4gIHJldHVybiBodHRwLnJlcXVlc3Qoe1xyXG4gICAgdXJsOiAnL2FwaS92MS9zdXBwbHktY2hhaW4vZGVsaXZlcnktb3JkZXIvbGlzdC1wZW5kaW5nLWRlbGl2ZXJ5LW9yZGVyJyxcclxuICAgIG1ldGhvZDogJ0dFVCcsXHJcblx0XHRkYXRhOiBxdWVyeVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudFBlbmRpbmdEZWxpdmVyeSgpIHtcclxuICByZXR1cm4gaHR0cC5yZXF1ZXN0KHtcclxuICAgIHVybDogJy9hcGkvdjEvc3VwcGx5LWNoYWluL2RlbGl2ZXJ5LW9yZGVyL2NvdW50LXBlbmRpbmctZGVsaXZlcnktb3JkZXInLFxyXG4gICAgbWV0aG9kOiAnR0VUJ1xyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaERlbGl2ZXJ5SXRlbShxdWVyeSkge1xyXG4gIHJldHVybiBodHRwLnJlcXVlc3Qoe1xyXG4gICAgdXJsOiAnL2FwaS92MS9zdXBwbHktY2hhaW4vZGVsaXZlcnktb3JkZXItaXRlbS97ZGVsaXZlcnlPcmRlcklkfS9saXN0JyxcclxuICAgIG1ldGhvZDogJ0dFVCcsXHJcblx0XHRkYXRhOiBxdWVyeVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkSXRlbShkYXRhKSB7XHJcbiAgcmV0dXJuIGh0dHAucmVxdWVzdCh7XHJcbiAgICB1cmw6ICcvYXBpL3YxL3N1cHBseS1jaGFpbi9kZWxpdmVyeS1vcmRlci1pdGVtL2xvYWQtaXRlbScsXHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuXHRcdGRhdGE6IHsgZGF0YSB9XHJcbiAgfSlcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n");

/***/ }),

/***/ 22:
/*!**********************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/api/interface.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _auth = __webpack_require__(/*! ../auth */ 11);function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} /**\r\n通用uni-app网络请求\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 * 基于 Promise 对象实现更简单的 request 使用方式，支持请求和响应拦截\r\nr\n开放的接口\r\nimport http from './interface'\r\nr\nhttp.config.baseUrl = \"http://localhost:8080/api/\"\r\nr\nhttp.request(url:'user/list',method:'GET').then((res)=>{\r\ntconsole.log(JSON.stringify(res))\r\n})\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    http.get('user/list').then((res)=>{\r\ntconsole.log(JSON.stringify(res))\r\n})\r\nhttp.get('user/list', {status: 1}).then((res)=>{\r\ntconsole.log(JSON.stringify(res))\r\n})\r\nhttp.post('user', {id:1, status: 1}).then((res)=>{\r\ntconsole.log(JSON.stringify(res))\r\n})\r\nhttp.put('user/1', {status: 2}).then((res)=>{\r\ntconsole.log(JSON.stringify(res))\r\n})\r\nhttp.delete('user/1').then((res)=>{\r\ntconsole.log(JSON.stringify(res))\r\n}) \r\nr\nvar preBaseUrl = ''; // uEnvDev\nif (true) {// preBaseUrl = 'http://192.168.19.130:9091';\n  preBaseUrl = 'https://qasc.tomatogo365.com';} // uEnvProd\nif (false) {}var _default = { config: { baseUrl: preBaseUrl, header: _defineProperty({ 'Content-Type': 'application/json;charset=UTF-8' }, \"Content-Type\", 'application/x-www-form-urlencoded'), data: {}, method: \"GET\", dataType: \"json\", /* 如设为json，会对返回的数据做一次 JSON.parse */responseType: \"text\", success: function success() {}, fail: function fail() {}, complete: function complete() {} }, interceptor: { request: null, response: null }, request: function request(options) {var _this = this;if (!options) {options = {};}var url = options.url;if (url.match(new RegExp('{.*}', 'i'))) {var params = options.data;if (typeof params === 'string' || typeof params === 'number') {url = url.replace(new RegExp('{.*}', 'i'), params);} else {var _arr = Object.entries(params);for (var _i = 0; _i < _arr.length; _i++) {var _arr$_i = _slicedToArray(_arr[_i], 2),key = _arr$_i[0],value = _arr$_i[1];url = url.replace(new RegExp('{' + key + '}', 'i'), value);\n        }\n      }\n      options.url = url;\n    }\n    options.baseUrl = options.baseUrl || this.config.baseUrl;\n    options.dataType = options.dataType || this.config.dataType;\n    options.url = options.baseUrl + options.url;\n    options.data = options.data || {};\n    options.method = options.method || this.config.method;\n    //TODO 加密数据\n\n    //TODO 数据签名\n    var access_token = (0, _auth.getToken)();\n    var _token = { 'access-token': access_token || ''\n      // _sign = {'sign': sign(JSON.stringify(options.data))}\n    };options.header = Object.assign({}, options.header, _token);\n\n\n    return new Promise(function (resolve, reject) {\n      var _config = null;\n\n      options.complete = function (response) {\n        var statusCode = response.statusCode;\n        var data = response.data;\n        response.config = _config;\n        if (true) {\n          if (statusCode === 200) {\n            // console.log(\"【\" + _config.requestId + \"】 结果：\" + JSON.stringify(response.data))\n          }\n        }\n        if (_this.interceptor.response) {\n          var newResponse = _this.interceptor.response(response);\n          if (newResponse) {\n            response = newResponse;\n          }\n        }\n        // 统一的响应日志记录\n        // _reslog(response)\n        if (statusCode === 200 && data.code === 0) {//成功\n          resolve(data);\n        }\n        if (statusCode === 401 || data.code === 10001401) {\n          uni.reLaunch({\n            url: '/pages/login/login' });\n\n        } else\n        {\n          reject(data);\n        }\n      };\n\n      _config = Object.assign({}, _this.config, options);\n      _config.requestId = new Date().getTime();\n\n      if (_this.interceptor.request) {\n        _this.interceptor.request(_config);\n      }\n\n      // 统一的请求日志记录\n      // _reqlog(_config)\n\n      if (true) {\n        // console.log(\"【\" + _config.requestId + \"】 地址：\" + _config.url)\n        if (_config.data) {\n          // console.log(\"【\" + _config.requestId + \"】 参数：\" + JSON.stringify(_config.data))\n        }\n      }\n      uni.request(_config);\n    });\n  },\n  get: function get(url, data, options) {\n    if (!options) {\n      options = {};\n    }\n    options.url = url;\n    options.data = data;\n    options.method = 'GET';\n    return this.request(options);\n  },\n  post: function post(url, data, options) {\n    if (!options) {\n      options = {};\n    }\n    options.url = url;\n    options.data = data;\n    options.method = 'POST';\n    return this.request(options);\n  },\n  put: function put(url, data, options) {\n    if (!options) {\n      options = {};\n    }\n    options.url = url;\n    options.data = data;\n    options.method = 'PUT';\n    return this.request(options);\n  },\n  delete: function _delete(url, data, options) {\n    if (!options) {\n      options = {};\n    }\n    options.url = url;\n    options.data = data;\n    options.method = 'DELETE';\n    return this.request(options);\n  } };\n\n\n\n/**\r\n        * 请求接口日志记录\r\n        */exports.default = _default;\nfunction _reqlog(req) {\n  if (true) {\n    console.log(__f__(\"【\" + req.requestId + \"】 地址：\" + req.url, \" at common\\\\api\\\\interface.js:188\"));\n    if (req.data) {\n      console.log(__f__(\"【\" + req.requestId + \"】 请求参数：\" + JSON.stringify(req.data), \" at common\\\\api\\\\interface.js:190\"));\n    }\n  }\n  //TODO 调接口异步写入日志数据库\n}\n\n/**\r\n   * 响应接口日志记录\r\n   */\nfunction _reslog(res) {\n  var _statusCode = res.statusCode;\n  if (true) {\n    console.log(__f__(\"【\" + res.config.requestId + \"】 地址：\" + res.config.url, \" at common\\\\api\\\\interface.js:202\"));\n    if (res.config.data) {\n      console.log(__f__(\"【\" + res.config.requestId + \"】 请求参数：\" + JSON.stringify(res.config.data), \" at common\\\\api\\\\interface.js:204\"));\n    }\n    console.log(__f__(\"【\" + res.config.requestId + \"】 响应结果：\" + JSON.stringify(res), \" at common\\\\api\\\\interface.js:206\"));\n  }\n  //TODO 除了接口服务错误外，其他日志调接口异步写入日志数据库\n  switch (_statusCode) {\n    case 200:\n      break;\n    case 401:\n      break;\n    case 404:\n      break;\n    default:\n      break;}\n\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 20)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),

/***/ 23:
/*!******************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/api/order.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.fetchOrder = fetchOrder;exports.fetchSalesOrder = fetchSalesOrder;exports.getPurchaseOrder = getPurchaseOrder;exports.priceOrderItem = priceOrderItem;exports.countPendingPriceOrder = countPendingPriceOrder;exports.countPendingSalesOrder = countPendingSalesOrder;exports.fetchCollectReceiveItemByBuyer = fetchCollectReceiveItemByBuyer;exports.receiveOrderItem = receiveOrderItem;exports.myFirstOrderDate = myFirstOrderDate;exports.checkinSingleSalesOrder = checkinSingleSalesOrder;var _interface = _interopRequireDefault(__webpack_require__(/*! ./interface */ 22));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction fetchOrder(query) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order/list-by-current-buyer',\n    method: 'GET',\n    data: query });\n\n}\n\nfunction fetchSalesOrder(query) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order/list-by-current-seller',\n    method: 'GET',\n    data: query });\n\n}\n\nfunction getPurchaseOrder(query) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order/{purchaseOrderId}',\n    method: 'GET',\n    data: query });\n\n}\n\nfunction priceOrderItem(data) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order-item/price-order-item',\n    method: 'POST',\n    data: { data: data } });\n\n}\n\nfunction countPendingPriceOrder() {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order/count-pending-price-order',\n    method: 'GET' });\n\n}\n\nfunction countPendingSalesOrder() {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order/count-pending-sales-order',\n    method: 'GET' });\n\n}\n\nfunction fetchCollectReceiveItemByBuyer(query) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order-item/collect-receive-item-list',\n    method: 'GET',\n    data: query });\n\n}\n\nfunction receiveOrderItem(data) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order-item/receive-order-item',\n    method: 'POST',\n    data: { data: data } });\n\n}\n\nfunction myFirstOrderDate() {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order/buyer-first-order-date',\n    method: 'GET' });\n\n}\n\nfunction checkinSingleSalesOrder(data) {\n  return _interface.default.request({\n    url: '/api/v1/supply-chain/purchase-order/checkin-single-sales-order',\n    method: 'POST',\n    data: { data: data } });\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2FwaS9vcmRlci5qcyJdLCJuYW1lcyI6WyJmZXRjaE9yZGVyIiwicXVlcnkiLCJodHRwIiwicmVxdWVzdCIsInVybCIsIm1ldGhvZCIsImRhdGEiLCJmZXRjaFNhbGVzT3JkZXIiLCJnZXRQdXJjaGFzZU9yZGVyIiwicHJpY2VPcmRlckl0ZW0iLCJjb3VudFBlbmRpbmdQcmljZU9yZGVyIiwiY291bnRQZW5kaW5nU2FsZXNPcmRlciIsImZldGNoQ29sbGVjdFJlY2VpdmVJdGVtQnlCdXllciIsInJlY2VpdmVPcmRlckl0ZW0iLCJteUZpcnN0T3JkZXJEYXRlIiwiY2hlY2tpblNpbmdsZVNhbGVzT3JkZXIiXSwibWFwcGluZ3MiOiJzaUJBQUEsb0Y7O0FBRU8sU0FBU0EsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkI7QUFDaEMsU0FBT0MsbUJBQUtDLE9BQUwsQ0FBYTtBQUNsQkMsT0FBRyxFQUFFLDJEQURhO0FBRWxCQyxVQUFNLEVBQUUsS0FGVTtBQUdwQkMsUUFBSSxFQUFFTCxLQUhjLEVBQWIsQ0FBUDs7QUFLRDs7QUFFTSxTQUFTTSxlQUFULENBQXlCTixLQUF6QixFQUFnQztBQUNyQyxTQUFPQyxtQkFBS0MsT0FBTCxDQUFhO0FBQ2xCQyxPQUFHLEVBQUUsNERBRGE7QUFFbEJDLFVBQU0sRUFBRSxLQUZVO0FBR3BCQyxRQUFJLEVBQUVMLEtBSGMsRUFBYixDQUFQOztBQUtEOztBQUVNLFNBQVNPLGdCQUFULENBQTBCUCxLQUExQixFQUFpQztBQUN0QyxTQUFPQyxtQkFBS0MsT0FBTCxDQUFhO0FBQ2xCQyxPQUFHLEVBQUUsdURBRGE7QUFFbEJDLFVBQU0sRUFBRSxLQUZVO0FBR3BCQyxRQUFJLEVBQUVMLEtBSGMsRUFBYixDQUFQOztBQUtEOztBQUVNLFNBQVNRLGNBQVQsQ0FBd0JILElBQXhCLEVBQThCO0FBQ25DLFNBQU9KLG1CQUFLQyxPQUFMLENBQWE7QUFDbEJDLE9BQUcsRUFBRSwyREFEYTtBQUVsQkMsVUFBTSxFQUFFLE1BRlU7QUFHcEJDLFFBQUksRUFBRSxFQUFFQSxJQUFJLEVBQUpBLElBQUYsRUFIYyxFQUFiLENBQVA7O0FBS0Q7O0FBRU0sU0FBU0ksc0JBQVQsR0FBa0M7QUFDdkMsU0FBT1IsbUJBQUtDLE9BQUwsQ0FBYTtBQUNsQkMsT0FBRyxFQUFFLCtEQURhO0FBRWxCQyxVQUFNLEVBQUUsS0FGVSxFQUFiLENBQVA7O0FBSUQ7O0FBRU0sU0FBU00sc0JBQVQsR0FBa0M7QUFDdkMsU0FBT1QsbUJBQUtDLE9BQUwsQ0FBYTtBQUNsQkMsT0FBRyxFQUFFLCtEQURhO0FBRWxCQyxVQUFNLEVBQUUsS0FGVSxFQUFiLENBQVA7O0FBSUQ7O0FBRU0sU0FBU08sOEJBQVQsQ0FBd0NYLEtBQXhDLEVBQStDO0FBQ3BELFNBQU9DLG1CQUFLQyxPQUFMLENBQWE7QUFDbEJDLE9BQUcsRUFBRSxvRUFEYTtBQUVsQkMsVUFBTSxFQUFFLEtBRlU7QUFHcEJDLFFBQUksRUFBRUwsS0FIYyxFQUFiLENBQVA7O0FBS0Q7O0FBRU0sU0FBU1ksZ0JBQVQsQ0FBMEJQLElBQTFCLEVBQWdDO0FBQ3JDLFNBQU9KLG1CQUFLQyxPQUFMLENBQWE7QUFDbEJDLE9BQUcsRUFBRSw2REFEYTtBQUVsQkMsVUFBTSxFQUFFLE1BRlU7QUFHcEJDLFFBQUksRUFBRSxFQUFFQSxJQUFJLEVBQUpBLElBQUYsRUFIYyxFQUFiLENBQVA7O0FBS0Q7O0FBRU0sU0FBU1EsZ0JBQVQsR0FBNEI7QUFDakMsU0FBT1osbUJBQUtDLE9BQUwsQ0FBYTtBQUNsQkMsT0FBRyxFQUFFLDREQURhO0FBRWxCQyxVQUFNLEVBQUUsS0FGVSxFQUFiLENBQVA7O0FBSUQ7O0FBRU0sU0FBU1UsdUJBQVQsQ0FBaUNULElBQWpDLEVBQXVDO0FBQzVDLFNBQU9KLG1CQUFLQyxPQUFMLENBQWE7QUFDbEJDLE9BQUcsRUFBRSxnRUFEYTtBQUVsQkMsVUFBTSxFQUFFLE1BRlU7QUFHbEJDLFFBQUksRUFBRSxFQUFFQSxJQUFJLEVBQUpBLElBQUYsRUFIWSxFQUFiLENBQVA7O0FBS0QiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaHR0cCBmcm9tICcuL2ludGVyZmFjZSdcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaE9yZGVyKHF1ZXJ5KSB7XHJcbiAgcmV0dXJuIGh0dHAucmVxdWVzdCh7XHJcbiAgICB1cmw6ICcvYXBpL3YxL3N1cHBseS1jaGFpbi9wdXJjaGFzZS1vcmRlci9saXN0LWJ5LWN1cnJlbnQtYnV5ZXInLFxyXG4gICAgbWV0aG9kOiAnR0VUJyxcclxuXHRcdGRhdGE6IHF1ZXJ5XHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoU2FsZXNPcmRlcihxdWVyeSkge1xyXG4gIHJldHVybiBodHRwLnJlcXVlc3Qoe1xyXG4gICAgdXJsOiAnL2FwaS92MS9zdXBwbHktY2hhaW4vcHVyY2hhc2Utb3JkZXIvbGlzdC1ieS1jdXJyZW50LXNlbGxlcicsXHJcbiAgICBtZXRob2Q6ICdHRVQnLFxyXG5cdFx0ZGF0YTogcXVlcnlcclxuICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHVyY2hhc2VPcmRlcihxdWVyeSkge1xyXG4gIHJldHVybiBodHRwLnJlcXVlc3Qoe1xyXG4gICAgdXJsOiAnL2FwaS92MS9zdXBwbHktY2hhaW4vcHVyY2hhc2Utb3JkZXIve3B1cmNoYXNlT3JkZXJJZH0nLFxyXG4gICAgbWV0aG9kOiAnR0VUJyxcclxuXHRcdGRhdGE6IHF1ZXJ5XHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByaWNlT3JkZXJJdGVtKGRhdGEpIHtcclxuICByZXR1cm4gaHR0cC5yZXF1ZXN0KHtcclxuICAgIHVybDogJy9hcGkvdjEvc3VwcGx5LWNoYWluL3B1cmNoYXNlLW9yZGVyLWl0ZW0vcHJpY2Utb3JkZXItaXRlbScsXHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuXHRcdGRhdGE6IHsgZGF0YSB9XHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50UGVuZGluZ1ByaWNlT3JkZXIoKSB7XHJcbiAgcmV0dXJuIGh0dHAucmVxdWVzdCh7XHJcbiAgICB1cmw6ICcvYXBpL3YxL3N1cHBseS1jaGFpbi9wdXJjaGFzZS1vcmRlci9jb3VudC1wZW5kaW5nLXByaWNlLW9yZGVyJyxcclxuICAgIG1ldGhvZDogJ0dFVCdcclxuICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY291bnRQZW5kaW5nU2FsZXNPcmRlcigpIHtcclxuICByZXR1cm4gaHR0cC5yZXF1ZXN0KHtcclxuICAgIHVybDogJy9hcGkvdjEvc3VwcGx5LWNoYWluL3B1cmNoYXNlLW9yZGVyL2NvdW50LXBlbmRpbmctc2FsZXMtb3JkZXInLFxyXG4gICAgbWV0aG9kOiAnR0VUJ1xyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaENvbGxlY3RSZWNlaXZlSXRlbUJ5QnV5ZXIocXVlcnkpIHtcclxuICByZXR1cm4gaHR0cC5yZXF1ZXN0KHtcclxuICAgIHVybDogJy9hcGkvdjEvc3VwcGx5LWNoYWluL3B1cmNoYXNlLW9yZGVyLWl0ZW0vY29sbGVjdC1yZWNlaXZlLWl0ZW0tbGlzdCcsXHJcbiAgICBtZXRob2Q6ICdHRVQnLFxyXG5cdFx0ZGF0YTogcXVlcnlcclxuICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVjZWl2ZU9yZGVySXRlbShkYXRhKSB7XHJcbiAgcmV0dXJuIGh0dHAucmVxdWVzdCh7XHJcbiAgICB1cmw6ICcvYXBpL3YxL3N1cHBseS1jaGFpbi9wdXJjaGFzZS1vcmRlci1pdGVtL3JlY2VpdmUtb3JkZXItaXRlbScsXHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuXHRcdGRhdGE6IHsgZGF0YSB9XHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG15Rmlyc3RPcmRlckRhdGUoKSB7XHJcbiAgcmV0dXJuIGh0dHAucmVxdWVzdCh7XHJcbiAgICB1cmw6ICcvYXBpL3YxL3N1cHBseS1jaGFpbi9wdXJjaGFzZS1vcmRlci9idXllci1maXJzdC1vcmRlci1kYXRlJyxcclxuICAgIG1ldGhvZDogJ0dFVCdcclxuICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tpblNpbmdsZVNhbGVzT3JkZXIoZGF0YSkge1xyXG4gIHJldHVybiBodHRwLnJlcXVlc3Qoe1xyXG4gICAgdXJsOiAnL2FwaS92MS9zdXBwbHktY2hhaW4vcHVyY2hhc2Utb3JkZXIvY2hlY2tpbi1zaW5nbGUtc2FsZXMtb3JkZXInLFxyXG4gICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICBkYXRhOiB7IGRhdGEgfVxyXG4gIH0pXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n");

/***/ }),

/***/ 24:
/*!****************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/amap-wx.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function AMapWX(a) {this.key = a.key, this.requestConfig = { key: a.key, s: \"rsx\", platform: \"WXJS\", appname: a.key, sdkversion: \"1.2.0\", logversion: \"2.0\" };}AMapWX.prototype.getWxLocation = function (a, b) {wx.getLocation({ type: \"gcj02\", success: function success(a) {var c = a.longitude + \",\" + a.latitude;wx.setStorage({ key: \"userLocation\", data: c }), b(c);}, fail: function fail(c) {wx.getStorage({ key: \"userLocation\", success: function success(a) {a.data && b(a.data);} }), a.fail({ errCode: \"0\", errMsg: c.errMsg || \"\" });} });}, AMapWX.prototype.getRegeo = function (a) {function c(c) {var d = b.requestConfig;wx.request({ url: \"https://restapi.amap.com/v3/geocode/regeo\", data: { key: b.key, location: c, extensions: \"all\", s: d.s, platform: d.platform, appname: b.key, sdkversion: d.sdkversion, logversion: d.logversion }, method: \"GET\", header: { \"content-type\": \"application/json\" }, success: function success(b) {var d, e, f, g, h, i, j, k, l;b.data.status && \"1\" == b.data.status ? (d = b.data.regeocode, e = d.addressComponent, f = [], g = \"\", d && d.roads[0] && d.roads[0].name && (g = d.roads[0].name + \"附近\"), h = c.split(\",\")[0], i = c.split(\",\")[1], d.pois && d.pois[0] && (g = d.pois[0].name + \"附近\", j = d.pois[0].location, j && (h = parseFloat(j.split(\",\")[0]), i = parseFloat(j.split(\",\")[1]))), e.provice && f.push(e.provice), e.city && f.push(e.city), e.district && f.push(e.district), e.streetNumber && e.streetNumber.street && e.streetNumber.number ? (f.push(e.streetNumber.street), f.push(e.streetNumber.number)) : (k = \"\", d && d.roads[0] && d.roads[0].name && (k = d.roads[0].name), f.push(k)), f = f.join(\"\"), l = [{ iconPath: a.iconPath, width: a.iconWidth, height: a.iconHeight, name: f, desc: g, longitude: h, latitude: i, id: 0, regeocodeData: d }], a.success(l)) : a.fail({ errCode: b.data.infocode, errMsg: b.data.info });}, fail: function fail(b) {a.fail({ errCode: \"0\", errMsg: b.errMsg || \"\" });} });}var b = this;a.location ? c(a.location) : b.getWxLocation(a, function (a) {c(a);});}, AMapWX.prototype.getWeather = function (a) {function d(d) {var e = \"base\";a.type && \"forecast\" == a.type && (e = \"all\"), wx.request({ url: \"https://restapi.amap.com/v3/weather/weatherInfo\", data: { key: b.key, city: d, extensions: e, s: c.s, platform: c.platform, appname: b.key, sdkversion: c.sdkversion, logversion: c.logversion }, method: \"GET\", header: { \"content-type\": \"application/json\" }, success: function success(b) {function c(a) {var b = { city: { text: \"城市\", data: a.city }, weather: { text: \"天气\", data: a.weather }, temperature: { text: \"温度\", data: a.temperature }, winddirection: { text: \"风向\", data: a.winddirection + \"风\" }, windpower: { text: \"风力\", data: a.windpower + \"级\" }, humidity: { text: \"湿度\", data: a.humidity + \"%\" } };return b;}var d, e;b.data.status && \"1\" == b.data.status ? b.data.lives ? (d = b.data.lives, d && d.length > 0 && (d = d[0], e = c(d), e[\"liveData\"] = d, a.success(e))) : b.data.forecasts && b.data.forecasts[0] && a.success({ forecast: b.data.forecasts[0] }) : a.fail({ errCode: b.data.infocode, errMsg: b.data.info });}, fail: function fail(b) {a.fail({ errCode: \"0\", errMsg: b.errMsg || \"\" });} });}function e(e) {wx.request({ url: \"https://restapi.amap.com/v3/geocode/regeo\", data: { key: b.key, location: e, extensions: \"all\", s: c.s, platform: c.platform, appname: b.key, sdkversion: c.sdkversion, logversion: c.logversion }, method: \"GET\", header: { \"content-type\": \"application/json\" }, success: function success(b) {var c, e;b.data.status && \"1\" == b.data.status ? (e = b.data.regeocode, e.addressComponent ? c = e.addressComponent.adcode : e.aois && e.aois.length > 0 && (c = e.aois[0].adcode), d(c)) : a.fail({ errCode: b.data.infocode, errMsg: b.data.info });}, fail: function fail(b) {a.fail({ errCode: \"0\", errMsg: b.errMsg || \"\" });} });}var b = this,c = b.requestConfig;a.city ? d(a.city) : b.getWxLocation(a, function (a) {e(a);});}, AMapWX.prototype.getPoiAround = function (a) {function d(d) {var e = { key: b.key, location: d, s: c.s, platform: c.platform, appname: b.key, sdkversion: c.sdkversion, logversion: c.logversion };a.querytypes && (e[\"types\"] = a.querytypes), a.querykeywords && (e[\"keywords\"] = a.querykeywords), wx.request({ url: \"https://restapi.amap.com/v3/place/around\", data: e, method: \"GET\", header: { \"content-type\": \"application/json\" }, success: function success(b) {var c, d, e, f;if (b.data.status && \"1\" == b.data.status) {if (b = b.data, b && b.pois) {for (c = [], d = 0; d < b.pois.length; d++) {e = 0 == d ? a.iconPathSelected : a.iconPath, c.push({ latitude: parseFloat(b.pois[d].location.split(\",\")[1]), longitude: parseFloat(b.pois[d].location.split(\",\")[0]), iconPath: e, width: 22, height: 32, id: d, name: b.pois[d].name, address: b.pois[d].address });}f = { markers: c, poisData: b.pois }, a.success(f);}} else a.fail({ errCode: b.data.infocode, errMsg: b.data.info });}, fail: function fail(b) {a.fail({ errCode: \"0\", errMsg: b.errMsg || \"\" });} });}var b = this,c = b.requestConfig;a.location ? d(a.location) : b.getWxLocation(a, function (a) {d(a);});}, AMapWX.prototype.getStaticmap = function (a) {function f(b) {c.push(\"location=\" + b), a.zoom && c.push(\"zoom=\" + a.zoom), a.size && c.push(\"size=\" + a.size), a.scale && c.push(\"scale=\" + a.scale), a.markers && c.push(\"markers=\" + a.markers), a.labels && c.push(\"labels=\" + a.labels), a.paths && c.push(\"paths=\" + a.paths), a.traffic && c.push(\"traffic=\" + a.traffic);var e = d + c.join(\"&\");a.success({ url: e });}var e,b = this,c = [],d = \"https://restapi.amap.com/v3/staticmap?\";c.push(\"key=\" + b.key), e = b.requestConfig, c.push(\"s=\" + e.s), c.push(\"platform=\" + e.platform), c.push(\"appname=\" + e.appname), c.push(\"sdkversion=\" + e.sdkversion), c.push(\"logversion=\" + e.logversion), a.location ? f(a.location) : b.getWxLocation(a, function (a) {f(a);});}, AMapWX.prototype.getInputtips = function (a) {var b = this,c = b.requestConfig,d = { key: b.key, s: c.s, platform: c.platform, appname: b.key, sdkversion: c.sdkversion, logversion: c.logversion };a.location && (d[\"location\"] = a.location), a.keywords && (d[\"keywords\"] = a.keywords), a.type && (d[\"type\"] = a.type), a.city && (d[\"city\"] = a.city), a.citylimit && (d[\"citylimit\"] = a.citylimit), wx.request({ url: \"https://restapi.amap.com/v3/assistant/inputtips\", data: d, method: \"GET\", header: { \"content-type\": \"application/json\" }, success: function success(b) {b && b.data && b.data.tips && a.success({ tips: b.data.tips });}, fail: function fail(b) {a.fail({ errCode: \"0\", errMsg: b.errMsg || \"\" });} });}, AMapWX.prototype.getDrivingRoute = function (a) {var b = this,c = b.requestConfig,d = { key: b.key, s: c.s, platform: c.platform, appname: b.key, sdkversion: c.sdkversion, logversion: c.logversion };a.origin && (d[\"origin\"] = a.origin), a.destination && (d[\"destination\"] = a.destination), a.strategy && (d[\"strategy\"] = a.strategy), a.waypoints && (d[\"waypoints\"] = a.waypoints), a.avoidpolygons && (d[\"avoidpolygons\"] = a.avoidpolygons), a.avoidroad && (d[\"avoidroad\"] = a.avoidroad), wx.request({ url: \"https://restapi.amap.com/v3/direction/driving\", data: d, method: \"GET\", header: { \"content-type\": \"application/json\" }, success: function success(b) {b && b.data && b.data.route && a.success({ paths: b.data.route.paths, taxi_cost: b.data.route.taxi_cost || \"\" });}, fail: function fail(b) {a.fail({ errCode: \"0\", errMsg: b.errMsg || \"\" });} });}, AMapWX.prototype.getWalkingRoute = function (a) {var b = this,c = b.requestConfig,d = { key: b.key, s: c.s, platform: c.platform, appname: b.key, sdkversion: c.sdkversion, logversion: c.logversion };a.origin && (d[\"origin\"] = a.origin), a.destination && (d[\"destination\"] = a.destination), wx.request({ url: \"https://restapi.amap.com/v3/direction/walking\", data: d, method: \"GET\", header: { \"content-type\": \"application/json\" }, success: function success(b) {b && b.data && b.data.route && a.success({ paths: b.data.route.paths });}, fail: function fail(b) {a.fail({ errCode: \"0\", errMsg: b.errMsg || \"\" });} });}, AMapWX.prototype.getTransitRoute = function (a) {var b = this,c = b.requestConfig,d = { key: b.key, s: c.s, platform: c.platform, appname: b.key, sdkversion: c.sdkversion, logversion: c.logversion };a.origin && (d[\"origin\"] = a.origin), a.destination && (d[\"destination\"] = a.destination), a.strategy && (d[\"strategy\"] = a.strategy), a.city && (d[\"city\"] = a.city), a.cityd && (d[\"cityd\"] = a.cityd), wx.request({ url: \"https://restapi.amap.com/v3/direction/transit/integrated\", data: d, method: \"GET\", header: { \"content-type\": \"application/json\" }, success: function success(b) {if (b && b.data && b.data.route) {var c = b.data.route;a.success({ distance: c.distance || \"\", taxi_cost: c.taxi_cost || \"\", transits: c.transits });}}, fail: function fail(b) {a.fail({ errCode: \"0\", errMsg: b.errMsg || \"\" });} });}, AMapWX.prototype.getRidingRoute = function (a) {var b = this,c = b.requestConfig,d = { key: b.key, s: c.s, platform: c.platform, appname: b.key, sdkversion: c.sdkversion, logversion: c.logversion };a.origin && (d[\"origin\"] = a.origin), a.destination && (d[\"destination\"] = a.destination), wx.request({ url: \"https://restapi.amap.com/v4/direction/bicycling\", data: d, method: \"GET\", header: { \"content-type\": \"application/json\" }, success: function success(b) {b && b.data && b.data.data && a.success({ paths: b.data.data.paths });}, fail: function fail(b) {a.fail({ errCode: \"0\", errMsg: b.errMsg || \"\" });} });}, module.exports.AMapWX = AMapWX;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),

/***/ 25:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 32:
/*!*****************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/api/user.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.doLogin = doLogin;exports.getLoginCode = getLoginCode;exports.doLoginWithWechat = doLoginWithWechat;exports.getUserInfo = getUserInfo;var _interface = _interopRequireDefault(__webpack_require__(/*! ./interface */ 22));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction doLogin(data) {\n  return _interface.default.request({\n    url: '/auth/login-code',\n    method: 'post',\n    data: { data: data } });\n\n}\n\nfunction getLoginCode(data) {\n  return _interface.default.request({\n    url: '/auth/sms-login-code',\n    method: 'post',\n    data: { data: data } });\n\n}\n\nfunction doLoginWithWechat(data) {\n  return _interface.default.request({\n    url: '/auth/login-wechat-code',\n    method: 'post',\n    data: { data: data } });\n\n}\n\nfunction getUserInfo() {\n  return _interface.default.request({\n    url: '/auth/me',\n    method: 'GET' });\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2FwaS91c2VyLmpzIl0sIm5hbWVzIjpbImRvTG9naW4iLCJkYXRhIiwiaHR0cCIsInJlcXVlc3QiLCJ1cmwiLCJtZXRob2QiLCJnZXRMb2dpbkNvZGUiLCJkb0xvZ2luV2l0aFdlY2hhdCIsImdldFVzZXJJbmZvIl0sIm1hcHBpbmdzIjoiNE1BQUEsb0Y7O0FBRU8sU0FBU0EsT0FBVCxDQUFpQkMsSUFBakIsRUFBdUI7QUFDNUIsU0FBT0MsbUJBQUtDLE9BQUwsQ0FBYTtBQUNsQkMsT0FBRyxFQUFFLGtCQURhO0FBRWxCQyxVQUFNLEVBQUUsTUFGVTtBQUdsQkosUUFBSSxFQUFFLEVBQUVBLElBQUksRUFBRUEsSUFBUixFQUhZLEVBQWIsQ0FBUDs7QUFLRDs7QUFFTSxTQUFTSyxZQUFULENBQXNCTCxJQUF0QixFQUE0QjtBQUNqQyxTQUFPQyxtQkFBS0MsT0FBTCxDQUFhO0FBQ2xCQyxPQUFHLEVBQUUsc0JBRGE7QUFFbEJDLFVBQU0sRUFBRSxNQUZVO0FBR2xCSixRQUFJLEVBQUUsRUFBRUEsSUFBSSxFQUFFQSxJQUFSLEVBSFksRUFBYixDQUFQOztBQUtEOztBQUVNLFNBQVNNLGlCQUFULENBQTJCTixJQUEzQixFQUFpQztBQUN0QyxTQUFPQyxtQkFBS0MsT0FBTCxDQUFhO0FBQ2xCQyxPQUFHLEVBQUUseUJBRGE7QUFFbEJDLFVBQU0sRUFBRSxNQUZVO0FBR2xCSixRQUFJLEVBQUUsRUFBRUEsSUFBSSxFQUFFQSxJQUFSLEVBSFksRUFBYixDQUFQOztBQUtEOztBQUVNLFNBQVNPLFdBQVQsR0FBdUI7QUFDNUIsU0FBT04sbUJBQUtDLE9BQUwsQ0FBYTtBQUNsQkMsT0FBRyxFQUFFLFVBRGE7QUFFbEJDLFVBQU0sRUFBRSxLQUZVLEVBQWIsQ0FBUDs7QUFJRCIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwIGZyb20gJy4vaW50ZXJmYWNlJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvTG9naW4oZGF0YSkge1xyXG4gIHJldHVybiBodHRwLnJlcXVlc3Qoe1xyXG4gICAgdXJsOiAnL2F1dGgvbG9naW4tY29kZScsXHJcbiAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgIGRhdGE6IHsgZGF0YTogZGF0YSB9XHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldExvZ2luQ29kZShkYXRhKSB7XHJcbiAgcmV0dXJuIGh0dHAucmVxdWVzdCh7XHJcbiAgICB1cmw6ICcvYXV0aC9zbXMtbG9naW4tY29kZScsXHJcbiAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgIGRhdGE6IHsgZGF0YTogZGF0YSB9XHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvTG9naW5XaXRoV2VjaGF0KGRhdGEpIHtcclxuICByZXR1cm4gaHR0cC5yZXF1ZXN0KHtcclxuICAgIHVybDogJy9hdXRoL2xvZ2luLXdlY2hhdC1jb2RlJyxcclxuICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgZGF0YTogeyBkYXRhOiBkYXRhIH1cclxuICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckluZm8oKSB7XHJcbiAgcmV0dXJuIGh0dHAucmVxdWVzdCh7XHJcbiAgICB1cmw6ICcvYXV0aC9tZScsXHJcbiAgICBtZXRob2Q6ICdHRVQnXHJcbiAgfSlcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32\n");

/***/ }),

/***/ 33:
/*!***************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/common.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.toast = toast;exports.checkPhone = checkPhone;exports.checkPwd = checkPwd;exports.checkCode = checkCode;exports.checkIdCard = checkIdCard;exports.checkBankCard = checkBankCard;function toast(title) {\n  uni.showToast({\n    icon: 'none',\n    title: title });\n\n}\n/**\r\n   * 手机验证\r\n   */\nfunction checkPhone(value) {\n  var reg = /^1\\d{10}$/;\n  if (reg.test(value)) {\n    return true;\n  }\n  toast('手机号格式错误');\n  return false;\n}\n/**\r\n   * 密码验证\r\n   */\nfunction checkPwd(value) {\n  if (value.length >= 6) {\n    return true;\n  }\n  toast('密码必须大于6位');\n  return false;\n}\n/**\r\n   * 验证码验证\r\n   */\nfunction checkCode(value) {\n  if (value.length == 6) {\n    return true;\n  }\n  toast('验证码必须是6位数字');\n  return false;\n}\n/**\r\n   * 身份证验证\r\n   */\nfunction checkIdCard(value) {\n  var reg = /^\\d{15}|\\d{18}$/;\n  if (reg.test(value)) {\n    return true;\n  }\n  toast('身份证必须是15或18位数字');\n  return false;\n}\n/**\r\n   * 银行卡验证\r\n   */\nfunction checkBankCard(value) {\n  var reg = /^([1-9]{1})(\\d{14}|\\d{15}|\\d{16}|\\d{18})$/;\n  if (reg.test(value)) {\n    return true;\n  }\n  toast('请输入正确的银行卡号');\n  return false;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2NvbW1vbi5qcyJdLCJuYW1lcyI6WyJ0b2FzdCIsInRpdGxlIiwidW5pIiwic2hvd1RvYXN0IiwiaWNvbiIsImNoZWNrUGhvbmUiLCJ2YWx1ZSIsInJlZyIsInRlc3QiLCJjaGVja1B3ZCIsImxlbmd0aCIsImNoZWNrQ29kZSIsImNoZWNrSWRDYXJkIiwiY2hlY2tCYW5rQ2FyZCJdLCJtYXBwaW5ncyI6ImlTQUFPLFNBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFxQjtBQUMzQkMsS0FBRyxDQUFDQyxTQUFKLENBQWM7QUFDYkMsUUFBSSxFQUFDLE1BRFE7QUFFYkgsU0FBSyxFQUFDQSxLQUZPLEVBQWQ7O0FBSUE7QUFDRDs7O0FBR08sU0FBU0ksVUFBVCxDQUFvQkMsS0FBcEIsRUFBMEI7QUFDaEMsTUFBSUMsR0FBRyxHQUFFLFdBQVQ7QUFDQSxNQUFHQSxHQUFHLENBQUNDLElBQUosQ0FBU0YsS0FBVCxDQUFILEVBQW1CO0FBQ2xCLFdBQU8sSUFBUDtBQUNBO0FBQ0ROLE9BQUssQ0FBQyxTQUFELENBQUw7QUFDQSxTQUFPLEtBQVA7QUFDQTtBQUNEOzs7QUFHTyxTQUFTUyxRQUFULENBQWtCSCxLQUFsQixFQUF3QjtBQUM5QixNQUFHQSxLQUFLLENBQUNJLE1BQU4sSUFBYyxDQUFqQixFQUFtQjtBQUNsQixXQUFPLElBQVA7QUFDQTtBQUNEVixPQUFLLENBQUMsVUFBRCxDQUFMO0FBQ0EsU0FBTyxLQUFQO0FBQ0E7QUFDRDs7O0FBR08sU0FBU1csU0FBVCxDQUFtQkwsS0FBbkIsRUFBeUI7QUFDL0IsTUFBR0EsS0FBSyxDQUFDSSxNQUFOLElBQWMsQ0FBakIsRUFBbUI7QUFDbEIsV0FBTyxJQUFQO0FBQ0E7QUFDRFYsT0FBSyxDQUFDLFlBQUQsQ0FBTDtBQUNBLFNBQU8sS0FBUDtBQUNBO0FBQ0Q7OztBQUdPLFNBQVNZLFdBQVQsQ0FBcUJOLEtBQXJCLEVBQTJCO0FBQ2pDLE1BQUlDLEdBQUcsR0FBRSxpQkFBVDtBQUNBLE1BQUdBLEdBQUcsQ0FBQ0MsSUFBSixDQUFTRixLQUFULENBQUgsRUFBbUI7QUFDbEIsV0FBTyxJQUFQO0FBQ0E7QUFDRE4sT0FBSyxDQUFDLGdCQUFELENBQUw7QUFDQSxTQUFPLEtBQVA7QUFDQTtBQUNEOzs7QUFHTyxTQUFTYSxhQUFULENBQXVCUCxLQUF2QixFQUE2QjtBQUNuQyxNQUFJQyxHQUFHLEdBQUUsMkNBQVQ7QUFDQSxNQUFHQSxHQUFHLENBQUNDLElBQUosQ0FBU0YsS0FBVCxDQUFILEVBQW1CO0FBQ2xCLFdBQU8sSUFBUDtBQUNBO0FBQ0ROLE9BQUssQ0FBQyxZQUFELENBQUw7QUFDQSxTQUFPLEtBQVA7QUFDQSxDIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRvYXN0KHRpdGxlKXtcclxuXHR1bmkuc2hvd1RvYXN0KHtcclxuXHRcdGljb246J25vbmUnLFxyXG5cdFx0dGl0bGU6dGl0bGVcclxuXHR9KVxyXG59XHJcbi8qKlxyXG4gKiDmiYvmnLrpqozor4FcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1Bob25lKHZhbHVlKXtcclxuXHRsZXQgcmVnID0vXjFcXGR7MTB9JC9cclxuXHRpZihyZWcudGVzdCh2YWx1ZSkpe1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdHRvYXN0KCfmiYvmnLrlj7fmoLzlvI/plJnor68nKTtcclxuXHRyZXR1cm4gZmFsc2VcclxufVxyXG4vKipcclxuICog5a+G56CB6aqM6K+BXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQd2QodmFsdWUpe1xyXG5cdGlmKHZhbHVlLmxlbmd0aD49Nil7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0dG9hc3QoJ+WvhueggeW/hemhu+Wkp+S6jjbkvY0nKTtcclxuXHRyZXR1cm4gZmFsc2VcclxufVxyXG4vKipcclxuICog6aqM6K+B56CB6aqM6K+BXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tDb2RlKHZhbHVlKXtcclxuXHRpZih2YWx1ZS5sZW5ndGg9PTYpe1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdHRvYXN0KCfpqozor4HnoIHlv4XpobvmmK825L2N5pWw5a2XJyk7XHJcblx0cmV0dXJuIGZhbHNlXHJcbn1cclxuLyoqXHJcbiAqIOi6q+S7veivgemqjOivgVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSWRDYXJkKHZhbHVlKXtcclxuXHRsZXQgcmVnID0vXlxcZHsxNX18XFxkezE4fSQvXHJcblx0aWYocmVnLnRlc3QodmFsdWUpKXtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHR0b2FzdCgn6Lqr5Lu96K+B5b+F6aG75pivMTXmiJYxOOS9jeaVsOWtlycpO1xyXG5cdHJldHVybiBmYWxzZVxyXG59XHJcbi8qKlxyXG4gKiDpk7booYzljaHpqozor4FcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0JhbmtDYXJkKHZhbHVlKXtcclxuXHRsZXQgcmVnID0vXihbMS05XXsxfSkoXFxkezE0fXxcXGR7MTV9fFxcZHsxNn18XFxkezE4fSkkL1xyXG5cdGlmKHJlZy50ZXN0KHZhbHVlKSl7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0dG9hc3QoJ+ivt+i+k+WFpeato+ehrueahOmTtuihjOWNoeWPtycpO1xyXG5cdHJldHVybiBmYWxzZVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");

/***/ }),

/***/ 4:
/*!*********************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/pages.json ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    packName = uni.getAccountInfoSync().miniProgram.appId || '';\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-23320190923002\",\"_inBundle\":false,\"_integrity\":\"sha512-MnftsvgOac3q1FCOBPzivbFn8GNQFo7D2DY325HeEZyFCWgx5GEwHpGYjT1PQU6v7DaDn0ruxa3ObdpUIYbmZw==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-23320190923002.tgz\",\"_shasum\":\"0c400c140ca0b3c05f52d25f11583cf05a0c4e9a\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/fxy/Documents/DCloud/HbuilderX-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"fed4c73fb9142a1b277dd79313939cad90693d3e\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-23320190923002\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 62:
/*!****************************************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/utils/pinyin-match/pinyin-match.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.pinyinMatch = pinyinMatch;var _main = _interopRequireDefault(__webpack_require__(/*! ./lib/main.js */ 63));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction pinyinMatch(input, keyword) {\n  return _main.default.match(input, keyword);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL3V0aWxzL3Bpbnlpbi1tYXRjaC9waW55aW4tbWF0Y2guanMiXSwibmFtZXMiOlsicGlueWluTWF0Y2giLCJpbnB1dCIsImtleXdvcmQiLCJQaW55aW5NYXRjaCIsIm1hdGNoIl0sIm1hcHBpbmdzIjoiZ0dBQUEsaUY7O0FBRU8sU0FBU0EsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEJDLE9BQTVCLEVBQXFDO0FBQzFDLFNBQU9DLGNBQVlDLEtBQVosQ0FBa0JILEtBQWxCLEVBQXlCQyxPQUF6QixDQUFQO0FBQ0QiLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGlueWluTWF0Y2ggZnJvbSAnLi9saWIvbWFpbi5qcydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwaW55aW5NYXRjaChpbnB1dCwga2V5d29yZCkge1xyXG4gIHJldHVybiBQaW55aW5NYXRjaC5tYXRjaChpbnB1dCwga2V5d29yZClcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///62\n");

/***/ }),

/***/ 63:
/*!************************************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/utils/pinyin-match/lib/main.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("!function (n, a) { true ? module.exports = a() : undefined;}(\"undefined\" != typeof self ? self : void 0, function () {return function (n) {var a = {};function i(u) {if (a[u]) return a[u].exports;var e = a[u] = { i: u, l: !1, exports: {} };return n[u].call(e.exports, e, e.exports, i), e.l = !0, e.exports;}return i.m = n, i.c = a, i.d = function (n, a, u) {i.o(n, a) || Object.defineProperty(n, a, { enumerable: !0, get: u });}, i.r = function (n) {\"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(n, \"__esModule\", { value: !0 });}, i.t = function (n, a) {if (1 & a && (n = i(n)), 8 & a) return n;if (4 & a && \"object\" == typeof n && n && n.__esModule) return n;var u = Object.create(null);if (i.r(u), Object.defineProperty(u, \"default\", { enumerable: !0, value: n }), 2 & a && \"string\" != typeof n) for (var e in n) {i.d(u, e, function (a) {return n[a];}.bind(null, e));}return u;}, i.n = function (n) {var a = n && n.__esModule ? function () {return n.default;} : function () {return n;};return i.d(a, \"a\", a), a;}, i.o = function (n, a) {return Object.prototype.hasOwnProperty.call(n, a);}, i.p = \"\", i(i.s = 1);}([function (n, a, i) {\"use strict\";a.pinyin_dict_notone = { a: \"阿啊呵腌嗄吖锕\", e: \"额阿俄恶鹅遏鄂厄饿峨扼娥鳄哦蛾噩愕讹锷垩婀鹗萼谔莪腭锇颚呃阏屙苊轭\", ai: \"爱埃艾碍癌哀挨矮隘蔼唉皑哎霭捱暧嫒嗳瑷嗌锿砹\", ei: \"诶\", xi: \"系西席息希习吸喜细析戏洗悉锡溪惜稀袭夕洒晰昔牺腊烯熙媳栖膝隙犀蹊硒兮熄曦禧嬉玺奚汐徙羲铣淅嘻歙熹矽蟋郗唏皙隰樨浠忾蜥檄郄翕阋鳃舾屣葸螅咭粞觋欷僖醯鼷裼穸饩舄禊诶菥蓰\", yi: \"一以已意议义益亿易医艺食依移衣异伊仪宜射遗疑毅谊亦疫役忆抑尾乙译翼蛇溢椅沂泄逸蚁夷邑怡绎彝裔姨熠贻矣屹颐倚诣胰奕翌疙弈轶蛾驿壹猗臆弋铱旖漪迤佚翊诒怿痍懿饴峄揖眙镒仡黟肄咿翳挹缢呓刈咦嶷羿钇殪荑薏蜴镱噫癔苡悒嗌瘗衤佾埸圯舣酏劓\", an: \"安案按岸暗鞍氨俺胺铵谙庵黯鹌桉埯犴揞厂广\", han: \"厂汉韩含旱寒汗涵函喊憾罕焊翰邯撼瀚憨捍酣悍鼾邗颔蚶晗菡旰顸犴焓撖\", ang: \"昂仰盎肮\", ao: \"奥澳傲熬凹鳌敖遨鏖袄坳翱嗷拗懊岙螯骜獒鏊艹媪廒聱\", wa: \"瓦挖娃洼袜蛙凹哇佤娲呙腽\", yu: \"于与育余预域予遇奥语誉玉鱼雨渔裕愈娱欲吁舆宇羽逾豫郁寓吾狱喻御浴愉禹俞邪榆愚渝尉淤虞屿峪粥驭瑜禺毓钰隅芋熨瘀迂煜昱汩於臾盂聿竽萸妪腴圄谕觎揄龉谀俣馀庾妤瘐鬻欤鹬阈嵛雩鹆圉蜮伛纡窬窳饫蓣狳肀舁蝓燠\", niu: \"牛纽扭钮拗妞忸狃\", o: \"哦噢喔\", ba: \"把八巴拔伯吧坝爸霸罢芭跋扒叭靶疤笆耙鲅粑岜灞钯捌菝魃茇\", pa: \"怕帕爬扒趴琶啪葩耙杷钯筢\", pi: \"被批副否皮坏辟啤匹披疲罢僻毗坯脾譬劈媲屁琵邳裨痞癖陂丕枇噼霹吡纰砒铍淠郫埤濞睥芘蚍圮鼙罴蜱疋貔仳庀擗甓陴\", bi: \"比必币笔毕秘避闭佛辟壁弊彼逼碧鼻臂蔽拂泌璧庇痹毙弼匕鄙陛裨贲敝蓖吡篦纰俾铋毖筚荸薜婢哔跸濞秕荜愎睥妣芘箅髀畀滗狴萆嬖襞舭\", bai: \"百白败摆伯拜柏佰掰呗擘捭稗\", bo: \"波博播勃拨薄佛伯玻搏柏泊舶剥渤卜驳簿脖膊簸菠礴箔铂亳钵帛擘饽跛钹趵檗啵鹁擗踣\", bei: \"北被备倍背杯勃贝辈悲碑臂卑悖惫蓓陂钡狈呗焙碚褙庳鞴孛鹎邶鐾\", ban: \"办版半班般板颁伴搬斑扮拌扳瓣坂阪绊钣瘢舨癍\", pan: \"判盘番潘攀盼拚畔胖叛拌蹒磐爿蟠泮袢襻丬\", bin: \"份宾频滨斌彬濒殡缤鬓槟摈膑玢镔豳髌傧\", bang: \"帮邦彭旁榜棒膀镑绑傍磅蚌谤梆浜蒡\", pang: \"旁庞乓磅螃彷滂逄耪\", beng: \"泵崩蚌蹦迸绷甭嘣甏堋\", bao: \"报保包宝暴胞薄爆炮饱抱堡剥鲍曝葆瀑豹刨褒雹孢苞煲褓趵鸨龅勹\", bu: \"不部步布补捕堡埔卜埠簿哺怖钚卟瓿逋晡醭钸\", pu: \"普暴铺浦朴堡葡谱埔扑仆蒲曝瀑溥莆圃璞濮菩蹼匍噗氆攵镨攴镤\", mian: \"面棉免绵缅勉眠冕娩腼渑湎沔黾宀眄\", po: \"破繁坡迫颇朴泊婆泼魄粕鄱珀陂叵笸泺皤钋钷\", fan: \"反范犯繁饭泛翻凡返番贩烦拚帆樊藩矾梵蕃钒幡畈蘩蹯燔\", fu: \"府服副负富复福夫妇幅付扶父符附腐赴佛浮覆辅傅伏抚赋辐腹弗肤阜袱缚甫氟斧孚敷俯拂俘咐腑孵芙涪釜脯茯馥宓绂讣呋罘麸蝠匐芾蜉跗凫滏蝮驸绋蚨砩桴赙菔呒趺苻拊阝鲋怫稃郛莩幞祓艴黻黼鳆\", ben: \"本体奔苯笨夯贲锛畚坌\", feng: \"风丰封峰奉凤锋冯逢缝蜂枫疯讽烽俸沣酆砜葑唪\", bian: \"变便边编遍辩鞭辨贬匾扁卞汴辫砭苄蝙鳊弁窆笾煸褊碥忭缏\", pian: \"便片篇偏骗翩扁骈胼蹁谝犏缏\", zhen: \"镇真针圳振震珍阵诊填侦臻贞枕桢赈祯帧甄斟缜箴疹砧榛鸩轸稹溱蓁胗椹朕畛浈\", biao: \"表标彪镖裱飚膘飙镳婊骠飑杓髟鳔灬瘭\", piao: \"票朴漂飘嫖瓢剽缥殍瞟骠嘌莩螵\", huo: \"和活或货获火伙惑霍祸豁嚯藿锪蠖钬耠镬夥灬劐攉\", bie: \"别鳖憋瘪蹩\", min: \"民敏闽闵皿泯岷悯珉抿黾缗玟愍苠鳘\", fen: \"分份纷奋粉氛芬愤粪坟汾焚酚吩忿棼玢鼢瀵偾鲼\", bing: \"并病兵冰屏饼炳秉丙摒柄槟禀枋邴冫\", geng: \"更耕颈庚耿梗埂羹哽赓绠鲠\", fang: \"方放房防访纺芳仿坊妨肪邡舫彷枋鲂匚钫\", xian: \"现先县见线限显险献鲜洗宪纤陷闲贤仙衔掀咸嫌掺羡弦腺痫娴舷馅酰铣冼涎暹籼锨苋蚬跹岘藓燹鹇氙莶霰跣猃彡祆筅\", fou: \"不否缶\", ca: \"拆擦嚓礤\", cha: \"查察差茶插叉刹茬楂岔诧碴嚓喳姹杈汊衩搽槎镲苴檫馇锸猹\", cai: \"才采财材菜彩裁蔡猜踩睬\", can: \"参残餐灿惨蚕掺璨惭粲孱骖黪\", shen: \"信深参身神什审申甚沈伸慎渗肾绅莘呻婶娠砷蜃哂椹葚吲糁渖诜谂矧胂\", cen: \"参岑涔\", san: \"三参散伞叁糁馓毵\", cang: \"藏仓苍沧舱臧伧\", zang: \"藏脏葬赃臧奘驵\", chen: \"称陈沈沉晨琛臣尘辰衬趁忱郴宸谌碜嗔抻榇伧谶龀肜\", cao: \"草操曹槽糙嘈漕螬艚屮\", ce: \"策测册侧厕栅恻\", ze: \"责则泽择侧咋啧仄箦赜笮舴昃迮帻\", zhai: \"债择齐宅寨侧摘窄斋祭翟砦瘵哜\", dao: \"到道导岛倒刀盗稻蹈悼捣叨祷焘氘纛刂帱忉\", ceng: \"层曾蹭噌\", zha: \"查扎炸诈闸渣咋乍榨楂札栅眨咤柞喳喋铡蚱吒怍砟揸痄哳齄\", chai: \"差拆柴钗豺侪虿瘥\", ci: \"次此差词辞刺瓷磁兹慈茨赐祠伺雌疵鹚糍呲粢\", zi: \"资自子字齐咨滋仔姿紫兹孜淄籽梓鲻渍姊吱秭恣甾孳訾滓锱辎趑龇赀眦缁呲笫谘嵫髭茈粢觜耔\", cuo: \"措错磋挫搓撮蹉锉厝嵯痤矬瘥脞鹾\", chan: \"产单阐崭缠掺禅颤铲蝉搀潺蟾馋忏婵孱觇廛谄谗澶骣羼躔蒇冁\", shan: \"山单善陕闪衫擅汕扇掺珊禅删膳缮赡鄯栅煽姗跚鳝嬗潸讪舢苫疝掸膻钐剡蟮芟埏彡骟\", zhan: \"展战占站崭粘湛沾瞻颤詹斩盏辗绽毡栈蘸旃谵搌\", xin: \"新心信辛欣薪馨鑫芯锌忻莘昕衅歆囟忄镡\", lian: \"联连练廉炼脸莲恋链帘怜涟敛琏镰濂楝鲢殓潋裢裣臁奁莶蠊蔹\", chang: \"场长厂常偿昌唱畅倡尝肠敞倘猖娼淌裳徜昶怅嫦菖鲳阊伥苌氅惝鬯\", zhang: \"长张章障涨掌帐胀彰丈仗漳樟账杖璋嶂仉瘴蟑獐幛鄣嫜\", chao: \"超朝潮炒钞抄巢吵剿绰嘲晁焯耖怊\", zhao: \"着照招找召朝赵兆昭肇罩钊沼嘲爪诏濯啁棹笊\", zhou: \"调州周洲舟骤轴昼宙粥皱肘咒帚胄绉纣妯啁诌繇碡籀酎荮\", che: \"车彻撤尺扯澈掣坼砗屮\", ju: \"车局据具举且居剧巨聚渠距句拒俱柜菊拘炬桔惧矩鞠驹锯踞咀瞿枸掬沮莒橘飓疽钜趄踽遽琚龃椐苣裾榘狙倨榉苴讵雎锔窭鞫犋屦醵\", cheng: \"成程城承称盛抢乘诚呈净惩撑澄秤橙骋逞瞠丞晟铛埕塍蛏柽铖酲裎枨\", rong: \"容荣融绒溶蓉熔戎榕茸冗嵘肜狨蝾\", sheng: \"生声升胜盛乘圣剩牲甸省绳笙甥嵊晟渑眚\", deng: \"等登邓灯澄凳瞪蹬噔磴嶝镫簦戥\", zhi: \"制之治质职只志至指织支值知识直致执置止植纸拓智殖秩旨址滞氏枝芝脂帜汁肢挚稚酯掷峙炙栉侄芷窒咫吱趾痔蜘郅桎雉祉郦陟痣蛭帙枳踯徵胝栀贽祗豸鸷摭轵卮轾彘觯絷跖埴夂黹忮骘膣踬\", zheng: \"政正证争整征郑丁症挣蒸睁铮筝拯峥怔诤狰徵钲\", tang: \"堂唐糖汤塘躺趟倘棠烫淌膛搪镗傥螳溏帑羰樘醣螗耥铴瑭\", chi: \"持吃池迟赤驰尺斥齿翅匙痴耻炽侈弛叱啻坻眙嗤墀哧茌豉敕笞饬踟蚩柢媸魑篪褫彳鸱螭瘛眵傺\", shi: \"是时实事市十使世施式势视识师史示石食始士失适试什泽室似诗饰殖释驶氏硕逝湿蚀狮誓拾尸匙仕柿矢峙侍噬嗜栅拭嘘屎恃轼虱耆舐莳铈谥炻豕鲥饣螫酾筮埘弑礻蓍鲺贳\", qi: \"企其起期气七器汽奇齐启旗棋妻弃揭枝歧欺骑契迄亟漆戚岂稽岐琦栖缉琪泣乞砌祁崎绮祺祈凄淇杞脐麒圻憩芪伎俟畦耆葺沏萋骐鳍綦讫蕲屺颀亓碛柒啐汔綮萁嘁蛴槭欹芑桤丌蜞\", chuai: \"揣踹啜搋膪\", tuo: \"托脱拓拖妥驼陀沱鸵驮唾椭坨佗砣跎庹柁橐乇铊沲酡鼍箨柝\", duo: \"多度夺朵躲铎隋咄堕舵垛惰哆踱跺掇剁柁缍沲裰哚隳\", xue: \"学血雪削薛穴靴谑噱鳕踅泶彐\", chong: \"重种充冲涌崇虫宠忡憧舂茺铳艟\", chou: \"筹抽绸酬愁丑臭仇畴稠瞅踌惆俦瘳雠帱\", qiu: \"求球秋丘邱仇酋裘龟囚遒鳅虬蚯泅楸湫犰逑巯艽俅蝤赇鼽糗\", xiu: \"修秀休宿袖绣臭朽锈羞嗅岫溴庥馐咻髹鸺貅\", chu: \"出处础初助除储畜触楚厨雏矗橱锄滁躇怵绌搐刍蜍黜杵蹰亍樗憷楮\", tuan: \"团揣湍疃抟彖\", zhui: \"追坠缀揣椎锥赘惴隹骓缒\", chuan: \"传川船穿串喘椽舛钏遄氚巛舡\", zhuan: \"专转传赚砖撰篆馔啭颛\", yuan: \"元员院原源远愿园援圆缘袁怨渊苑宛冤媛猿垣沅塬垸鸳辕鸢瑗圜爰芫鼋橼螈眢箢掾\", cuan: \"窜攒篡蹿撺爨汆镩\", chuang: \"创床窗闯幢疮怆\", zhuang: \"装状庄壮撞妆幢桩奘僮戆\", chui: \"吹垂锤炊椎陲槌捶棰\", chun: \"春纯醇淳唇椿蠢鹑朐莼肫蝽\", zhun: \"准屯淳谆肫窀\", cu: \"促趋趣粗簇醋卒蹴猝蹙蔟殂徂\", dun: \"吨顿盾敦蹲墩囤沌钝炖盹遁趸砘礅\", qu: \"区去取曲趋渠趣驱屈躯衢娶祛瞿岖龋觑朐蛐癯蛆苣阒诎劬蕖蘧氍黢蠼璩麴鸲磲\", xu: \"需许续须序徐休蓄畜虚吁绪叙旭邪恤墟栩絮圩婿戌胥嘘浒煦酗诩朐盱蓿溆洫顼勖糈砉醑\", chuo: \"辍绰戳淖啜龊踔辶\", zu: \"组族足祖租阻卒俎诅镞菹\", ji: \"济机其技基记计系期际及集级几给积极己纪即继击既激绩急奇吉季齐疾迹鸡剂辑籍寄挤圾冀亟寂暨脊跻肌稽忌饥祭缉棘矶汲畸姬藉瘠骥羁妓讥稷蓟悸嫉岌叽伎鲫诘楫荠戟箕霁嵇觊麂畿玑笈犄芨唧屐髻戢佶偈笄跽蒺乩咭赍嵴虮掎齑殛鲚剞洎丌墼蕺彐芰哜\", cong: \"从丛匆聪葱囱琮淙枞骢苁璁\", zong: \"总从综宗纵踪棕粽鬃偬枞腙\", cou: \"凑辏腠楱\", cui: \"衰催崔脆翠萃粹摧璀瘁悴淬啐隹毳榱\", wei: \"为位委未维卫围违威伟危味微唯谓伪慰尾魏韦胃畏帷喂巍萎蔚纬潍尉渭惟薇苇炜圩娓诿玮崴桅偎逶倭猥囗葳隗痿猬涠嵬韪煨艉隹帏闱洧沩隈鲔軎\", cun: \"村存寸忖皴\", zuo: \"作做座左坐昨佐琢撮祚柞唑嘬酢怍笮阼胙\", zuan: \"钻纂攥缵躜\", da: \"大达打答搭沓瘩惮嗒哒耷鞑靼褡笪怛妲\", dai: \"大代带待贷毒戴袋歹呆隶逮岱傣棣怠殆黛甙埭诒绐玳呔迨\", tai: \"大台太态泰抬胎汰钛苔薹肽跆邰鲐酞骀炱\", ta: \"他它她拓塔踏塌榻沓漯獭嗒挞蹋趿遢铊鳎溻闼\", dan: \"但单石担丹胆旦弹蛋淡诞氮郸耽殚惮儋眈疸澹掸膻啖箪聃萏瘅赕\", lu: \"路六陆录绿露鲁卢炉鹿禄赂芦庐碌麓颅泸卤潞鹭辘虏璐漉噜戮鲈掳橹轳逯渌蓼撸鸬栌氇胪镥簏舻辂垆\", tan: \"谈探坦摊弹炭坛滩贪叹谭潭碳毯瘫檀痰袒坍覃忐昙郯澹钽锬\", ren: \"人任认仁忍韧刃纫饪妊荏稔壬仞轫亻衽\", jie: \"家结解价界接节她届介阶街借杰洁截姐揭捷劫戒皆竭桔诫楷秸睫藉拮芥诘碣嗟颉蚧孑婕疖桀讦疥偈羯袷哜喈卩鲒骱\", yan: \"研严验演言眼烟沿延盐炎燕岩宴艳颜殷彦掩淹阎衍铅雁咽厌焰堰砚唁焉晏檐蜒奄俨腌妍谚兖筵焱偃闫嫣鄢湮赝胭琰滟阉魇酽郾恹崦芫剡鼹菸餍埏谳讠厣罨\", dang: \"当党档荡挡宕砀铛裆凼菪谠\", tao: \"套讨跳陶涛逃桃萄淘掏滔韬叨洮啕绦饕鼗\", tiao: \"条调挑跳迢眺苕窕笤佻啁粜髫铫祧龆蜩鲦\", te: \"特忑忒铽慝\", de: \"的地得德底锝\", dei: \"得\", di: \"的地第提低底抵弟迪递帝敌堤蒂缔滴涤翟娣笛棣荻谛狄邸嘀砥坻诋嫡镝碲骶氐柢籴羝睇觌\", ti: \"体提题弟替梯踢惕剔蹄棣啼屉剃涕锑倜悌逖嚏荑醍绨鹈缇裼\", tui: \"推退弟腿褪颓蜕忒煺\", you: \"有由又优游油友右邮尤忧幼犹诱悠幽佑釉柚铀鱿囿酉攸黝莠猷蝣疣呦蚴莸莜铕宥繇卣牖鼬尢蚰侑\", dian: \"电点店典奠甸碘淀殿垫颠滇癫巅惦掂癜玷佃踮靛钿簟坫阽\", tian: \"天田添填甜甸恬腆佃舔钿阗忝殄畋栝掭\", zhu: \"主术住注助属逐宁著筑驻朱珠祝猪诸柱竹铸株瞩嘱贮煮烛苎褚蛛拄铢洙竺蛀渚伫杼侏澍诛茱箸炷躅翥潴邾槠舳橥丶瘃麈疰\", nian: \"年念酿辗碾廿捻撵拈蔫鲶埝鲇辇黏\", diao: \"调掉雕吊钓刁貂凋碉鲷叼铫铞\", yao: \"要么约药邀摇耀腰遥姚窑瑶咬尧钥谣肴夭侥吆疟妖幺杳舀窕窈曜鹞爻繇徭轺铫鳐崾珧\", die: \"跌叠蝶迭碟爹谍牒耋佚喋堞瓞鲽垤揲蹀\", she: \"设社摄涉射折舍蛇拾舌奢慑赦赊佘麝歙畲厍猞揲滠\", ye: \"业也夜叶射野液冶喝页爷耶邪咽椰烨掖拽曳晔谒腋噎揶靥邺铘揲\", xie: \"些解协写血叶谢械鞋胁斜携懈契卸谐泄蟹邪歇泻屑挟燮榭蝎撷偕亵楔颉缬邂鲑瀣勰榍薤绁渫廨獬躞\", zhe: \"这者着著浙折哲蔗遮辙辄柘锗褶蜇蛰鹧谪赭摺乇磔螫\", ding: \"定订顶丁鼎盯钉锭叮仃铤町酊啶碇腚疔玎耵\", diu: \"丢铥\", ting: \"听庭停厅廷挺亭艇婷汀铤烃霆町蜓葶梃莛\", dong: \"动东董冬洞懂冻栋侗咚峒氡恫胴硐垌鸫岽胨\", tong: \"同通统童痛铜桶桐筒彤侗佟潼捅酮砼瞳恸峒仝嗵僮垌茼\", zhong: \"中重种众终钟忠仲衷肿踵冢盅蚣忪锺舯螽夂\", dou: \"都斗读豆抖兜陡逗窦渎蚪痘蔸钭篼\", du: \"度都独督读毒渡杜堵赌睹肚镀渎笃竺嘟犊妒牍蠹椟黩芏髑\", duan: \"断段短端锻缎煅椴簖\", dui: \"对队追敦兑堆碓镦怼憝\", rui: \"瑞兑锐睿芮蕊蕤蚋枘\", yue: \"月说约越乐跃兑阅岳粤悦曰钥栎钺樾瀹龠哕刖\", tun: \"吞屯囤褪豚臀饨暾氽\", hui: \"会回挥汇惠辉恢徽绘毁慧灰贿卉悔秽溃荟晖彗讳诲珲堕诙蕙晦睢麾烩茴喙桧蛔洄浍虺恚蟪咴隳缋哕\", wu: \"务物无五武午吴舞伍污乌误亡恶屋晤悟吾雾芜梧勿巫侮坞毋诬呜钨邬捂鹜兀婺妩於戊鹉浯蜈唔骛仵焐芴鋈庑鼯牾怃圬忤痦迕杌寤阢\", ya: \"亚压雅牙押鸭呀轧涯崖邪芽哑讶鸦娅衙丫蚜碣垭伢氩桠琊揠吖睚痖疋迓岈砑\", he: \"和合河何核盖贺喝赫荷盒鹤吓呵苛禾菏壑褐涸阂阖劾诃颌嗬貉曷翮纥盍\", wo: \"我握窝沃卧挝涡斡渥幄蜗喔倭莴龌肟硪\", en: \"恩摁蒽\", n: \"嗯唔\", er: \"而二尔儿耳迩饵洱贰铒珥佴鸸鲕\", fa: \"发法罚乏伐阀筏砝垡珐\", quan: \"全权券泉圈拳劝犬铨痊诠荃醛蜷颧绻犭筌鬈悛辁畎\", fei: \"费非飞肥废菲肺啡沸匪斐蜚妃诽扉翡霏吠绯腓痱芾淝悱狒榧砩鲱篚镄\", pei: \"配培坏赔佩陪沛裴胚妃霈淠旆帔呸醅辔锫\", ping: \"平评凭瓶冯屏萍苹乒坪枰娉俜鲆\", fo: \"佛\", hu: \"和护许户核湖互乎呼胡戏忽虎沪糊壶葫狐蝴弧瑚浒鹄琥扈唬滹惚祜囫斛笏芴醐猢怙唿戽槲觳煳鹕冱瓠虍岵鹱烀轷\", ga: \"夹咖嘎尬噶旮伽尕钆尜\", ge: \"个合各革格歌哥盖隔割阁戈葛鸽搁胳舸疙铬骼蛤咯圪镉颌仡硌嗝鬲膈纥袼搿塥哿虼\", ha: \"哈蛤铪\", xia: \"下夏峡厦辖霞夹虾狭吓侠暇遐瞎匣瑕唬呷黠硖罅狎瘕柙\", gai: \"改该盖概溉钙丐芥赅垓陔戤\", hai: \"海还害孩亥咳骸骇氦嗨胲醢\", gan: \"干感赶敢甘肝杆赣乾柑尴竿秆橄矸淦苷擀酐绀泔坩旰疳澉\", gang: \"港钢刚岗纲冈杠缸扛肛罡戆筻\", jiang: \"将强江港奖讲降疆蒋姜浆匠酱僵桨绛缰犟豇礓洚茳糨耩\", hang: \"行航杭巷夯吭桁沆绗颃\", gong: \"工公共供功红贡攻宫巩龚恭拱躬弓汞蚣珙觥肱廾\", hong: \"红宏洪轰虹鸿弘哄烘泓訇蕻闳讧荭黉薨\", guang: \"广光逛潢犷胱咣桄\", qiong: \"穷琼穹邛茕筇跫蛩銎\", gao: \"高告搞稿膏糕镐皋羔锆杲郜睾诰藁篙缟槁槔\", hao: \"好号毫豪耗浩郝皓昊皋蒿壕灏嚎濠蚝貉颢嗥薅嚆\", li: \"理力利立里李历例离励礼丽黎璃厉厘粒莉梨隶栗荔沥犁漓哩狸藜罹篱鲤砺吏澧俐骊溧砾莅锂笠蠡蛎痢雳俪傈醴栎郦俚枥喱逦娌鹂戾砬唳坜疠蜊黧猁鬲粝蓠呖跞疬缡鲡鳢嫠詈悝苈篥轹\", jia: \"家加价假佳架甲嘉贾驾嫁夹稼钾挟拮迦伽颊浃枷戛荚痂颉镓笳珈岬胛袈郏葭袷瘕铗跏蛱恝哿\", luo: \"落罗络洛逻螺锣骆萝裸漯烙摞骡咯箩珞捋荦硌雒椤镙跞瘰泺脶猡倮蠃\", ke: \"可科克客刻课颗渴壳柯棵呵坷恪苛咳磕珂稞瞌溘轲窠嗑疴蝌岢铪颏髁蚵缂氪骒钶锞\", qia: \"卡恰洽掐髂袷咭葜\", gei: \"给\", gen: \"根跟亘艮哏茛\", hen: \"很狠恨痕哏\", gou: \"构购够句沟狗钩拘勾苟垢枸篝佝媾诟岣彀缑笱鞲觏遘\", kou: \"口扣寇叩抠佝蔻芤眍筘\", gu: \"股古顾故固鼓骨估谷贾姑孤雇辜菇沽咕呱锢钴箍汩梏痼崮轱鸪牯蛊诂毂鹘菰罟嘏臌觚瞽蛄酤牿鲴\", pai: \"牌排派拍迫徘湃俳哌蒎\", gua: \"括挂瓜刮寡卦呱褂剐胍诖鸹栝呙\", tou: \"投头透偷愉骰亠\", guai: \"怪拐乖\", kuai: \"会快块筷脍蒯侩浍郐蒉狯哙\", guan: \"关管观馆官贯冠惯灌罐莞纶棺斡矜倌鹳鳏盥掼涫\", wan: \"万完晚湾玩碗顽挽弯蔓丸莞皖宛婉腕蜿惋烷琬畹豌剜纨绾脘菀芄箢\", ne: \"呢哪呐讷疒\", gui: \"规贵归轨桂柜圭鬼硅瑰跪龟匮闺诡癸鳜桧皈鲑刽晷傀眭妫炅庋簋刿宄匦\", jun: \"军均俊君峻菌竣钧骏龟浚隽郡筠皲麇捃\", jiong: \"窘炯迥炅冂扃\", jue: \"决绝角觉掘崛诀獗抉爵嚼倔厥蕨攫珏矍蹶谲镢鳜噱桷噘撅橛孓觖劂爝\", gun: \"滚棍辊衮磙鲧绲丨\", hun: \"婚混魂浑昏棍珲荤馄诨溷阍\", guo: \"国过果郭锅裹帼涡椁囗蝈虢聒埚掴猓崞蜾呙馘\", hei: \"黑嘿嗨\", kan: \"看刊勘堪坎砍侃嵌槛瞰阚龛戡凵莰\", heng: \"衡横恒亨哼珩桁蘅\", mo: \"万没么模末冒莫摩墨默磨摸漠脉膜魔沫陌抹寞蘑摹蓦馍茉嘿谟秣蟆貉嫫镆殁耱嬷麽瘼貊貘\", peng: \"鹏朋彭膨蓬碰苹棚捧亨烹篷澎抨硼怦砰嘭蟛堋\", hou: \"后候厚侯猴喉吼逅篌糇骺後鲎瘊堠\", hua: \"化华划话花画滑哗豁骅桦猾铧砉\", huai: \"怀坏淮徊槐踝\", huan: \"还环换欢患缓唤焕幻痪桓寰涣宦垸洹浣豢奂郇圜獾鲩鬟萑逭漶锾缳擐\", xun: \"讯训迅孙寻询循旬巡汛勋逊熏徇浚殉驯鲟薰荀浔洵峋埙巽郇醺恂荨窨蕈曛獯\", huang: \"黄荒煌皇凰慌晃潢谎惶簧璜恍幌湟蝗磺隍徨遑肓篁鳇蟥癀\", nai: \"能乃奶耐奈鼐萘氖柰佴艿\", luan: \"乱卵滦峦鸾栾銮挛孪脔娈\", qie: \"切且契窃茄砌锲怯伽惬妾趄挈郄箧慊\", jian: \"建间件见坚检健监减简艰践兼鉴键渐柬剑尖肩舰荐箭浅剪俭碱茧奸歼拣捡煎贱溅槛涧堑笺谏饯锏缄睑謇蹇腱菅翦戬毽笕犍硷鞯牮枧湔鲣囝裥踺搛缣鹣蒹谫僭戋趼楗\", nan: \"南难男楠喃囡赧腩囝蝻\", qian: \"前千钱签潜迁欠纤牵浅遣谦乾铅歉黔谴嵌倩钳茜虔堑钎骞阡掮钤扦芊犍荨仟芡悭缱佥愆褰凵肷岍搴箝慊椠\", qiang: \"强抢疆墙枪腔锵呛羌蔷襁羟跄樯戕嫱戗炝镪锖蜣\", xiang: \"向项相想乡象响香降像享箱羊祥湘详橡巷翔襄厢镶飨饷缃骧芗庠鲞葙蟓\", jiao: \"教交较校角觉叫脚缴胶轿郊焦骄浇椒礁佼蕉娇矫搅绞酵剿嚼饺窖跤蛟侥狡姣皎茭峤铰醮鲛湫徼鹪僬噍艽挢敫\", zhuo: \"着著缴桌卓捉琢灼浊酌拙茁涿镯淖啄濯焯倬擢斫棹诼浞禚\", qiao: \"桥乔侨巧悄敲俏壳雀瞧翘窍峭锹撬荞跷樵憔鞘橇峤诮谯愀鞒硗劁缲\", xiao: \"小效销消校晓笑肖削孝萧俏潇硝宵啸嚣霄淆哮筱逍姣箫骁枭哓绡蛸崤枵魈\", si: \"司四思斯食私死似丝饲寺肆撕泗伺嗣祀厮驷嘶锶俟巳蛳咝耜笥纟糸鸶缌澌姒汜厶兕\", kai: \"开凯慨岂楷恺揩锴铠忾垲剀锎蒈\", jin: \"进金今近仅紧尽津斤禁锦劲晋谨筋巾浸襟靳瑾烬缙钅矜觐堇馑荩噤廑妗槿赆衿卺\", qin: \"亲勤侵秦钦琴禽芹沁寝擒覃噙矜嗪揿溱芩衾廑锓吣檎螓\", jing: \"经京精境竞景警竟井惊径静劲敬净镜睛晶颈荆兢靖泾憬鲸茎腈菁胫阱旌粳靓痉箐儆迳婧肼刭弪獍\", ying: \"应营影英景迎映硬盈赢颖婴鹰荧莹樱瑛蝇萦莺颍膺缨瀛楹罂荥萤鹦滢蓥郢茔嘤璎嬴瘿媵撄潆\", jiu: \"就究九酒久救旧纠舅灸疚揪咎韭玖臼柩赳鸠鹫厩啾阄桕僦鬏\", zui: \"最罪嘴醉咀蕞觜\", juan: \"卷捐圈眷娟倦绢隽镌涓鹃鄄蠲狷锩桊\", suan: \"算酸蒜狻\", yun: \"员运云允孕蕴韵酝耘晕匀芸陨纭郧筠恽韫郓氲殒愠昀菀狁\", qun: \"群裙逡麇\", ka: \"卡喀咖咔咯佧胩\", kang: \"康抗扛慷炕亢糠伉钪闶\", keng: \"坑铿吭\", kao: \"考靠烤拷铐栲尻犒\", ken: \"肯垦恳啃龈裉\", yin: \"因引银印音饮阴隐姻殷淫尹荫吟瘾寅茵圻垠鄞湮蚓氤胤龈窨喑铟洇狺夤廴吲霪茚堙\", kong: \"空控孔恐倥崆箜\", ku: \"苦库哭酷裤枯窟挎骷堀绔刳喾\", kua: \"跨夸垮挎胯侉\", kui: \"亏奎愧魁馈溃匮葵窥盔逵睽馗聩喟夔篑岿喹揆隗傀暌跬蒉愦悝蝰\", kuan: \"款宽髋\", kuang: \"况矿框狂旷眶匡筐邝圹哐贶夼诳诓纩\", que: \"确却缺雀鹊阙瘸榷炔阕悫\", kun: \"困昆坤捆琨锟鲲醌髡悃阃\", kuo: \"扩括阔廓蛞\", la: \"拉落垃腊啦辣蜡喇剌旯砬邋瘌\", lai: \"来莱赖睐徕籁涞赉濑癞崃疠铼\", lan: \"兰览蓝篮栏岚烂滥缆揽澜拦懒榄斓婪阑褴罱啉谰镧漤\", lin: \"林临邻赁琳磷淋麟霖鳞凛拎遴蔺吝粼嶙躏廪檩啉辚膦瞵懔\", lang: \"浪朗郎廊狼琅榔螂阆锒莨啷蒗稂\", liang: \"量两粮良辆亮梁凉谅粱晾靓踉莨椋魉墚\", lao: \"老劳落络牢捞涝烙姥佬崂唠酪潦痨醪铑铹栳耢\", mu: \"目模木亩幕母牧莫穆姆墓慕牟牡募睦缪沐暮拇姥钼苜仫毪坶\", le: \"了乐勒肋叻鳓嘞仂泐\", lei: \"类累雷勒泪蕾垒磊擂镭肋羸耒儡嫘缧酹嘞诔檑\", sui: \"随岁虽碎尿隧遂髓穗绥隋邃睢祟濉燧谇眭荽\", lie: \"列烈劣裂猎冽咧趔洌鬣埒捩躐\", leng: \"冷愣棱楞塄\", ling: \"领令另零灵龄陵岭凌玲铃菱棱伶羚苓聆翎泠瓴囹绫呤棂蛉酃鲮柃\", lia: \"俩\", liao: \"了料疗辽廖聊寥缪僚燎缭撂撩嘹潦镣寮蓼獠钌尥鹩\", liu: \"流刘六留柳瘤硫溜碌浏榴琉馏遛鎏骝绺镏旒熘鹨锍\", lun: \"论轮伦仑纶沦抡囵\", lv: \"率律旅绿虑履吕铝屡氯缕滤侣驴榈闾偻褛捋膂稆\", lou: \"楼露漏陋娄搂篓喽镂偻瘘髅耧蝼嵝蒌\", mao: \"贸毛矛冒貌茂茅帽猫髦锚懋袤牦卯铆耄峁瑁蟊茆蝥旄泖昴瞀\", long: \"龙隆弄垄笼拢聋陇胧珑窿茏咙砻垅泷栊癃\", nong: \"农浓弄脓侬哝\", shuang: \"双爽霜孀泷\", shu: \"术书数属树输束述署朱熟殊蔬舒疏鼠淑叔暑枢墅俞曙抒竖蜀薯梳戍恕孰沭赎庶漱塾倏澍纾姝菽黍腧秫毹殳疋摅\", shuai: \"率衰帅摔甩蟀\", lve: \"略掠锊\", ma: \"么马吗摩麻码妈玛嘛骂抹蚂唛蟆犸杩\", me: \"么麽\", mai: \"买卖麦迈脉埋霾荬劢\", man: \"满慢曼漫埋蔓瞒蛮鳗馒幔谩螨熳缦镘颟墁鞔\", mi: \"米密秘迷弥蜜谜觅靡泌眯麋猕谧咪糜宓汨醚嘧弭脒冖幂祢縻蘼芈糸敉\", men: \"们门闷瞒汶扪焖懑鞔钔\", mang: \"忙盲茫芒氓莽蟒邙硭漭\", meng: \"蒙盟梦猛孟萌氓朦锰檬勐懵蟒蜢虻黾蠓艨甍艋瞢礞\", miao: \"苗秒妙描庙瞄缪渺淼藐缈邈鹋杪眇喵\", mou: \"某谋牟缪眸哞鍪蛑侔厶\", miu: \"缪谬\", mei: \"美没每煤梅媒枚妹眉魅霉昧媚玫酶镁湄寐莓袂楣糜嵋镅浼猸鹛\", wen: \"文问闻稳温纹吻蚊雯紊瘟汶韫刎璺玟阌\", mie: \"灭蔑篾乜咩蠛\", ming: \"明名命鸣铭冥茗溟酩瞑螟暝\", na: \"内南那纳拿哪娜钠呐捺衲镎肭\", nei: \"内那哪馁\", nuo: \"难诺挪娜糯懦傩喏搦锘\", ruo: \"若弱偌箬\", nang: \"囊馕囔曩攮\", nao: \"脑闹恼挠瑙淖孬垴铙桡呶硇猱蛲\", ni: \"你尼呢泥疑拟逆倪妮腻匿霓溺旎昵坭铌鲵伲怩睨猊\", nen: \"嫩恁\", neng: \"能\", nin: \"您恁\", niao: \"鸟尿溺袅脲茑嬲\", nie: \"摄聂捏涅镍孽捻蘖啮蹑嗫臬镊颞乜陧\", niang: \"娘酿\", ning: \"宁凝拧泞柠咛狞佞聍甯\", nu: \"努怒奴弩驽帑孥胬\", nv: \"女钕衄恧\", ru: \"入如女乳儒辱汝茹褥孺濡蠕嚅缛溽铷洳薷襦颥蓐\", nuan: \"暖\", nve: \"虐疟\", re: \"热若惹喏\", ou: \"区欧偶殴呕禺藕讴鸥瓯沤耦怄\", pao: \"跑炮泡抛刨袍咆疱庖狍匏脬\", pou: \"剖掊裒\", pen: \"喷盆湓\", pie: \"瞥撇苤氕丿\", pin: \"品贫聘频拼拚颦姘嫔榀牝\", se: \"色塞瑟涩啬穑铯槭\", qing: \"情青清请亲轻庆倾顷卿晴氢擎氰罄磬蜻箐鲭綮苘黥圊檠謦\", zan: \"赞暂攒堑昝簪糌瓒錾趱拶\", shao: \"少绍召烧稍邵哨韶捎勺梢鞘芍苕劭艄筲杓潲\", sao: \"扫骚嫂梢缫搔瘙臊埽缲鳋\", sha: \"沙厦杀纱砂啥莎刹杉傻煞鲨霎嗄痧裟挲铩唼歃\", xuan: \"县选宣券旋悬轩喧玄绚渲璇炫萱癣漩眩暄煊铉楦泫谖痃碹揎镟儇\", ran: \"然染燃冉苒髯蚺\", rang: \"让壤攘嚷瓤穰禳\", rao: \"绕扰饶娆桡荛\", reng: \"仍扔\", ri: \"日\", rou: \"肉柔揉糅鞣蹂\", ruan: \"软阮朊\", run: \"润闰\", sa: \"萨洒撒飒卅仨脎\", suo: \"所些索缩锁莎梭琐嗦唆唢娑蓑羧挲桫嗍睃\", sai: \"思赛塞腮噻鳃\", shui: \"说水税谁睡氵\", sang: \"桑丧嗓搡颡磉\", sen: \"森\", seng: \"僧\", shai: \"筛晒\", shang: \"上商尚伤赏汤裳墒晌垧觞殇熵绱\", xing: \"行省星腥猩惺兴刑型形邢饧醒幸杏性姓陉荇荥擤悻硎\", shou: \"收手受首售授守寿瘦兽狩绶艏扌\", shuo: \"说数硕烁朔铄妁槊蒴搠\", su: \"速素苏诉缩塑肃俗宿粟溯酥夙愫簌稣僳谡涑蔌嗉觫\", shua: \"刷耍唰\", shuan: \"栓拴涮闩\", shun: \"顺瞬舜吮\", song: \"送松宋讼颂耸诵嵩淞怂悚崧凇忪竦菘\", sou: \"艘搜擞嗽嗖叟馊薮飕嗾溲锼螋瞍\", sun: \"损孙笋荪榫隼狲飧\", teng: \"腾疼藤滕誊\", tie: \"铁贴帖餮萜\", tu: \"土突图途徒涂吐屠兔秃凸荼钍菟堍酴\", wai: \"外歪崴\", wang: \"王望往网忘亡旺汪枉妄惘罔辋魍\", weng: \"翁嗡瓮蓊蕹\", zhua: \"抓挝爪\", yang: \"样养央阳洋扬杨羊详氧仰秧痒漾疡泱殃恙鸯徉佯怏炀烊鞅蛘\", xiong: \"雄兄熊胸凶匈汹芎\", yo: \"哟唷\", yong: \"用永拥勇涌泳庸俑踊佣咏雍甬镛臃邕蛹恿慵壅痈鳙墉饔喁\", za: \"杂扎咱砸咋匝咂拶\", zai: \"在再灾载栽仔宰哉崽甾\", zao: \"造早遭枣噪灶燥糟凿躁藻皂澡蚤唣\", zei: \"贼\", zen: \"怎谮\", zeng: \"增曾综赠憎锃甑罾缯\", zhei: \"这\", zou: \"走邹奏揍诹驺陬楱鄹鲰\", zhuai: \"转拽\", zun: \"尊遵鳟樽撙\", dia: \"嗲\", nou: \"耨\" }, a.allPinyin = [\"a\", \"ai\", \"an\", \"ang\", \"ao\", \"ba\", \"bao\", \"bai\", \"ban\", \"bang\", \"bei\", \"ben\", \"beng\", \"bi\", \"bian\", \"biao\", \"bie\", \"bin\", \"bing\", \"bo\", \"bu\", \"ca\", \"cai\", \"can\", \"cang\", \"cao\", \"ce\", \"cen\", \"ceng\", \"cha\", \"chai\", \"chan\", \"chang\", \"chao\", \"che\", \"chen\", \"cheng\", \"chong\", \"chou\", \"chi\", \"chu\", \"chua\", \"chuai\", \"chuan\", \"chuang\", \"chui\", \"chun\", \"chuo\", \"ci\", \"cong\", \"cou\", \"cu\", \"cuan\", \"cui\", \"cun\", \"cuo\", \"da\", \"dai\", \"dan\", \"dang\", \"dao\", \"de\", \"dei\", \"den\", \"deng\", \"di\", \"dian\", \"diao\", \"die\", \"ding\", \"diu\", \"dong\", \"dou\", \"du\", \"duan\", \"dui\", \"dun\", \"duo\", \"e\", \"ei\", \"en\", \"eng\", \"er\", \"fa\", \"fan\", \"fang\", \"fei\", \"fen\", \"feng\", \"fo\", \"fou\", \"fu\", \"ga\", \"gai\", \"gan\", \"gang\", \"gao\", \"ge\", \"gei\", \"gen\", \"geng\", \"gong\", \"gou\", \"gu\", \"gua\", \"guai\", \"guan\", \"guang\", \"gui\", \"gun\", \"guo\", \"ha\", \"hai\", \"han\", \"hang\", \"hao\", \"he\", \"hei\", \"hen\", \"heng\", \"hong\", \"hou\", \"hu\", \"hua\", \"huai\", \"huan\", \"huang\", \"hui\", \"hun\", \"huo\", \"ji\", \"jia\", \"jian\", \"jiang\", \"jiao\", \"jie\", \"jin\", \"jing\", \"jiong\", \"jiu\", \"ju\", \"juan\", \"jue\", \"jun\", \"ka\", \"kai\", \"kan\", \"kang\", \"kao\", \"ke\", \"ken\", \"keng\", \"kong\", \"kou\", \"ku\", \"kua\", \"kuai\", \"kuan\", \"kuang\", \"kui\", \"kun\", \"kuo\", \"la\", \"lai\", \"lan\", \"lang\", \"lao\", \"le\", \"lei\", \"leng\", \"li\", \"lia\", \"lian\", \"liang\", \"liao\", \"lie\", \"lin\", \"ling\", \"liu\", \"long\", \"lou\", \"lu\", \"lv\", \"luan\", \"lve\", \"lun\", \"luo\", \"ma\", \"mai\", \"man\", \"mang\", \"mao\", \"me\", \"mei\", \"men\", \"meng\", \"mi\", \"mian\", \"miao\", \"mie\", \"min\", \"ming\", \"miu\", \"mo\", \"mou\", \"mu\", \"na\", \"nai\", \"nan\", \"nang\", \"nao\", \"ne\", \"nei\", \"nen\", \"neng\", \"ni\", \"nian\", \"niang\", \"niao\", \"nie\", \"nin\", \"ning\", \"niu\", \"nong\", \"nou\", \"nu\", \"nv\", \"nuan\", \"nve\", \"nuaio\", \"o\", \"ou\", \"pa\", \"pai\", \"pan\", \"pang\", \"pao\", \"pei\", \"pen\", \"peng\", \"pi\", \"pian\", \"piao\", \"pie\", \"pin\", \"ping\", \"po\", \"pou\", \"pu\", \"qi\", \"qia\", \"qian\", \"qiang\", \"qiao\", \"qie\", \"qin\", \"qing\", \"qiong\", \"qiu\", \"qu\", \"quan\", \"que\", \"qun\", \"ran\", \"rang\", \"rao\", \"re\", \"ren\", \"reng\", \"ri\", \"rong\", \"rou\", \"ru\", \"ruan\", \"rui\", \"run\", \"ruo\", \"sa\", \"sai\", \"san\", \"sang\", \"sao\", \"se\", \"sen\", \"seng\", \"sha\", \"shai\", \"shan\", \"shang\", \"shao\", \"she\", \"shei\", \"shen\", \"sheng\", \"shou\", \"shi\", \"shu\", \"shua\", \"shuai\", \"shuan\", \"shuang\", \"shui\", \"shun\", \"shuo\", \"si\", \"song\", \"sou\", \"su\", \"suan\", \"sui\", \"sun\", \"suo\", \"ta\", \"tai\", \"tan\", \"tang\", \"tao\", \"te\", \"teng\", \"ti\", \"tian\", \"tiao\", \"tie\", \"ting\", \"tong\", \"tou\", \"tu\", \"tuan\", \"tui\", \"tun\", \"tuo\", \"wa\", \"wai\", \"wan\", \"wang\", \"wei\", \"wen\", \"weng\", \"wo\", \"wu\", \"xi\", \"xia\", \"xian\", \"xiang\", \"xiao\", \"xie\", \"xin\", \"xing\", \"xiong\", \"xiu\", \"xu\", \"xuan\", \"xue\", \"xun\", \"ya\", \"yan\", \"yang\", \"yao\", \"ye\", \"yi\", \"yin\", \"ying\", \"yong\", \"you\", \"yu\", \"yuan\", \"yue\", \"yun\", \"za\", \"zai\", \"zan\", \"zang\", \"zao\", \"ze\", \"zei\", \"zen\", \"zeng\", \"zha\", \"zhai\", \"zhan\", \"zhang\", \"zhao\", \"zhe\", \"zhei\", \"zhen\", \"zheng\", \"zhong\", \"zhou\", \"zhi\", \"zhu\", \"zhua\", \"zhuai\", \"zhuan\", \"zhuang\", \"zhui\", \"zhun\", \"zhuo\", \"zi\", \"zong\", \"zou\", \"zu\", \"zuan\", \"zui\", \"zun\", \"zuo\"];}, function (n, a, i) {\"use strict\";var u = i(0).pinyin_dict_notone,e = i(0).allPinyin,o = function () {var n = {};for (var a in u) {for (var i = u[a], e = 0, o = i.length; e < o; e++) {n[i[e]] ? n[i[e]] = n[i[e]] + \" \" + a : n[i[e]] = a;}}return n;}(),g = {};function h(n) {for (var a = [], i = (n.length, []), u = 0; u <= n.length; u++) {i.push(!0);}return function n(a, i, u, o, g) {if (a === i.length) return void o.push(u.join(\" \"));var h = function h(_h) {var t = i.substring(a, _h + 1),r = !1;if (e.some(function (n) {return 0 === n.indexOf(t);}) && !i[_h + 1] && g[_h + 1]) {if (1 === t.length) u.push(t);else {var c = [];e.forEach(function (n) {0 === n.indexOf(t) && c.push(n);}), u.push(c);}r = !0;} else -1 !== e.indexOf(t) && g[_h + 1] && (u.push(t), r = !0);if (r) {var s = o.length;n(_h + 1, i, u, o, g), o.length === s && (g[_h + 1] = !1), u.pop();}};for (var t = a; t < i.length; t++) {h(t);}}(0, n, [], a, i), a;}function t(n) {var a = [];return h(n).forEach(function (n) {var i = n.split(\" \"),u = i.length - 1;i[u].indexOf(\",\") ? i[u].split(\",\").forEach(function (n) {i.splice(u, 1, n), a.push(JSON.parse(JSON.stringify(i)));}) : a.push(i);}), 0 !== a.length && a[0].length === n.length || a.push(n.split(\"\")), g = function (n, a, i) {return a in n ? Object.defineProperty(n, a, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : n[a] = i, n;}({}, n, a), a;}function r(n, a, i, u) {if (!n) return !1;var e = n.split(\" \");return e.forEach(function (n) {n.length > 0 && u && e.push(n.charAt(0));}), i ? e.some(function (n) {return 0 === n.indexOf(a);}) : -1 !== e.indexOf(a);}function c(n, a, i) {for (var u = n.length, e = 0; e < a.length; e++) {var o = a[e],g = o.length,h = g === i.length;if (g <= u) for (var t = 0; u - t >= g;) {for (var c = !0, s = 0, l = 0, f = 0; f < o.length; f += 1) {if (0 === f && \" \" === n[t + f + s]) s += 1, f -= 1;else if (\" \" === n[t + f + l]) l += 1, f -= 1;else if (!r(n[t + f + l], o[f], !n[t + f + 1] || !o[f + 1], h)) {t += 1, c = !1;break;}}if (c) return [t + s, t + l + f - 1];}}return !1;}var s = { match: function match(n, a) {n = n.toLowerCase(), a = a.replace(/\\s+/g, \"\").toLowerCase();var i = n.indexOf(a);if (-1 !== i) return [i, i + a.length - 1];var u = c(n.split(\"\"), [a.split(\"\")], a);return u || c(function (n) {for (var a = [], i = 0, u = n.length; i < u; i++) {var e = n.charAt(i);a.push(o[e] || e);}return a;}(n), g[a] || t(a), a);} };n.exports = s;}]);});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///63\n");

/***/ }),

/***/ 7:
/*!**************************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/pages.json?{"type":"style"} ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/main/main\": { \"navigationBarTitleText\": \"首页\" }, \"pages/login/login\": { \"navigationBarTitleText\": \"登录\" }, \"pages/bind/bind\": { \"navigationBarTitleText\": \"账号绑定\" }, \"pages/user/user\": { \"navigationBarTitleText\": \"我的\" }, \"pages/deliver/deliver\": { \"navigationBarTitleText\": \"配送任务\", \"enablePullDownRefresh\": true }, \"pages/deliveritem/deliveritem\": { \"navigationBarTitleText\": \"装车\" }, \"pages/purchase/purchase\": { \"navigationBarTitleText\": \"采购任务\", \"navigationStyle\": \"custom\", \"enablePullDownRefresh\": true }, \"pages/purchaseitem/purchaseitem\": { \"navigationBarTitleText\": \"定价\" }, \"pages/inspect/inspect\": { \"navigationBarTitleText\": \"验收任务\" }, \"pages/inspectitem/inspectitem\": { \"navigationBarTitleText\": \"验收\" }, \"pages/sales/sales\": { \"navigationBarTitleText\": \"销售单\", \"enablePullDownRefresh\": true }, \"pages/salesitem/salesitem\": { \"navigationBarTitleText\": \"销售菜品\" }, \"pages/report/report\": { \"navigationBarTitleText\": \"报表\" }, \"pages/salesanalysis/salesanalysis\": { \"navigationBarTitleText\": \"销售额分析\" }, \"pages/grossprofitanalysis/grossprofitanalysis\": { \"navigationBarTitleText\": \"毛利分析\" } }, \"globalStyle\": { \"navigationBarTextStyle\": \"white\", \"navigationBarTitleText\": \"uni-app\", \"navigationBarBackgroundColor\": \"#0faeff\", \"backgroundColor\": \"#fbf9fe\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsRUFBQyxtQkFBa0IsRUFBQywwQkFBeUIsSUFBMUIsRUFBbkIsRUFBbUQscUJBQW9CLEVBQUMsMEJBQXlCLElBQTFCLEVBQXZFLEVBQXVHLG1CQUFrQixFQUFDLDBCQUF5QixNQUExQixFQUF6SCxFQUEySixtQkFBa0IsRUFBQywwQkFBeUIsSUFBMUIsRUFBN0ssRUFBNk0seUJBQXdCLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLHlCQUF3QixJQUF6RCxFQUFyTyxFQUFvUyxpQ0FBZ0MsRUFBQywwQkFBeUIsSUFBMUIsRUFBcFUsRUFBb1csMkJBQTBCLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLG1CQUFrQixRQUFuRCxFQUE0RCx5QkFBd0IsSUFBcEYsRUFBOVgsRUFBd2QsbUNBQWtDLEVBQUMsMEJBQXlCLElBQTFCLEVBQTFmLEVBQTBoQix5QkFBd0IsRUFBQywwQkFBeUIsTUFBMUIsRUFBbGpCLEVBQW9sQixpQ0FBZ0MsRUFBQywwQkFBeUIsSUFBMUIsRUFBcG5CLEVBQW9wQixxQkFBb0IsRUFBQywwQkFBeUIsS0FBMUIsRUFBZ0MseUJBQXdCLElBQXhELEVBQXhxQixFQUFzdUIsNkJBQTRCLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWx3QixFQUFveUIsdUJBQXNCLEVBQUMsMEJBQXlCLElBQTFCLEVBQTF6QixFQUEwMUIscUNBQW9DLEVBQUMsMEJBQXlCLE9BQTFCLEVBQTkzQixFQUFpNkIsaURBQWdELEVBQUMsMEJBQXlCLE1BQTFCLEVBQWo5QixFQUFULEVBQTYvQixlQUFjLEVBQUMsMEJBQXlCLE9BQTFCLEVBQWtDLDBCQUF5QixTQUEzRCxFQUFxRSxnQ0FBK0IsU0FBcEcsRUFBOEcsbUJBQWtCLFNBQWhJLEVBQTNnQyxFIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XCJwYWdlc1wiOntcInBhZ2VzL21haW4vbWFpblwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIummlumhtVwifSxcInBhZ2VzL2xvZ2luL2xvZ2luXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi55m75b2VXCJ9LFwicGFnZXMvYmluZC9iaW5kXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6LSm5Y+357uR5a6aXCJ9LFwicGFnZXMvdXNlci91c2VyXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5oiR55qEXCJ9LFwicGFnZXMvZGVsaXZlci9kZWxpdmVyXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6YWN6YCB5Lu75YqhXCIsXCJlbmFibGVQdWxsRG93blJlZnJlc2hcIjp0cnVlfSxcInBhZ2VzL2RlbGl2ZXJpdGVtL2RlbGl2ZXJpdGVtXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6KOF6L2mXCJ9LFwicGFnZXMvcHVyY2hhc2UvcHVyY2hhc2VcIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLph4fotK3ku7vliqFcIixcIm5hdmlnYXRpb25TdHlsZVwiOlwiY3VzdG9tXCIsXCJlbmFibGVQdWxsRG93blJlZnJlc2hcIjp0cnVlfSxcInBhZ2VzL3B1cmNoYXNlaXRlbS9wdXJjaGFzZWl0ZW1cIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLlrprku7dcIn0sXCJwYWdlcy9pbnNwZWN0L2luc3BlY3RcIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLpqozmlLbku7vliqFcIn0sXCJwYWdlcy9pbnNwZWN0aXRlbS9pbnNwZWN0aXRlbVwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIumqjOaUtlwifSxcInBhZ2VzL3NhbGVzL3NhbGVzXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6ZSA5ZSu5Y2VXCIsXCJlbmFibGVQdWxsRG93blJlZnJlc2hcIjp0cnVlfSxcInBhZ2VzL3NhbGVzaXRlbS9zYWxlc2l0ZW1cIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLplIDllK7oj5zlk4FcIn0sXCJwYWdlcy9yZXBvcnQvcmVwb3J0XCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5oql6KGoXCJ9LFwicGFnZXMvc2FsZXNhbmFseXNpcy9zYWxlc2FuYWx5c2lzXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6ZSA5ZSu6aKd5YiG5p6QXCJ9LFwicGFnZXMvZ3Jvc3Nwcm9maXRhbmFseXNpcy9ncm9zc3Byb2ZpdGFuYWx5c2lzXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5q+b5Yip5YiG5p6QXCJ9fSxcImdsb2JhbFN0eWxlXCI6e1wibmF2aWdhdGlvbkJhclRleHRTdHlsZVwiOlwid2hpdGVcIixcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcInVuaS1hcHBcIixcIm5hdmlnYXRpb25CYXJCYWNrZ3JvdW5kQ29sb3JcIjpcIiMwZmFlZmZcIixcImJhY2tncm91bmRDb2xvclwiOlwiI2ZiZjlmZVwifX0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!*************************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/pages.json?{"type":"stat"} ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__C9395DE\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX19DOTM5NURFXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),

/***/ 9:
/*!*************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/store/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 10));\nvar _auth = __webpack_require__(/*! @/common/auth */ 11);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n// import { parseJavaTime } from '@/common/utils/tools.js'\n\n_vue.default.use(_vuex.default);\n\nvar store = new _vuex.default.Store({\n  state: {\n    /**\r\n            * 是否需要强制登录\r\n            */\n    forcedLogin: true,\n    hasLogin: false,\n    isLoading: false,\n    userInfo: undefined,\n    permissionList: [],\n    userToken: '',\n    tokenExpireTime: undefined },\n\n  mutations: {\n    login: function login(state, provider) {\n      state.userToken = provider.token;\n      // state.tokenExpireTime = parseJavaTime(provider.expireTime)\n      (0, _auth.setToken)(provider.token);\n    },\n    logout: function logout(state) {//退出登录  \n      state.hasLogin = false;\n      state.userInfo = undefined;\n      state.permissionList = [];\n      state.userToken = '';\n      state.tokenExpireTime = undefined;\n      (0, _auth.removeToken)();\n    },\n    loadingInfo: function loadingInfo(state, loading) {\n      state.isLoading = loading;\n    },\n    info: function info(state, user) {\n      state.hasLogin = true;\n      state.userToken = (0, _auth.getToken)();\n      state.userInfo = user;\n      state.permissionList = user.permissionList;\n\n      // const res = await getUserInfo();\n      // if(res) {\n      //     console.log(res)\n      //     state.hasLogin = true\n      //     state.userToken = getToken()\n      //     state.userInfo = res.data\n      //     state.permissionList = res.data.permissionList\n      // }\n    } } });var _default =\n\n\n\nstore;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvaW5kZXguanMiXSwibmFtZXMiOlsiVnVlIiwidXNlIiwiVnVleCIsInN0b3JlIiwiU3RvcmUiLCJzdGF0ZSIsImZvcmNlZExvZ2luIiwiaGFzTG9naW4iLCJpc0xvYWRpbmciLCJ1c2VySW5mbyIsInVuZGVmaW5lZCIsInBlcm1pc3Npb25MaXN0IiwidXNlclRva2VuIiwidG9rZW5FeHBpcmVUaW1lIiwibXV0YXRpb25zIiwibG9naW4iLCJwcm92aWRlciIsInRva2VuIiwibG9nb3V0IiwibG9hZGluZ0luZm8iLCJsb2FkaW5nIiwiaW5mbyIsInVzZXIiXSwibWFwcGluZ3MiOiJ1RkFBQTtBQUNBO0FBQ0EseUQ7QUFDQTs7QUFFQUEsYUFBSUMsR0FBSixDQUFRQyxhQUFSOztBQUVBLElBQU1DLEtBQUssR0FBRyxJQUFJRCxjQUFLRSxLQUFULENBQWU7QUFDekJDLE9BQUssRUFBRTtBQUNIOzs7QUFHQUMsZUFBVyxFQUFFLElBSlY7QUFLSEMsWUFBUSxFQUFFLEtBTFA7QUFNSEMsYUFBUyxFQUFFLEtBTlI7QUFPSEMsWUFBUSxFQUFFQyxTQVBQO0FBUVRDLGtCQUFjLEVBQUUsRUFSUDtBQVNUQyxhQUFTLEVBQUUsRUFURjtBQVVUQyxtQkFBZSxFQUFFSCxTQVZSLEVBRGtCOztBQWF6QkksV0FBUyxFQUFFO0FBQ2JDLFNBRGEsaUJBQ1BWLEtBRE8sRUFDQVcsUUFEQSxFQUNVO0FBQ3RCWCxXQUFLLENBQUNPLFNBQU4sR0FBa0JJLFFBQVEsQ0FBQ0MsS0FBM0I7QUFDQTtBQUNTLDBCQUFTRCxRQUFRLENBQUNDLEtBQWxCO0FBQ0gsS0FMTTtBQU1QQyxVQU5PLGtCQU1BYixLQU5BLEVBTU8sQ0FBQztBQUNYQSxXQUFLLENBQUNFLFFBQU4sR0FBaUIsS0FBakI7QUFDQUYsV0FBSyxDQUFDSSxRQUFOLEdBQWlCQyxTQUFqQjtBQUNUTCxXQUFLLENBQUNNLGNBQU4sR0FBdUIsRUFBdkI7QUFDQU4sV0FBSyxDQUFDTyxTQUFOLEdBQWtCLEVBQWxCO0FBQ0FQLFdBQUssQ0FBQ1EsZUFBTixHQUF3QkgsU0FBeEI7QUFDUztBQUNILEtBYk07QUFjUFMsZUFkTyx1QkFjS2QsS0FkTCxFQWNZZSxPQWRaLEVBY3FCO0FBQ3hCZixXQUFLLENBQUNHLFNBQU4sR0FBa0JZLE9BQWxCO0FBQ0gsS0FoQk07QUFpQlBDLFFBakJPLGdCQWlCRmhCLEtBakJFLEVBaUJLaUIsSUFqQkwsRUFpQlc7QUFDZGpCLFdBQUssQ0FBQ0UsUUFBTixHQUFpQixJQUFqQjtBQUNBRixXQUFLLENBQUNPLFNBQU4sR0FBa0IscUJBQWxCO0FBQ0FQLFdBQUssQ0FBQ0ksUUFBTixHQUFpQmEsSUFBakI7QUFDQWpCLFdBQUssQ0FBQ00sY0FBTixHQUF1QlcsSUFBSSxDQUFDWCxjQUE1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1QsS0EvQlksRUFiYyxFQUFmLENBQWQsQzs7OztBQWdEZVIsSyIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBWdWV4IGZyb20gJ3Z1ZXgnXHJcbmltcG9ydCB7IGdldFRva2VuLCBzZXRUb2tlbiwgcmVtb3ZlVG9rZW4gfSBmcm9tICdAL2NvbW1vbi9hdXRoJ1xyXG4vLyBpbXBvcnQgeyBwYXJzZUphdmFUaW1lIH0gZnJvbSAnQC9jb21tb24vdXRpbHMvdG9vbHMuanMnXHJcblxyXG5WdWUudXNlKFZ1ZXgpXHJcblxyXG5jb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHtcclxuICAgIHN0YXRlOiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5piv5ZCm6ZyA6KaB5by65Yi255m75b2VXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZm9yY2VkTG9naW46IHRydWUsXHJcbiAgICAgICAgaGFzTG9naW46IGZhbHNlLFxyXG4gICAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgdXNlckluZm86IHVuZGVmaW5lZCxcclxuXHRcdHBlcm1pc3Npb25MaXN0OiBbXSxcclxuXHRcdHVzZXJUb2tlbjogJycsXHJcblx0XHR0b2tlbkV4cGlyZVRpbWU6IHVuZGVmaW5lZFxyXG4gICAgfSxcclxuICAgIG11dGF0aW9uczoge1xyXG5cdFx0bG9naW4oc3RhdGUsIHByb3ZpZGVyKSB7XHJcblx0XHRcdHN0YXRlLnVzZXJUb2tlbiA9IHByb3ZpZGVyLnRva2VuXHJcblx0XHRcdC8vIHN0YXRlLnRva2VuRXhwaXJlVGltZSA9IHBhcnNlSmF2YVRpbWUocHJvdmlkZXIuZXhwaXJlVGltZSlcclxuICAgICAgICAgICAgc2V0VG9rZW4ocHJvdmlkZXIudG9rZW4pXHJcbiAgICAgICAgfSwgIFxyXG4gICAgICAgIGxvZ291dChzdGF0ZSkgey8v6YCA5Ye655m75b2VICBcclxuICAgICAgICAgICAgc3RhdGUuaGFzTG9naW4gPSBmYWxzZSAgXHJcbiAgICAgICAgICAgIHN0YXRlLnVzZXJJbmZvID0gdW5kZWZpbmVkXHJcblx0XHRcdHN0YXRlLnBlcm1pc3Npb25MaXN0ID0gW11cclxuXHRcdFx0c3RhdGUudXNlclRva2VuID0gJydcclxuXHRcdFx0c3RhdGUudG9rZW5FeHBpcmVUaW1lID0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIHJlbW92ZVRva2VuKClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvYWRpbmdJbmZvKHN0YXRlLCBsb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmlzTG9hZGluZyA9IGxvYWRpbmdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluZm8oc3RhdGUsIHVzZXIpIHtcclxuICAgICAgICAgICAgc3RhdGUuaGFzTG9naW4gPSB0cnVlXHJcbiAgICAgICAgICAgIHN0YXRlLnVzZXJUb2tlbiA9IGdldFRva2VuKClcclxuICAgICAgICAgICAgc3RhdGUudXNlckluZm8gPSB1c2VyXHJcbiAgICAgICAgICAgIHN0YXRlLnBlcm1pc3Npb25MaXN0ID0gdXNlci5wZXJtaXNzaW9uTGlzdFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gY29uc3QgcmVzID0gYXdhaXQgZ2V0VXNlckluZm8oKTtcclxuICAgICAgICAgICAgLy8gaWYocmVzKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhyZXMpXHJcbiAgICAgICAgICAgIC8vICAgICBzdGF0ZS5oYXNMb2dpbiA9IHRydWVcclxuICAgICAgICAgICAgLy8gICAgIHN0YXRlLnVzZXJUb2tlbiA9IGdldFRva2VuKClcclxuICAgICAgICAgICAgLy8gICAgIHN0YXRlLnVzZXJJbmZvID0gcmVzLmRhdGFcclxuICAgICAgICAgICAgLy8gICAgIHN0YXRlLnBlcm1pc3Npb25MaXN0ID0gcmVzLmRhdGEucGVybWlzc2lvbkxpc3RcclxuICAgICAgICAgICAgLy8gfVxyXG5cdFx0fVxyXG4gICAgfVxyXG59KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RvcmVcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),

/***/ 94:
/*!**********************************************************************!*\
  !*** C:/Users/Dell/Documents/dyd-app-supply/common/utils/message.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.msgSuccess = msgSuccess;exports.msgError = msgError;function msgSuccess(msg) {\n  if (msg === null || msg === undefined) {\n    msg = '成功';\n  }\n  uni.showToast({\n    title: msg,\n    icon: 'success',\n    mask: true });\n\n}\n\nfunction msgError(msg) {\n  if (msg === null || msg === undefined) {\n    msg = '失败';\n  }\n  uni.showToast({\n    title: msg,\n    icon: 'none',\n    mask: true });\n\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL3V0aWxzL21lc3NhZ2UuanMiXSwibmFtZXMiOlsibXNnU3VjY2VzcyIsIm1zZyIsInVuZGVmaW5lZCIsInVuaSIsInNob3dUb2FzdCIsInRpdGxlIiwiaWNvbiIsIm1hc2siLCJtc2dFcnJvciJdLCJtYXBwaW5ncyI6InFLQUFPLFNBQVNBLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCO0FBQzVCLE1BQUdBLEdBQUcsS0FBSyxJQUFSLElBQWdCQSxHQUFHLEtBQUtDLFNBQTNCLEVBQXNDO0FBQ2xDRCxPQUFHLEdBQUcsSUFBTjtBQUNIO0FBQ0RFLEtBQUcsQ0FBQ0MsU0FBSixDQUFjO0FBQ1ZDLFNBQUssRUFBRUosR0FERztBQUVWSyxRQUFJLEVBQUUsU0FGSTtBQUdWQyxRQUFJLEVBQUUsSUFISSxFQUFkOztBQUtIOztBQUVNLFNBQVNDLFFBQVQsQ0FBa0JQLEdBQWxCLEVBQXVCO0FBQzFCLE1BQUdBLEdBQUcsS0FBSyxJQUFSLElBQWdCQSxHQUFHLEtBQUtDLFNBQTNCLEVBQXNDO0FBQ2xDRCxPQUFHLEdBQUcsSUFBTjtBQUNIO0FBQ0RFLEtBQUcsQ0FBQ0MsU0FBSixDQUFjO0FBQ1ZDLFNBQUssRUFBRUosR0FERztBQUVWSyxRQUFJLEVBQUUsTUFGSTtBQUdWQyxRQUFJLEVBQUUsSUFISSxFQUFkOztBQUtILEMiLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbXNnU3VjY2Vzcyhtc2cpIHtcclxuICAgIGlmKG1zZyA9PT0gbnVsbCB8fCBtc2cgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIG1zZyA9ICfmiJDlip8nXHJcbiAgICB9XHJcbiAgICB1bmkuc2hvd1RvYXN0KHtcclxuICAgICAgICB0aXRsZTogbXNnLFxyXG4gICAgICAgIGljb246ICdzdWNjZXNzJyxcclxuICAgICAgICBtYXNrOiB0cnVlXHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbXNnRXJyb3IobXNnKSB7XHJcbiAgICBpZihtc2cgPT09IG51bGwgfHwgbXNnID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBtc2cgPSAn5aSx6LSlJ1xyXG4gICAgfVxyXG4gICAgdW5pLnNob3dUb2FzdCh7XHJcbiAgICAgICAgdGl0bGU6IG1zZyxcclxuICAgICAgICBpY29uOiAnbm9uZScsXHJcbiAgICAgICAgbWFzazogdHJ1ZVxyXG4gICAgfSlcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///94\n");

/***/ })

}]);